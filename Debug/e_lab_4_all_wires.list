
e_lab_4_all_wires.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b74  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08003c34  08003c34  00004c34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ef0  08003ef0  0000509c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ef0  08003ef0  0000509c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ef0  08003ef0  0000509c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef0  08003ef0  00004ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ef4  08003ef4  00004ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08003ef8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000009c  08003f94  0000509c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08003f94  000052fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c48  00000000  00000000  000050c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002786  00000000  00000000  00017d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00007bab  00000000  00000000  0001a492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  00022040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ddb  00000000  00000000  00022d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fe9b  00000000  00000000  00023b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130aa  00000000  00000000  000339ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00061b25  00000000  00000000  00046a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a857d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002510  00000000  00000000  000a85c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000aaad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c1c 	.word	0x08003c1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	08003c1c 	.word	0x08003c1c

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			@ (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}

		int x = Radius;
    int y = 0;
    int xChange = 1 - (Radius << 1);
    int yChange = 0;
    int radiusError = 0;
 800040a:	2600      	movs	r6, #0
{
 800040c:	b087      	sub	sp, #28
		int x = Radius;
 800040e:	0014      	movs	r4, r2
{
 8000410:	9303      	str	r3, [sp, #12]
    int xChange = 1 - (Radius << 1);
 8000412:	0053      	lsls	r3, r2, #1
 8000414:	2201      	movs	r2, #1
    int y = 0;
 8000416:	0035      	movs	r5, r6
    int xChange = 1 - (Radius << 1);
 8000418:	1ad3      	subs	r3, r2, r3
{
 800041a:	9001      	str	r0, [sp, #4]
 800041c:	9102      	str	r1, [sp, #8]
    int xChange = 1 - (Radius << 1);
 800041e:	9300      	str	r3, [sp, #0]

    while (x >= y)
 8000420:	006b      	lsls	r3, r5, #1
 8000422:	9305      	str	r3, [sp, #20]
    {
        for (int i = X - x; i <= X + x; i++)
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	1b1f      	subs	r7, r3, r4
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	191b      	adds	r3, r3, r4
 800042c:	42bb      	cmp	r3, r7
 800042e:	da16      	bge.n	800045e <ILI9341_Draw_Filled_Circle+0x56>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
            ILI9341_Draw_Pixel(i, Y - y,Colour);
        }
        for (int i = X - y; i <= X + y; i++)
 8000430:	9b01      	ldr	r3, [sp, #4]
 8000432:	1b5f      	subs	r7, r3, r5
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	195b      	adds	r3, r3, r5
 8000438:	429f      	cmp	r7, r3
 800043a:	dd24      	ble.n	8000486 <ILI9341_Draw_Filled_Circle+0x7e>
            ILI9341_Draw_Pixel(i, Y + x,Colour);
            ILI9341_Draw_Pixel(i, Y - x,Colour);
        }

        y++;
        radiusError += yChange;
 800043c:	9b05      	ldr	r3, [sp, #20]
        yChange += 2;
        if (((radiusError << 1) + xChange) > 0)
 800043e:	9a00      	ldr	r2, [sp, #0]
        radiusError += yChange;
 8000440:	18f6      	adds	r6, r6, r3
        if (((radiusError << 1) + xChange) > 0)
 8000442:	0073      	lsls	r3, r6, #1
 8000444:	189b      	adds	r3, r3, r2
        y++;
 8000446:	3501      	adds	r5, #1
        if (((radiusError << 1) + xChange) > 0)
 8000448:	2b00      	cmp	r3, #0
 800044a:	dd04      	ble.n	8000456 <ILI9341_Draw_Filled_Circle+0x4e>
        {
            x--;
            radiusError += xChange;
 800044c:	0013      	movs	r3, r2
            xChange += 2;
 800044e:	3302      	adds	r3, #2
            x--;
 8000450:	3c01      	subs	r4, #1
            radiusError += xChange;
 8000452:	18b6      	adds	r6, r6, r2
            xChange += 2;
 8000454:	9300      	str	r3, [sp, #0]
    while (x >= y)
 8000456:	42ac      	cmp	r4, r5
 8000458:	dae2      	bge.n	8000420 <ILI9341_Draw_Filled_Circle+0x18>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles
}
 800045a:	b007      	add	sp, #28
 800045c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 800045e:	b2bb      	uxth	r3, r7
 8000460:	9304      	str	r3, [sp, #16]
 8000462:	9b02      	ldr	r3, [sp, #8]
 8000464:	b2aa      	uxth	r2, r5
 8000466:	1899      	adds	r1, r3, r2
 8000468:	9804      	ldr	r0, [sp, #16]
 800046a:	9a03      	ldr	r2, [sp, #12]
 800046c:	b289      	uxth	r1, r1
 800046e:	f000 facf 	bl	8000a10 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8000472:	9b02      	ldr	r3, [sp, #8]
 8000474:	b2aa      	uxth	r2, r5
 8000476:	1a99      	subs	r1, r3, r2
 8000478:	9804      	ldr	r0, [sp, #16]
 800047a:	9a03      	ldr	r2, [sp, #12]
 800047c:	b289      	uxth	r1, r1
 800047e:	f000 fac7 	bl	8000a10 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000482:	3701      	adds	r7, #1
 8000484:	e7d0      	b.n	8000428 <ILI9341_Draw_Filled_Circle+0x20>
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8000486:	9a02      	ldr	r2, [sp, #8]
 8000488:	b2bb      	uxth	r3, r7
 800048a:	9304      	str	r3, [sp, #16]
 800048c:	b2a3      	uxth	r3, r4
 800048e:	1899      	adds	r1, r3, r2
 8000490:	9804      	ldr	r0, [sp, #16]
 8000492:	9a03      	ldr	r2, [sp, #12]
 8000494:	b289      	uxth	r1, r1
 8000496:	f000 fabb 	bl	8000a10 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800049a:	9b02      	ldr	r3, [sp, #8]
 800049c:	b2a2      	uxth	r2, r4
 800049e:	1a99      	subs	r1, r3, r2
 80004a0:	9804      	ldr	r0, [sp, #16]
 80004a2:	9a03      	ldr	r2, [sp, #12]
 80004a4:	b289      	uxth	r1, r1
 80004a6:	f000 fab3 	bl	8000a10 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80004aa:	3701      	adds	r7, #1
 80004ac:	e7c2      	b.n	8000434 <ILI9341_Draw_Filled_Circle+0x2c>

080004ae <ILI9341_Draw_Filled_Rectangle_Coord>:

}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80004ae:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 80004b0:	001e      	movs	r6, r3
 80004b2:	ab06      	add	r3, sp, #24
 80004b4:	881f      	ldrh	r7, [r3, #0]
 80004b6:	0014      	movs	r4, r2

	Calc_Negative = X1 - X0;
	if(Calc_Negative < 0) Negative_X = 1;
	Calc_Negative = 0;

	Calc_Negative = Y1 - Y0;
 80004b8:	1a73      	subs	r3, r6, r1
	if(Calc_Negative < 0) Negative_Y = 1;


	//DRAW HORIZONTAL!
	if(!Negative_X)
 80004ba:	4282      	cmp	r2, r0
 80004bc:	db08      	blt.n	80004d0 <ILI9341_Draw_Filled_Rectangle_Coord+0x22>
	{
		X_length = X1 - X0;
 80004be:	1a14      	subs	r4, r2, r0
 80004c0:	b2a2      	uxth	r2, r4
		X_length = X0 - X1;
		X0_true = X1;
	}

	//DRAW VERTICAL!
	if(!Negative_Y)
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	db08      	blt.n	80004d8 <ILI9341_Draw_Filled_Rectangle_Coord+0x2a>
	{
		Y_length = Y1 - Y0;
 80004c6:	b29b      	uxth	r3, r3
	{
		Y_length = Y0 - Y1;
		Y0_true = Y1;
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 80004c8:	9700      	str	r7, [sp, #0]
 80004ca:	f000 fb49 	bl	8000b60 <ILI9341_Draw_Rectangle>
}
 80004ce:	bdd3      	pop	{r0, r1, r4, r6, r7, pc}
		X_length = X0 - X1;
 80004d0:	1a82      	subs	r2, r0, r2
 80004d2:	b292      	uxth	r2, r2
		X0_true = X1;
 80004d4:	0020      	movs	r0, r4
 80004d6:	e7f4      	b.n	80004c2 <ILI9341_Draw_Filled_Rectangle_Coord+0x14>
		Y_length = Y0 - Y1;
 80004d8:	1b89      	subs	r1, r1, r6
 80004da:	b28b      	uxth	r3, r1
		Y0_true = Y1;
 80004dc:	0031      	movs	r1, r6
 80004de:	e7f3      	b.n	80004c8 <ILI9341_Draw_Filled_Rectangle_Coord+0x1a>

080004e0 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	b089      	sub	sp, #36	@ 0x24
 80004e4:	9305      	str	r3, [sp, #20]
 80004e6:	ab0e      	add	r3, sp, #56	@ 0x38
 80004e8:	881c      	ldrh	r4, [r3, #0]
 80004ea:	ab0f      	add	r3, sp, #60	@ 0x3c
 80004ec:	881e      	ldrh	r6, [r3, #0]
 80004ee:	9103      	str	r1, [sp, #12]
 80004f0:	9204      	str	r2, [sp, #16]
		uint8_t 	function_char;
    uint8_t 	i,j;

		function_char = Character;

    if (function_char < ' ') {
 80004f2:	281f      	cmp	r0, #31
 80004f4:	d901      	bls.n	80004fa <ILI9341_Draw_Char+0x1a>
        Character = 0;
    } else {
        function_char -= 32;
 80004f6:	3820      	subs	r0, #32
 80004f8:	b2c0      	uxtb	r0, r0
		}

		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
		{
		temp[k] = font[function_char][k];
 80004fa:	2506      	movs	r5, #6
		}

    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80004fc:	2700      	movs	r7, #0
		temp[k] = font[function_char][k];
 80004fe:	4368      	muls	r0, r5
 8000500:	002a      	movs	r2, r5
 8000502:	491d      	ldr	r1, [pc, #116]	@ (8000578 <ILI9341_Draw_Char+0x98>)
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000504:	4365      	muls	r5, r4
		temp[k] = font[function_char][k];
 8000506:	1841      	adds	r1, r0, r1
 8000508:	a806      	add	r0, sp, #24
 800050a:	f003 fb7d 	bl	8003c08 <memcpy>
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800050e:	00e3      	lsls	r3, r4, #3
 8000510:	9600      	str	r6, [sp, #0]
 8000512:	9904      	ldr	r1, [sp, #16]
 8000514:	9803      	ldr	r0, [sp, #12]
 8000516:	b29b      	uxth	r3, r3
 8000518:	b2aa      	uxth	r2, r5
 800051a:	f000 fb21 	bl	8000b60 <ILI9341_Draw_Rectangle>
 800051e:	9e03      	ldr	r6, [sp, #12]
{
 8000520:	2500      	movs	r5, #0
 8000522:	9b04      	ldr	r3, [sp, #16]
 8000524:	9302      	str	r3, [sp, #8]
    for (j=0; j<CHAR_WIDTH; j++) {
        for (i=0; i<CHAR_HEIGHT; i++) {
            if (temp[j] & (1<<i)) {
 8000526:	ab06      	add	r3, sp, #24
 8000528:	5cfb      	ldrb	r3, [r7, r3]
 800052a:	2201      	movs	r2, #1
 800052c:	412b      	asrs	r3, r5
 800052e:	4213      	tst	r3, r2
 8000530:	d00a      	beq.n	8000548 <ILI9341_Draw_Char+0x68>
							if(Size == 1)
 8000532:	4294      	cmp	r4, r2
 8000534:	d116      	bne.n	8000564 <ILI9341_Draw_Char+0x84>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000536:	9b04      	ldr	r3, [sp, #16]
 8000538:	9a05      	ldr	r2, [sp, #20]
 800053a:	1959      	adds	r1, r3, r5
 800053c:	9b03      	ldr	r3, [sp, #12]
 800053e:	b289      	uxth	r1, r1
 8000540:	19d8      	adds	r0, r3, r7
 8000542:	b280      	uxth	r0, r0
 8000544:	f000 fa64 	bl	8000a10 <ILI9341_Draw_Pixel>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000548:	9b02      	ldr	r3, [sp, #8]
 800054a:	3501      	adds	r5, #1
 800054c:	18e3      	adds	r3, r4, r3
 800054e:	b29b      	uxth	r3, r3
 8000550:	9302      	str	r3, [sp, #8]
 8000552:	2d08      	cmp	r5, #8
 8000554:	d1e7      	bne.n	8000526 <ILI9341_Draw_Char+0x46>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000556:	1936      	adds	r6, r6, r4
 8000558:	3701      	adds	r7, #1
 800055a:	b2b6      	uxth	r6, r6
 800055c:	2f06      	cmp	r7, #6
 800055e:	d1df      	bne.n	8000520 <ILI9341_Draw_Char+0x40>
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
							}
            }
        }
    }
}
 8000560:	b009      	add	sp, #36	@ 0x24
 8000562:	bdf0      	pop	{r4, r5, r6, r7, pc}
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000564:	9b05      	ldr	r3, [sp, #20]
 8000566:	0022      	movs	r2, r4
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	0030      	movs	r0, r6
 800056c:	0023      	movs	r3, r4
 800056e:	9902      	ldr	r1, [sp, #8]
 8000570:	f000 faf6 	bl	8000b60 <ILI9341_Draw_Rectangle>
 8000574:	e7e8      	b.n	8000548 <ILI9341_Draw_Char+0x68>
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	08003c34 	.word	0x08003c34

0800057c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b087      	sub	sp, #28
 8000580:	9305      	str	r3, [sp, #20]
 8000582:	ab0c      	add	r3, sp, #48	@ 0x30
 8000584:	881e      	ldrh	r6, [r3, #0]
 8000586:	ab0d      	add	r3, sp, #52	@ 0x34
 8000588:	881f      	ldrh	r7, [r3, #0]
    while (*Text) {
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
        X += CHAR_WIDTH*Size;
 800058a:	2306      	movs	r3, #6
{
 800058c:	0005      	movs	r5, r0
 800058e:	000c      	movs	r4, r1
        X += CHAR_WIDTH*Size;
 8000590:	4373      	muls	r3, r6
 8000592:	b2db      	uxtb	r3, r3
{
 8000594:	9204      	str	r2, [sp, #16]
        X += CHAR_WIDTH*Size;
 8000596:	9303      	str	r3, [sp, #12]
    while (*Text) {
 8000598:	7828      	ldrb	r0, [r5, #0]
 800059a:	2800      	cmp	r0, #0
 800059c:	d101      	bne.n	80005a2 <ILI9341_Draw_Text+0x26>
    }
}
 800059e:	b007      	add	sp, #28
 80005a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80005a2:	0021      	movs	r1, r4
 80005a4:	9b05      	ldr	r3, [sp, #20]
 80005a6:	9a04      	ldr	r2, [sp, #16]
 80005a8:	9701      	str	r7, [sp, #4]
 80005aa:	9600      	str	r6, [sp, #0]
 80005ac:	f7ff ff98 	bl	80004e0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80005b0:	9b03      	ldr	r3, [sp, #12]
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80005b2:	3501      	adds	r5, #1
        X += CHAR_WIDTH*Size;
 80005b4:	191c      	adds	r4, r3, r4
 80005b6:	b2e4      	uxtb	r4, r4
 80005b8:	e7ee      	b.n	8000598 <ILI9341_Draw_Text+0x1c>

080005ba <ILI9341_SPI_Init>:
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{																					//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80005ba:	2090      	movs	r0, #144	@ 0x90
{																					//GPIO INIT
 80005bc:	b510      	push	{r4, lr}
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80005be:	2200      	movs	r2, #0
 80005c0:	2140      	movs	r1, #64	@ 0x40
 80005c2:	05c0      	lsls	r0, r0, #23
 80005c4:	f002 f9a2 	bl	800290c <HAL_GPIO_WritePin>
}
 80005c8:	bd10      	pop	{r4, pc}
	...

080005cc <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80005cc:	b507      	push	{r0, r1, r2, lr}
 80005ce:	466b      	mov	r3, sp
 80005d0:	1dd9      	adds	r1, r3, #7
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80005d2:	2301      	movs	r3, #1
{
 80005d4:	7008      	strb	r0, [r1, #0]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80005d6:	001a      	movs	r2, r3
 80005d8:	4801      	ldr	r0, [pc, #4]	@ (80005e0 <ILI9341_SPI_Send+0x14>)
 80005da:	f002 fdb1 	bl	8003140 <HAL_SPI_Transmit>
}
 80005de:	bd07      	pop	{r0, r1, r2, pc}
 80005e0:	20000250 	.word	0x20000250

080005e4 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80005e4:	b570      	push	{r4, r5, r6, lr}
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80005e6:	2590      	movs	r5, #144	@ 0x90
{
 80005e8:	0004      	movs	r4, r0
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80005ea:	05ed      	lsls	r5, r5, #23
 80005ec:	0028      	movs	r0, r5
 80005ee:	2200      	movs	r2, #0
 80005f0:	2140      	movs	r1, #64	@ 0x40
 80005f2:	f002 f98b 	bl	800290c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2102      	movs	r1, #2
 80005fa:	4806      	ldr	r0, [pc, #24]	@ (8000614 <ILI9341_Write_Command+0x30>)
 80005fc:	f002 f986 	bl	800290c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000600:	0020      	movs	r0, r4
 8000602:	f7ff ffe3 	bl	80005cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000606:	0028      	movs	r0, r5
 8000608:	2201      	movs	r2, #1
 800060a:	2140      	movs	r1, #64	@ 0x40
 800060c:	f002 f97e 	bl	800290c <HAL_GPIO_WritePin>
}
 8000610:	bd70      	pop	{r4, r5, r6, pc}
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	48000400 	.word	0x48000400

08000618 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000618:	b570      	push	{r4, r5, r6, lr}
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800061a:	2590      	movs	r5, #144	@ 0x90
{
 800061c:	0004      	movs	r4, r0
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800061e:	05ed      	lsls	r5, r5, #23
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2102      	movs	r1, #2
 8000624:	4808      	ldr	r0, [pc, #32]	@ (8000648 <ILI9341_Write_Data+0x30>)
 8000626:	f002 f971 	bl	800290c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800062a:	0028      	movs	r0, r5
 800062c:	2200      	movs	r2, #0
 800062e:	2140      	movs	r1, #64	@ 0x40
 8000630:	f002 f96c 	bl	800290c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);
 8000634:	0020      	movs	r0, r4
 8000636:	f7ff ffc9 	bl	80005cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800063a:	0028      	movs	r0, r5
 800063c:	2201      	movs	r2, #1
 800063e:	2140      	movs	r1, #64	@ 0x40
 8000640:	f002 f964 	bl	800290c <HAL_GPIO_WritePin>
}
 8000644:	bd70      	pop	{r4, r5, r6, pc}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	48000400 	.word	0x48000400

0800064c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064e:	0007      	movs	r7, r0
 8000650:	0016      	movs	r6, r2
 8000652:	000d      	movs	r5, r1
 8000654:	001c      	movs	r4, r3
ILI9341_Write_Command(0x2A);
 8000656:	202a      	movs	r0, #42	@ 0x2a
 8000658:	f7ff ffc4 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800065c:	0a38      	lsrs	r0, r7, #8
 800065e:	f7ff ffdb 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000662:	b2f8      	uxtb	r0, r7
 8000664:	f7ff ffd8 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000668:	0a30      	lsrs	r0, r6, #8
 800066a:	f7ff ffd5 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800066e:	b2f0      	uxtb	r0, r6
 8000670:	f7ff ffd2 	bl	8000618 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000674:	202b      	movs	r0, #43	@ 0x2b
 8000676:	f7ff ffb5 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800067a:	0a28      	lsrs	r0, r5, #8
 800067c:	f7ff ffcc 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000680:	b2e8      	uxtb	r0, r5
 8000682:	f7ff ffc9 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000686:	0a20      	lsrs	r0, r4, #8
 8000688:	f7ff ffc6 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800068c:	b2e0      	uxtb	r0, r4
 800068e:	f7ff ffc3 	bl	8000618 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000692:	202c      	movs	r0, #44	@ 0x2c
 8000694:	f7ff ffa6 	bl	80005e4 <ILI9341_Write_Command>
}
 8000698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800069a <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800069a:	b510      	push	{r4, lr}
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 800069c:	2490      	movs	r4, #144	@ 0x90
 800069e:	05e4      	lsls	r4, r4, #23
 80006a0:	2200      	movs	r2, #0
 80006a2:	2108      	movs	r1, #8
 80006a4:	0020      	movs	r0, r4
 80006a6:	f002 f931 	bl	800290c <HAL_GPIO_WritePin>
HAL_Delay(200);
 80006aa:	20c8      	movs	r0, #200	@ 0xc8
 80006ac:	f001 fe18 	bl	80022e0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2140      	movs	r1, #64	@ 0x40
 80006b4:	0020      	movs	r0, r4
 80006b6:	f002 f929 	bl	800290c <HAL_GPIO_WritePin>
HAL_Delay(200);
 80006ba:	20c8      	movs	r0, #200	@ 0xc8
 80006bc:	f001 fe10 	bl	80022e0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2108      	movs	r1, #8
 80006c4:	0020      	movs	r0, r4
 80006c6:	f002 f921 	bl	800290c <HAL_GPIO_WritePin>
}
 80006ca:	bd10      	pop	{r4, pc}

080006cc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 80006cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ce:	0004      	movs	r4, r0

uint8_t screen_rotation = Rotation;

ILI9341_Write_Command(0x36);
 80006d0:	2036      	movs	r0, #54	@ 0x36
 80006d2:	f7ff ff87 	bl	80005e4 <ILI9341_Write_Command>
HAL_Delay(1);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f001 fe02 	bl	80022e0 <HAL_Delay>

switch(screen_rotation)
 80006dc:	2c03      	cmp	r4, #3
 80006de:	d80e      	bhi.n	80006fe <ILI9341_Set_Rotation+0x32>
 80006e0:	0020      	movs	r0, r4
 80006e2:	26a0      	movs	r6, #160	@ 0xa0
 80006e4:	27f0      	movs	r7, #240	@ 0xf0
 80006e6:	4d0c      	ldr	r5, [pc, #48]	@ (8000718 <ILI9341_Set_Rotation+0x4c>)
 80006e8:	4c0c      	ldr	r4, [pc, #48]	@ (800071c <ILI9341_Set_Rotation+0x50>)
 80006ea:	0076      	lsls	r6, r6, #1
 80006ec:	f7ff fd0c 	bl	8000108 <__gnu_thumb1_case_uqi>
 80006f0:	110f0802 	.word	0x110f0802
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80006f4:	2048      	movs	r0, #72	@ 0x48
			ILI9341_Write_Data(0x20|0x08);
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80006f6:	f7ff ff8f 	bl	8000618 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80006fa:	802f      	strh	r7, [r5, #0]
			LCD_HEIGHT = 320;
 80006fc:	8026      	strh	r6, [r4, #0]
			break;
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
	}
}
 80006fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ILI9341_Write_Data(0x20|0x08);
 8000700:	2028      	movs	r0, #40	@ 0x28
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000702:	f7ff ff89 	bl	8000618 <ILI9341_Write_Data>
			LCD_HEIGHT = 240;
 8000706:	23f0      	movs	r3, #240	@ 0xf0
			LCD_WIDTH  = 320;
 8000708:	802e      	strh	r6, [r5, #0]
			LCD_HEIGHT = 240;
 800070a:	8023      	strh	r3, [r4, #0]
}
 800070c:	e7f7      	b.n	80006fe <ILI9341_Set_Rotation+0x32>
			ILI9341_Write_Data(0x80|0x08);
 800070e:	2088      	movs	r0, #136	@ 0x88
 8000710:	e7f1      	b.n	80006f6 <ILI9341_Set_Rotation+0x2a>
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000712:	20e8      	movs	r0, #232	@ 0xe8
 8000714:	e7f5      	b.n	8000702 <ILI9341_Set_Rotation+0x36>
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	20000000 	.word	0x20000000
 800071c:	20000002 	.word	0x20000002

08000720 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000720:	2090      	movs	r0, #144	@ 0x90
{
 8000722:	b510      	push	{r4, lr}
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2108      	movs	r1, #8
 8000728:	05c0      	lsls	r0, r0, #23
 800072a:	f002 f8ef 	bl	800290c <HAL_GPIO_WritePin>
}
 800072e:	bd10      	pop	{r4, pc}

08000730 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000730:	b510      	push	{r4, lr}

ILI9341_Enable();
 8000732:	f7ff fff5 	bl	8000720 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000736:	f7ff ff40 	bl	80005ba <ILI9341_SPI_Init>
ILI9341_Reset();
 800073a:	f7ff ffae 	bl	800069a <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff ff50 	bl	80005e4 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000744:	20fa      	movs	r0, #250	@ 0xfa
 8000746:	0080      	lsls	r0, r0, #2
 8000748:	f001 fdca 	bl	80022e0 <HAL_Delay>

//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800074c:	20cb      	movs	r0, #203	@ 0xcb
 800074e:	f7ff ff49 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000752:	2039      	movs	r0, #57	@ 0x39
 8000754:	f7ff ff60 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000758:	202c      	movs	r0, #44	@ 0x2c
 800075a:	f7ff ff5d 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ff5a 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000764:	2034      	movs	r0, #52	@ 0x34
 8000766:	f7ff ff57 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff ff54 	bl	8000618 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000770:	20cf      	movs	r0, #207	@ 0xcf
 8000772:	f7ff ff37 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff ff4e 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800077c:	20c1      	movs	r0, #193	@ 0xc1
 800077e:	f7ff ff4b 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000782:	2030      	movs	r0, #48	@ 0x30
 8000784:	f7ff ff48 	bl	8000618 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000788:	20e8      	movs	r0, #232	@ 0xe8
 800078a:	f7ff ff2b 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 800078e:	2085      	movs	r0, #133	@ 0x85
 8000790:	f7ff ff42 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000794:	2000      	movs	r0, #0
 8000796:	f7ff ff3f 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 800079a:	2078      	movs	r0, #120	@ 0x78
 800079c:	f7ff ff3c 	bl	8000618 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80007a0:	20ea      	movs	r0, #234	@ 0xea
 80007a2:	f7ff ff1f 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff ff36 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff ff33 	bl	8000618 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80007b2:	20ed      	movs	r0, #237	@ 0xed
 80007b4:	f7ff ff16 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80007b8:	2064      	movs	r0, #100	@ 0x64
 80007ba:	f7ff ff2d 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80007be:	2003      	movs	r0, #3
 80007c0:	f7ff ff2a 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80007c4:	2012      	movs	r0, #18
 80007c6:	f7ff ff27 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80007ca:	2081      	movs	r0, #129	@ 0x81
 80007cc:	f7ff ff24 	bl	8000618 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80007d0:	20f7      	movs	r0, #247	@ 0xf7
 80007d2:	f7ff ff07 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80007d6:	2020      	movs	r0, #32
 80007d8:	f7ff ff1e 	bl	8000618 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80007dc:	20c0      	movs	r0, #192	@ 0xc0
 80007de:	f7ff ff01 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80007e2:	2023      	movs	r0, #35	@ 0x23
 80007e4:	f7ff ff18 	bl	8000618 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80007e8:	20c1      	movs	r0, #193	@ 0xc1
 80007ea:	f7ff fefb 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80007ee:	2010      	movs	r0, #16
 80007f0:	f7ff ff12 	bl	8000618 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80007f4:	20c5      	movs	r0, #197	@ 0xc5
 80007f6:	f7ff fef5 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80007fa:	203e      	movs	r0, #62	@ 0x3e
 80007fc:	f7ff ff0c 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000800:	2028      	movs	r0, #40	@ 0x28
 8000802:	f7ff ff09 	bl	8000618 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000806:	20c7      	movs	r0, #199	@ 0xc7
 8000808:	f7ff feec 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800080c:	2086      	movs	r0, #134	@ 0x86
 800080e:	f7ff ff03 	bl	8000618 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000812:	2036      	movs	r0, #54	@ 0x36
 8000814:	f7ff fee6 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000818:	2048      	movs	r0, #72	@ 0x48
 800081a:	f7ff fefd 	bl	8000618 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800081e:	203a      	movs	r0, #58	@ 0x3a
 8000820:	f7ff fee0 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000824:	2055      	movs	r0, #85	@ 0x55
 8000826:	f7ff fef7 	bl	8000618 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800082a:	20b1      	movs	r0, #177	@ 0xb1
 800082c:	f7ff feda 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff fef1 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000836:	2018      	movs	r0, #24
 8000838:	f7ff feee 	bl	8000618 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800083c:	20b6      	movs	r0, #182	@ 0xb6
 800083e:	f7ff fed1 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000842:	2008      	movs	r0, #8
 8000844:	f7ff fee8 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000848:	2082      	movs	r0, #130	@ 0x82
 800084a:	f7ff fee5 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 800084e:	2027      	movs	r0, #39	@ 0x27
 8000850:	f7ff fee2 	bl	8000618 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000854:	20f2      	movs	r0, #242	@ 0xf2
 8000856:	f7ff fec5 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fedc 	bl	8000618 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000860:	2026      	movs	r0, #38	@ 0x26
 8000862:	f7ff febf 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff fed6 	bl	8000618 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800086c:	20e0      	movs	r0, #224	@ 0xe0
 800086e:	f7ff feb9 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000872:	200f      	movs	r0, #15
 8000874:	f7ff fed0 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000878:	2031      	movs	r0, #49	@ 0x31
 800087a:	f7ff fecd 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 800087e:	202b      	movs	r0, #43	@ 0x2b
 8000880:	f7ff feca 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000884:	200c      	movs	r0, #12
 8000886:	f7ff fec7 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800088a:	200e      	movs	r0, #14
 800088c:	f7ff fec4 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000890:	2008      	movs	r0, #8
 8000892:	f7ff fec1 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000896:	204e      	movs	r0, #78	@ 0x4e
 8000898:	f7ff febe 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800089c:	20f1      	movs	r0, #241	@ 0xf1
 800089e:	f7ff febb 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80008a2:	2037      	movs	r0, #55	@ 0x37
 80008a4:	f7ff feb8 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80008a8:	2007      	movs	r0, #7
 80008aa:	f7ff feb5 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80008ae:	2010      	movs	r0, #16
 80008b0:	f7ff feb2 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f7ff feaf 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80008ba:	200e      	movs	r0, #14
 80008bc:	f7ff feac 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80008c0:	2009      	movs	r0, #9
 80008c2:	f7ff fea9 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff fea6 	bl	8000618 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80008cc:	20e1      	movs	r0, #225	@ 0xe1
 80008ce:	f7ff fe89 	bl	80005e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff fea0 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80008d8:	200e      	movs	r0, #14
 80008da:	f7ff fe9d 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80008de:	2014      	movs	r0, #20
 80008e0:	f7ff fe9a 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f7ff fe97 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80008ea:	2011      	movs	r0, #17
 80008ec:	f7ff fe94 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80008f0:	2007      	movs	r0, #7
 80008f2:	f7ff fe91 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80008f6:	2031      	movs	r0, #49	@ 0x31
 80008f8:	f7ff fe8e 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80008fc:	20c1      	movs	r0, #193	@ 0xc1
 80008fe:	f7ff fe8b 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000902:	2048      	movs	r0, #72	@ 0x48
 8000904:	f7ff fe88 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000908:	2008      	movs	r0, #8
 800090a:	f7ff fe85 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800090e:	200f      	movs	r0, #15
 8000910:	f7ff fe82 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000914:	200c      	movs	r0, #12
 8000916:	f7ff fe7f 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800091a:	2031      	movs	r0, #49	@ 0x31
 800091c:	f7ff fe7c 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000920:	2036      	movs	r0, #54	@ 0x36
 8000922:	f7ff fe79 	bl	8000618 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000926:	200f      	movs	r0, #15
 8000928:	f7ff fe76 	bl	8000618 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800092c:	2011      	movs	r0, #17
 800092e:	f7ff fe59 	bl	80005e4 <ILI9341_Write_Command>
HAL_Delay(120);
 8000932:	2078      	movs	r0, #120	@ 0x78
 8000934:	f001 fcd4 	bl	80022e0 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000938:	2029      	movs	r0, #41	@ 0x29
 800093a:	f7ff fe53 	bl	80005e4 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff fec4 	bl	80006cc <ILI9341_Set_Rotation>
}
 8000944:	bd10      	pop	{r4, pc}
	...

08000948 <ILI9341_Draw_Colour_Burst>:
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
//SENDS COLOUR
uint32_t Buffer_Size = 0;
if((Size*2) < BURST_MAX_SIZE)
 8000948:	23fa      	movs	r3, #250	@ 0xfa
{
 800094a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800094c:	af00      	add	r7, sp, #0
 800094e:	000c      	movs	r4, r1
 8000950:	6078      	str	r0, [r7, #4]
if((Size*2) < BURST_MAX_SIZE)
 8000952:	004d      	lsls	r5, r1, #1
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	429d      	cmp	r5, r3
 8000958:	d300      	bcc.n	800095c <ILI9341_Draw_Colour_Burst+0x14>
{
	Buffer_Size = Size;
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800095a:	001c      	movs	r4, r3
}

HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	2102      	movs	r1, #2
 8000960:	481d      	ldr	r0, [pc, #116]	@ (80009d8 <ILI9341_Draw_Colour_Burst+0x90>)
 8000962:	f001 ffd3 	bl	800290c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000966:	2090      	movs	r0, #144	@ 0x90
 8000968:	2200      	movs	r2, #0
 800096a:	2140      	movs	r1, #64	@ 0x40
 800096c:	05c0      	lsls	r0, r0, #23
 800096e:	f001 ffcd 	bl	800290c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
unsigned char burst_buffer[Buffer_Size];
 8000972:	4669      	mov	r1, sp
unsigned char chifted = 	Colour>>8;;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	0a1a      	lsrs	r2, r3, #8
unsigned char burst_buffer[Buffer_Size];
 8000978:	1de3      	adds	r3, r4, #7
 800097a:	08db      	lsrs	r3, r3, #3
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	1acb      	subs	r3, r1, r3
 8000980:	469d      	mov	sp, r3
 8000982:	466e      	mov	r6, sp
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000984:	1b99      	subs	r1, r3, r6
 8000986:	428c      	cmp	r4, r1
 8000988:	d815      	bhi.n	80009b6 <ILI9341_Draw_Colour_Burst+0x6e>
		burst_buffer[j+1] = Colour;
	}

uint32_t Sending_Size = Size*2;
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800098a:	0021      	movs	r1, r4
 800098c:	0028      	movs	r0, r5
 800098e:	f7ff fc4b 	bl	8000228 <__aeabi_uidivmod>
 8000992:	6038      	str	r0, [r7, #0]
 8000994:	6079      	str	r1, [r7, #4]

if(Sending_in_Block != 0)
 8000996:	42a5      	cmp	r5, r4
 8000998:	d212      	bcs.n	80009c0 <ILI9341_Draw_Colour_Burst+0x78>
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 800099a:	0031      	movs	r1, r6
 800099c:	88ba      	ldrh	r2, [r7, #4]
 800099e:	230a      	movs	r3, #10
 80009a0:	480e      	ldr	r0, [pc, #56]	@ (80009dc <ILI9341_Draw_Colour_Burst+0x94>)
 80009a2:	f002 fbcd 	bl	8003140 <HAL_SPI_Transmit>

HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80009a6:	2090      	movs	r0, #144	@ 0x90
 80009a8:	2201      	movs	r2, #1
 80009aa:	2140      	movs	r1, #64	@ 0x40
 80009ac:	05c0      	lsls	r0, r0, #23
 80009ae:	f001 ffad 	bl	800290c <HAL_GPIO_WritePin>
}
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		burst_buffer[j+1] = Colour;
 80009b6:	6879      	ldr	r1, [r7, #4]
		burst_buffer[j] = 	chifted;
 80009b8:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80009ba:	7059      	strb	r1, [r3, #1]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80009bc:	3302      	adds	r3, #2
 80009be:	e7e1      	b.n	8000984 <ILI9341_Draw_Colour_Burst+0x3c>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80009c0:	2500      	movs	r5, #0
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	429d      	cmp	r5, r3
 80009c6:	d0e8      	beq.n	800099a <ILI9341_Draw_Colour_Burst+0x52>
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);
 80009c8:	230a      	movs	r3, #10
 80009ca:	0031      	movs	r1, r6
 80009cc:	4803      	ldr	r0, [pc, #12]	@ (80009dc <ILI9341_Draw_Colour_Burst+0x94>)
 80009ce:	b2a2      	uxth	r2, r4
 80009d0:	f002 fbb6 	bl	8003140 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80009d4:	3501      	adds	r5, #1
 80009d6:	e7f4      	b.n	80009c2 <ILI9341_Draw_Colour_Burst+0x7a>
 80009d8:	48000400 	.word	0x48000400
 80009dc:	20000250 	.word	0x20000250

080009e0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 80009e0:	2100      	movs	r1, #0
{
 80009e2:	b570      	push	{r4, r5, r6, lr}
 80009e4:	0004      	movs	r4, r0
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 80009e6:	4d08      	ldr	r5, [pc, #32]	@ (8000a08 <ILI9341_Fill_Screen+0x28>)
 80009e8:	4e08      	ldr	r6, [pc, #32]	@ (8000a0c <ILI9341_Fill_Screen+0x2c>)
 80009ea:	882a      	ldrh	r2, [r5, #0]
 80009ec:	8833      	ldrh	r3, [r6, #0]
 80009ee:	0008      	movs	r0, r1
 80009f0:	b292      	uxth	r2, r2
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	f7ff fe2a 	bl	800064c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);
 80009f8:	882b      	ldrh	r3, [r5, #0]
 80009fa:	8831      	ldrh	r1, [r6, #0]
 80009fc:	0020      	movs	r0, r4
 80009fe:	4359      	muls	r1, r3
 8000a00:	f7ff ffa2 	bl	8000948 <ILI9341_Draw_Colour_Burst>
}
 8000a04:	bd70      	pop	{r4, r5, r6, pc}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000002 	.word	0x20000002

08000a10 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour)
{
 8000a10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000a12:	4b4f      	ldr	r3, [pc, #316]	@ (8000b50 <ILI9341_Draw_Pixel+0x140>)
{
 8000a14:	0005      	movs	r5, r0
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000a16:	881b      	ldrh	r3, [r3, #0]
{
 8000a18:	000c      	movs	r4, r1
 8000a1a:	0016      	movs	r6, r2
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000a1c:	4283      	cmp	r3, r0
 8000a1e:	d800      	bhi.n	8000a22 <ILI9341_Draw_Pixel+0x12>
 8000a20:	e094      	b.n	8000b4c <ILI9341_Draw_Pixel+0x13c>
 8000a22:	4b4c      	ldr	r3, [pc, #304]	@ (8000b54 <ILI9341_Draw_Pixel+0x144>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d800      	bhi.n	8000a2c <ILI9341_Draw_Pixel+0x1c>
 8000a2a:	e08f      	b.n	8000b4c <ILI9341_Draw_Pixel+0x13c>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2102      	movs	r1, #2
 8000a30:	4849      	ldr	r0, [pc, #292]	@ (8000b58 <ILI9341_Draw_Pixel+0x148>)
 8000a32:	f001 ff6b 	bl	800290c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a36:	2090      	movs	r0, #144	@ 0x90
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2140      	movs	r1, #64	@ 0x40
 8000a3c:	05c0      	lsls	r0, r0, #23
 8000a3e:	f001 ff65 	bl	800290c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000a42:	202a      	movs	r0, #42	@ 0x2a
 8000a44:	f7ff fdc2 	bl	80005cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	4842      	ldr	r0, [pc, #264]	@ (8000b58 <ILI9341_Draw_Pixel+0x148>)
 8000a4e:	f001 ff5d 	bl	800290c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a52:	2090      	movs	r0, #144	@ 0x90
 8000a54:	2201      	movs	r2, #1
 8000a56:	2140      	movs	r1, #64	@ 0x40
 8000a58:	05c0      	lsls	r0, r0, #23
 8000a5a:	f001 ff57 	bl	800290c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a5e:	2090      	movs	r0, #144	@ 0x90
 8000a60:	2200      	movs	r2, #0
 8000a62:	2140      	movs	r1, #64	@ 0x40
 8000a64:	05c0      	lsls	r0, r0, #23
 8000a66:	f001 ff51 	bl	800290c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000a6a:	a902      	add	r1, sp, #8
 8000a6c:	ba6b      	rev16	r3, r5
 8000a6e:	3501      	adds	r5, #1
 8000a70:	800b      	strh	r3, [r1, #0]
 8000a72:	70cd      	strb	r5, [r1, #3]
 8000a74:	122b      	asrs	r3, r5, #8
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000a76:	4d39      	ldr	r5, [pc, #228]	@ (8000b5c <ILI9341_Draw_Pixel+0x14c>)
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000a78:	708b      	strb	r3, [r1, #2]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	0028      	movs	r0, r5
 8000a80:	f002 fb5e 	bl	8003140 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a84:	2090      	movs	r0, #144	@ 0x90
 8000a86:	2201      	movs	r2, #1
 8000a88:	2140      	movs	r1, #64	@ 0x40
 8000a8a:	05c0      	lsls	r0, r0, #23
 8000a8c:	f001 ff3e 	bl	800290c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2102      	movs	r1, #2
 8000a94:	4830      	ldr	r0, [pc, #192]	@ (8000b58 <ILI9341_Draw_Pixel+0x148>)
 8000a96:	f001 ff39 	bl	800290c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a9a:	2090      	movs	r0, #144	@ 0x90
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2140      	movs	r1, #64	@ 0x40
 8000aa0:	05c0      	lsls	r0, r0, #23
 8000aa2:	f001 ff33 	bl	800290c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000aa6:	202b      	movs	r0, #43	@ 0x2b
 8000aa8:	f7ff fd90 	bl	80005cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2102      	movs	r1, #2
 8000ab0:	4829      	ldr	r0, [pc, #164]	@ (8000b58 <ILI9341_Draw_Pixel+0x148>)
 8000ab2:	f001 ff2b 	bl	800290c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000ab6:	2090      	movs	r0, #144	@ 0x90
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2140      	movs	r1, #64	@ 0x40
 8000abc:	05c0      	lsls	r0, r0, #23
 8000abe:	f001 ff25 	bl	800290c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ac2:	2090      	movs	r0, #144	@ 0x90
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2140      	movs	r1, #64	@ 0x40
 8000ac8:	05c0      	lsls	r0, r0, #23
 8000aca:	f001 ff1f 	bl	800290c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000ace:	a903      	add	r1, sp, #12
 8000ad0:	ba63      	rev16	r3, r4
 8000ad2:	3401      	adds	r4, #1
 8000ad4:	800b      	strh	r3, [r1, #0]
 8000ad6:	1223      	asrs	r3, r4, #8
 8000ad8:	708b      	strb	r3, [r1, #2]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000ada:	2204      	movs	r2, #4
 8000adc:	2301      	movs	r3, #1
 8000ade:	0028      	movs	r0, r5
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000ae0:	70cc      	strb	r4, [r1, #3]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000ae2:	f002 fb2d 	bl	8003140 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000ae6:	2090      	movs	r0, #144	@ 0x90
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2140      	movs	r1, #64	@ 0x40
 8000aec:	05c0      	lsls	r0, r0, #23
 8000aee:	f001 ff0d 	bl	800290c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2102      	movs	r1, #2
 8000af6:	4818      	ldr	r0, [pc, #96]	@ (8000b58 <ILI9341_Draw_Pixel+0x148>)
 8000af8:	f001 ff08 	bl	800290c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000afc:	2090      	movs	r0, #144	@ 0x90
 8000afe:	2200      	movs	r2, #0
 8000b00:	2140      	movs	r1, #64	@ 0x40
 8000b02:	05c0      	lsls	r0, r0, #23
 8000b04:	f001 ff02 	bl	800290c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000b08:	202c      	movs	r0, #44	@ 0x2c
 8000b0a:	f7ff fd5f 	bl	80005cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2102      	movs	r1, #2
 8000b12:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <ILI9341_Draw_Pixel+0x148>)
 8000b14:	f001 fefa 	bl	800290c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000b18:	2090      	movs	r0, #144	@ 0x90
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2140      	movs	r1, #64	@ 0x40
 8000b1e:	05c0      	lsls	r0, r0, #23
 8000b20:	f001 fef4 	bl	800290c <HAL_GPIO_WritePin>

//COLOUR
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b24:	2090      	movs	r0, #144	@ 0x90
 8000b26:	2200      	movs	r2, #0
 8000b28:	2140      	movs	r1, #64	@ 0x40
 8000b2a:	05c0      	lsls	r0, r0, #23
 8000b2c:	f001 feee 	bl	800290c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000b30:	ba76      	rev16	r6, r6
 8000b32:	a901      	add	r1, sp, #4
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000b34:	2202      	movs	r2, #2
 8000b36:	2301      	movs	r3, #1
 8000b38:	0028      	movs	r0, r5
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000b3a:	800e      	strh	r6, [r1, #0]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000b3c:	f002 fb00 	bl	8003140 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000b40:	2090      	movs	r0, #144	@ 0x90
 8000b42:	2201      	movs	r2, #1
 8000b44:	2140      	movs	r1, #64	@ 0x40
 8000b46:	05c0      	lsls	r0, r0, #23
 8000b48:	f001 fee0 	bl	800290c <HAL_GPIO_WritePin>

}
 8000b4c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000002 	.word	0x20000002
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	20000250 	.word	0x20000250

08000b60 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b62:	001d      	movs	r5, r3
 8000b64:	ab08      	add	r3, sp, #32
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	0014      	movs	r4, r2
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <ILI9341_Draw_Rectangle+0x54>)
{
 8000b6c:	9301      	str	r3, [sp, #4]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000b6e:	8813      	ldrh	r3, [r2, #0]
 8000b70:	4283      	cmp	r3, r0
 8000b72:	d91e      	bls.n	8000bb2 <ILI9341_Draw_Rectangle+0x52>
 8000b74:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <ILI9341_Draw_Rectangle+0x58>)
 8000b76:	881f      	ldrh	r7, [r3, #0]
 8000b78:	428f      	cmp	r7, r1
 8000b7a:	d91a      	bls.n	8000bb2 <ILI9341_Draw_Rectangle+0x52>
if((X+Width-1)>=LCD_WIDTH)
 8000b7c:	8817      	ldrh	r7, [r2, #0]
 8000b7e:	1906      	adds	r6, r0, r4
 8000b80:	42be      	cmp	r6, r7
 8000b82:	dd02      	ble.n	8000b8a <ILI9341_Draw_Rectangle+0x2a>
	{
		Width=LCD_WIDTH-X;
 8000b84:	8814      	ldrh	r4, [r2, #0]
 8000b86:	1a24      	subs	r4, r4, r0
 8000b88:	b2a4      	uxth	r4, r4
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8000b8a:	881a      	ldrh	r2, [r3, #0]
 8000b8c:	194f      	adds	r7, r1, r5
 8000b8e:	4297      	cmp	r7, r2
 8000b90:	dd02      	ble.n	8000b98 <ILI9341_Draw_Rectangle+0x38>
	{
		Height=LCD_HEIGHT-Y;
 8000b92:	881d      	ldrh	r5, [r3, #0]
 8000b94:	1a6d      	subs	r5, r5, r1
 8000b96:	b2ad      	uxth	r5, r5
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000b98:	1e4b      	subs	r3, r1, #1
 8000b9a:	1e42      	subs	r2, r0, #1
 8000b9c:	18eb      	adds	r3, r5, r3
 8000b9e:	18a2      	adds	r2, r4, r2
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	b292      	uxth	r2, r2
 8000ba4:	f7ff fd52 	bl	800064c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000ba8:	0021      	movs	r1, r4
 8000baa:	9801      	ldr	r0, [sp, #4]
 8000bac:	4369      	muls	r1, r5
 8000bae:	f7ff fecb 	bl	8000948 <ILI9341_Draw_Colour_Burst>
}
 8000bb2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000002 	.word	0x20000002

08000bbc <draw_battery>:
	  }
	  prev_battery_level = new_battery_level;
}

void draw_battery(){
	ILI9341_Draw_Filled_Rectangle_Coord(250, 20, 275, 30, WHITE);
 8000bbc:	2214      	movs	r2, #20
void draw_battery(){
 8000bbe:	b513      	push	{r0, r1, r4, lr}
	ILI9341_Draw_Filled_Rectangle_Coord(250, 20, 275, 30, WHITE);
 8000bc0:	4c1c      	ldr	r4, [pc, #112]	@ (8000c34 <draw_battery+0x78>)
 8000bc2:	231e      	movs	r3, #30
 8000bc4:	2114      	movs	r1, #20
 8000bc6:	20fa      	movs	r0, #250	@ 0xfa
 8000bc8:	32ff      	adds	r2, #255	@ 0xff
 8000bca:	9400      	str	r4, [sp, #0]
 8000bcc:	f7ff fc6f 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(275, 23, 278, 28, WHITE);
 8000bd0:	228b      	movs	r2, #139	@ 0x8b
 8000bd2:	2014      	movs	r0, #20
 8000bd4:	231c      	movs	r3, #28
 8000bd6:	2117      	movs	r1, #23
 8000bd8:	9400      	str	r4, [sp, #0]
 8000bda:	0052      	lsls	r2, r2, #1
 8000bdc:	30ff      	adds	r0, #255	@ 0xff
 8000bde:	f7ff fc66 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>

	if(new_battery_level == 0){
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <draw_battery+0x7c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d106      	bne.n	8000bf8 <draw_battery+0x3c>
	  ILI9341_Draw_Filled_Rectangle_Coord(252, 22, 273, 28, BLACK);
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	331c      	adds	r3, #28
	}
	else if(new_battery_level == 2){
	  ILI9341_Draw_Filled_Rectangle_Coord(266, 22, 273, 28, BLACK);
	}
	else{
	  ILI9341_Draw_Filled_Rectangle_Coord(252, 22, 273, 28, GREEN);
 8000bee:	2212      	movs	r2, #18
 8000bf0:	2116      	movs	r1, #22
 8000bf2:	20fc      	movs	r0, #252	@ 0xfc
 8000bf4:	32ff      	adds	r2, #255	@ 0xff
 8000bf6:	e009      	b.n	8000c0c <draw_battery+0x50>
	else if(new_battery_level == 1){
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d10a      	bne.n	8000c12 <draw_battery+0x56>
	  ILI9341_Draw_Filled_Rectangle_Coord(259, 22, 273, 28, BLACK);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	2212      	movs	r2, #18
 8000c00:	2004      	movs	r0, #4
 8000c02:	2116      	movs	r1, #22
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	32ff      	adds	r2, #255	@ 0xff
 8000c08:	331c      	adds	r3, #28
 8000c0a:	30ff      	adds	r0, #255	@ 0xff
	  ILI9341_Draw_Filled_Rectangle_Coord(252, 22, 273, 28, GREEN);
 8000c0c:	f7ff fc4f 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	}
	}
 8000c10:	bd13      	pop	{r0, r1, r4, pc}
	else if(new_battery_level == 2){
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d108      	bne.n	8000c28 <draw_battery+0x6c>
	  ILI9341_Draw_Filled_Rectangle_Coord(266, 22, 273, 28, BLACK);
 8000c16:	2300      	movs	r3, #0
 8000c18:	2212      	movs	r2, #18
 8000c1a:	2085      	movs	r0, #133	@ 0x85
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2116      	movs	r1, #22
 8000c20:	331c      	adds	r3, #28
 8000c22:	32ff      	adds	r2, #255	@ 0xff
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	e7f1      	b.n	8000c0c <draw_battery+0x50>
	  ILI9341_Draw_Filled_Rectangle_Coord(252, 22, 273, 28, GREEN);
 8000c28:	23fc      	movs	r3, #252	@ 0xfc
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	231c      	movs	r3, #28
 8000c30:	e7dd      	b.n	8000bee <draw_battery+0x32>
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	0000ffff 	.word	0x0000ffff
 8000c38:	200000b8 	.word	0x200000b8

08000c3c <process_battery>:
void process_battery(){
 8000c3c:	b570      	push	{r4, r5, r6, lr}
	  HAL_ADC_Start(&hadc);
 8000c3e:	4c1a      	ldr	r4, [pc, #104]	@ (8000ca8 <process_battery+0x6c>)
 8000c40:	0020      	movs	r0, r4
 8000c42:	f001 fc51 	bl	80024e8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000c46:	2101      	movs	r1, #1
 8000c48:	0020      	movs	r0, r4
 8000c4a:	4249      	negs	r1, r1
 8000c4c:	f001 fc78 	bl	8002540 <HAL_ADC_PollForConversion>
	  uint16_t battery_value = HAL_ADC_GetValue(&hadc);
 8000c50:	0020      	movs	r0, r4
 8000c52:	f001 fcd9 	bl	8002608 <HAL_ADC_GetValue>
	  new_battery_level = 0;
 8000c56:	2200      	movs	r2, #0
		  if (battery_value > battery_thresholds[i]) new_battery_level++;
 8000c58:	4914      	ldr	r1, [pc, #80]	@ (8000cac <process_battery+0x70>)
	  new_battery_level = 0;
 8000c5a:	4c15      	ldr	r4, [pc, #84]	@ (8000cb0 <process_battery+0x74>)
		  if (battery_value > battery_thresholds[i]) new_battery_level++;
 8000c5c:	880d      	ldrh	r5, [r1, #0]
	  uint16_t battery_value = HAL_ADC_GetValue(&hadc);
 8000c5e:	b280      	uxth	r0, r0
		  if (battery_value > battery_thresholds[i]) new_battery_level++;
 8000c60:	0013      	movs	r3, r2
	  new_battery_level = 0;
 8000c62:	7022      	strb	r2, [r4, #0]
		  if (battery_value > battery_thresholds[i]) new_battery_level++;
 8000c64:	4285      	cmp	r5, r0
 8000c66:	d201      	bcs.n	8000c6c <process_battery+0x30>
 8000c68:	3201      	adds	r2, #1
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	884d      	ldrh	r5, [r1, #2]
 8000c6e:	4285      	cmp	r5, r0
 8000c70:	d202      	bcs.n	8000c78 <process_battery+0x3c>
 8000c72:	2201      	movs	r2, #1
 8000c74:	3301      	adds	r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	8889      	ldrh	r1, [r1, #4]
 8000c7a:	4281      	cmp	r1, r0
 8000c7c:	d203      	bcs.n	8000c86 <process_battery+0x4a>
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b2db      	uxtb	r3, r3
	  for(uint8_t i = 0; i < 3; i++){
 8000c82:	7023      	strb	r3, [r4, #0]
 8000c84:	e001      	b.n	8000c8a <process_battery+0x4e>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d1fb      	bne.n	8000c82 <process_battery+0x46>
	  if(prev_battery_level != new_battery_level && current_main_state == WATCH){ // WATCH MODE
 8000c8a:	4d0a      	ldr	r5, [pc, #40]	@ (8000cb4 <process_battery+0x78>)
 8000c8c:	7823      	ldrb	r3, [r4, #0]
 8000c8e:	782a      	ldrb	r2, [r5, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d005      	beq.n	8000ca0 <process_battery+0x64>
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <process_battery+0x7c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <process_battery+0x64>
		  draw_battery();
 8000c9c:	f7ff ff8e 	bl	8000bbc <draw_battery>
	  prev_battery_level = new_battery_level;
 8000ca0:	7823      	ldrb	r3, [r4, #0]
 8000ca2:	702b      	strb	r3, [r5, #0]
}
 8000ca4:	bd70      	pop	{r4, r5, r6, pc}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	200002b4 	.word	0x200002b4
 8000cac:	20000088 	.word	0x20000088
 8000cb0:	200000b8 	.word	0x200000b8
 8000cb4:	200000b9 	.word	0x200000b9
 8000cb8:	200000cf 	.word	0x200000cf

08000cbc <draw_hp>:

void draw_hp(){
 8000cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ILI9341_Draw_Text("HP", 5, 2 , BLACK, 2, BLUE);
 8000cbe:	2402      	movs	r4, #2
 8000cc0:	251f      	movs	r5, #31
 8000cc2:	0022      	movs	r2, r4
 8000cc4:	9501      	str	r5, [sp, #4]
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	2105      	movs	r1, #5
 8000cca:	4808      	ldr	r0, [pc, #32]	@ (8000cec <draw_hp+0x30>)
 8000ccc:	9400      	str	r4, [sp, #0]
 8000cce:	f7ff fc55 	bl	800057c <ILI9341_Draw_Text>
	char hp_c = hp + '0';
 8000cd2:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <draw_hp+0x34>)
	ILI9341_Draw_Char(hp_c, 40, 2, BLACK, 2, BLUE);
 8000cd4:	0022      	movs	r2, r4
	char hp_c = hp + '0';
 8000cd6:	7818      	ldrb	r0, [r3, #0]
	ILI9341_Draw_Char(hp_c, 40, 2, BLACK, 2, BLUE);
 8000cd8:	2128      	movs	r1, #40	@ 0x28
	char hp_c = hp + '0';
 8000cda:	3030      	adds	r0, #48	@ 0x30
	ILI9341_Draw_Char(hp_c, 40, 2, BLACK, 2, BLUE);
 8000cdc:	9501      	str	r5, [sp, #4]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	b2c0      	uxtb	r0, r0
 8000ce2:	9400      	str	r4, [sp, #0]
 8000ce4:	f7ff fbfc 	bl	80004e0 <ILI9341_Draw_Char>
}
 8000ce8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	08003e74 	.word	0x08003e74
 8000cf0:	200000be 	.word	0x200000be

08000cf4 <draw_score>:

void draw_score(uint8_t x, uint8_t y){
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	0007      	movs	r7, r0
	ILI9341_Draw_Text("SCORE", x, y, BLACK, 2, BLUE);
 8000cf8:	261f      	movs	r6, #31
 8000cfa:	2502      	movs	r5, #2
void draw_score(uint8_t x, uint8_t y){
 8000cfc:	b087      	sub	sp, #28
	ILI9341_Draw_Text("SCORE", x, y, BLACK, 2, BLUE);
 8000cfe:	000a      	movs	r2, r1
void draw_score(uint8_t x, uint8_t y){
 8000d00:	9103      	str	r1, [sp, #12]
	ILI9341_Draw_Text("SCORE", x, y, BLACK, 2, BLUE);
 8000d02:	2300      	movs	r3, #0
 8000d04:	0039      	movs	r1, r7
 8000d06:	4812      	ldr	r0, [pc, #72]	@ (8000d50 <draw_score+0x5c>)
 8000d08:	9601      	str	r6, [sp, #4]
 8000d0a:	9500      	str	r5, [sp, #0]
 8000d0c:	f7ff fc36 	bl	800057c <ILI9341_Draw_Text>
	char score_c[5];
	score_c[3] = '0';
	score_c[2] = '0';
	score_c[1] = score % 10 + '0';
 8000d10:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <draw_score+0x60>)
 8000d12:	210a      	movs	r1, #10
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	ac04      	add	r4, sp, #16
 8000d18:	0018      	movs	r0, r3
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	f7ff fa84 	bl	8000228 <__aeabi_uidivmod>
 8000d20:	3130      	adds	r1, #48	@ 0x30
	score_c[0] = score / 10 + '0';
 8000d22:	9802      	ldr	r0, [sp, #8]
	score_c[1] = score % 10 + '0';
 8000d24:	7061      	strb	r1, [r4, #1]
	score_c[0] = score / 10 + '0';
 8000d26:	210a      	movs	r1, #10
 8000d28:	f7ff f9f8 	bl	800011c <__udivsi3>
	score_c[2] = '0';
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <draw_score+0x64>)
	score_c[4] = 0;
	ILI9341_Draw_Text(score_c, x+65, y , BLACK, 2, BLUE);
 8000d2e:	0039      	movs	r1, r7
	score_c[2] = '0';
 8000d30:	8063      	strh	r3, [r4, #2]
	score_c[4] = 0;
 8000d32:	2300      	movs	r3, #0
	score_c[0] = score / 10 + '0';
 8000d34:	3030      	adds	r0, #48	@ 0x30
	ILI9341_Draw_Text(score_c, x+65, y , BLACK, 2, BLUE);
 8000d36:	3141      	adds	r1, #65	@ 0x41
	score_c[0] = score / 10 + '0';
 8000d38:	7020      	strb	r0, [r4, #0]
	score_c[4] = 0;
 8000d3a:	7123      	strb	r3, [r4, #4]
	ILI9341_Draw_Text(score_c, x+65, y , BLACK, 2, BLUE);
 8000d3c:	0020      	movs	r0, r4
 8000d3e:	9a03      	ldr	r2, [sp, #12]
 8000d40:	b2c9      	uxtb	r1, r1
 8000d42:	9601      	str	r6, [sp, #4]
 8000d44:	9500      	str	r5, [sp, #0]
 8000d46:	f7ff fc19 	bl	800057c <ILI9341_Draw_Text>
}
 8000d4a:	b007      	add	sp, #28
 8000d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	08003e77 	.word	0x08003e77
 8000d54:	200000bc 	.word	0x200000bc
 8000d58:	00003030 	.word	0x00003030

08000d5c <copy_level>:


void copy_level(int level){
 8000d5c:	0001      	movs	r1, r0
	for(uint8_t i = 0; i < N_ROWS * N_COLS; i++)
	{
		current_block_states[i] = block_states[level][i];
 8000d5e:	2214      	movs	r2, #20
void copy_level(int level){
 8000d60:	b510      	push	{r4, lr}
		current_block_states[i] = block_states[level][i];
 8000d62:	4351      	muls	r1, r2
 8000d64:	4b02      	ldr	r3, [pc, #8]	@ (8000d70 <copy_level+0x14>)
 8000d66:	4803      	ldr	r0, [pc, #12]	@ (8000d74 <copy_level+0x18>)
 8000d68:	18c9      	adds	r1, r1, r3
 8000d6a:	f002 ff4d 	bl	8003c08 <memcpy>
	}
}
 8000d6e:	bd10      	pop	{r4, pc}
 8000d70:	2000004c 	.word	0x2000004c
 8000d74:	200000d4 	.word	0x200000d4

08000d78 <draw_block>:


void draw_block(int index, bool draw){
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	000f      	movs	r7, r1
 8000d7c:	b087      	sub	sp, #28
	volatile uint8_t position_x, position_y;
	uint8_t row_i = index / N_COLS;
 8000d7e:	2105      	movs	r1, #5
void draw_block(int index, bool draw){
 8000d80:	0005      	movs	r5, r0
	uint8_t row_i = index / N_COLS;
 8000d82:	f7ff fa55 	bl	8000230 <__divsi3>
	position_x= (index % N_COLS) * COLUMN_WIDTH + LEFT_COLUMN;
 8000d86:	2105      	movs	r1, #5
	uint8_t row_i = index / N_COLS;
 8000d88:	0004      	movs	r4, r0
	position_x= (index % N_COLS) * COLUMN_WIDTH + LEFT_COLUMN;
 8000d8a:	0028      	movs	r0, r5
 8000d8c:	f7ff fb36 	bl	80003fc <__aeabi_idivmod>
 8000d90:	232c      	movs	r3, #44	@ 0x2c
 8000d92:	260e      	movs	r6, #14
 8000d94:	434b      	muls	r3, r1
 8000d96:	aa02      	add	r2, sp, #8
 8000d98:	330a      	adds	r3, #10
 8000d9a:	18b6      	adds	r6, r6, r2
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	7033      	strb	r3, [r6, #0]
	position_y = (index / N_COLS) * ROW_HEIGHT + TOP_ROW;
 8000da0:	2314      	movs	r3, #20
 8000da2:	250f      	movs	r5, #15
 8000da4:	4363      	muls	r3, r4
 8000da6:	333c      	adds	r3, #60	@ 0x3c
 8000da8:	18ad      	adds	r5, r5, r2
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	702b      	strb	r3, [r5, #0]

	ILI9341_Draw_Filled_Rectangle_Coord(position_x, position_y,
 8000dae:	7830      	ldrb	r0, [r6, #0]
 8000db0:	7829      	ldrb	r1, [r5, #0]
 8000db2:	7832      	ldrb	r2, [r6, #0]
 8000db4:	782b      	ldrb	r3, [r5, #0]
 8000db6:	b2c0      	uxtb	r0, r0
 8000db8:	3314      	adds	r3, #20
 8000dba:	9303      	str	r3, [sp, #12]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	b2c9      	uxtb	r1, r1
 8000dc0:	469c      	mov	ip, r3
 8000dc2:	322c      	adds	r2, #44	@ 0x2c
 8000dc4:	429f      	cmp	r7, r3
 8000dc6:	d001      	beq.n	8000dcc <draw_block+0x54>
 8000dc8:	331f      	adds	r3, #31
 8000dca:	469c      	mov	ip, r3
 8000dcc:	4663      	mov	r3, ip
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	9b03      	ldr	r3, [sp, #12]
 8000dd2:	f7ff fb6c 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
			position_x + COLUMN_WIDTH, position_y + ROW_HEIGHT, (!draw) ? BLACK : BLUE);

	ILI9341_Draw_Filled_Rectangle_Coord(position_x + PLATFORM_LINE_THICKNESS, position_y + PLATFORM_LINE_THICKNESS,
 8000dd6:	7830      	ldrb	r0, [r6, #0]
 8000dd8:	7829      	ldrb	r1, [r5, #0]
 8000dda:	7832      	ldrb	r2, [r6, #0]
 8000ddc:	782b      	ldrb	r3, [r5, #0]
 8000dde:	3001      	adds	r0, #1
 8000de0:	251f      	movs	r5, #31
 8000de2:	3101      	adds	r1, #1
 8000de4:	322b      	adds	r2, #43	@ 0x2b
 8000de6:	3313      	adds	r3, #19
 8000de8:	2f00      	cmp	r7, #0
 8000dea:	d104      	bne.n	8000df6 <draw_block+0x7e>
			position_x + COLUMN_WIDTH - PLATFORM_LINE_THICKNESS, position_y + ROW_HEIGHT - PLATFORM_LINE_THICKNESS,  (!draw) ? RowColors[row_i] : BLUE );
 8000dec:	4d04      	ldr	r5, [pc, #16]	@ (8000e00 <draw_block+0x88>)
 8000dee:	b2e4      	uxtb	r4, r4
 8000df0:	00a4      	lsls	r4, r4, #2
	ILI9341_Draw_Filled_Rectangle_Coord(position_x + PLATFORM_LINE_THICKNESS, position_y + PLATFORM_LINE_THICKNESS,
 8000df2:	5965      	ldr	r5, [r4, r5]
 8000df4:	b2ad      	uxth	r5, r5
 8000df6:	9500      	str	r5, [sp, #0]
 8000df8:	f7ff fb59 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000dfc:	b007      	add	sp, #28
 8000dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e00:	2000003c 	.word	0x2000003c

08000e04 <draw_blocks>:

void draw_blocks(){
 8000e04:	b510      	push	{r4, lr}
	for(int i = 0; i < N_ROWS * N_COLS; i++){
 8000e06:	2400      	movs	r4, #0
			if(current_block_states[i]) draw_block(i, 0);
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <draw_blocks+0x1c>)
 8000e0a:	5d1b      	ldrb	r3, [r3, r4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <draw_blocks+0x14>
 8000e10:	2100      	movs	r1, #0
 8000e12:	0020      	movs	r0, r4
 8000e14:	f7ff ffb0 	bl	8000d78 <draw_block>
	for(int i = 0; i < N_ROWS * N_COLS; i++){
 8000e18:	3401      	adds	r4, #1
 8000e1a:	2c14      	cmp	r4, #20
 8000e1c:	d1f4      	bne.n	8000e08 <draw_blocks+0x4>
	}
}
 8000e1e:	bd10      	pop	{r4, pc}
 8000e20:	200000d4 	.word	0x200000d4

08000e24 <draw_set_time>:

void draw_set_time(bool draw){
 8000e24:	b507      	push	{r0, r1, r2, lr}
	// Prit messages to set time and alarm
	if(draw){
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d00a      	beq.n	8000e40 <draw_set_time+0x1c>
		ILI9341_Draw_Text("Set time", 5, 5, WHITE, 2, BLACK);
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	2205      	movs	r2, #5
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	3302      	adds	r3, #2
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	0011      	movs	r1, r2
 8000e36:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <draw_set_time+0x2c>)
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <draw_set_time+0x30>)
 8000e3a:	f7ff fb9f 	bl	800057c <ILI9341_Draw_Text>
	else{
		ILI9341_Draw_Filled_Rectangle_Coord(0, 0, 106, 26, BLACK);
	}


}
 8000e3e:	bd07      	pop	{r0, r1, r2, pc}
		ILI9341_Draw_Filled_Rectangle_Coord(0, 0, 106, 26, BLACK);
 8000e40:	231a      	movs	r3, #26
 8000e42:	226a      	movs	r2, #106	@ 0x6a
 8000e44:	0001      	movs	r1, r0
 8000e46:	9000      	str	r0, [sp, #0]
 8000e48:	f7ff fb31 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000e4c:	e7f7      	b.n	8000e3e <draw_set_time+0x1a>
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	08003e7d 	.word	0x08003e7d
 8000e54:	0000ffff 	.word	0x0000ffff

08000e58 <draw_set_alarm>:

void draw_set_alarm(bool draw){
 8000e58:	b507      	push	{r0, r1, r2, lr}
	if(draw){
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d00a      	beq.n	8000e74 <draw_set_alarm+0x1c>
		ILI9341_Draw_Text("Set alarm", 5, 220, WHITE, 2, BLACK);
 8000e5e:	2300      	movs	r3, #0
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	3302      	adds	r3, #2
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	22dc      	movs	r2, #220	@ 0xdc
 8000e68:	2105      	movs	r1, #5
 8000e6a:	4806      	ldr	r0, [pc, #24]	@ (8000e84 <draw_set_alarm+0x2c>)
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <draw_set_alarm+0x30>)
 8000e6e:	f7ff fb85 	bl	800057c <ILI9341_Draw_Text>
	}
	else{
		ILI9341_Draw_Filled_Rectangle_Coord(0, 214,  121,  240,  BLACK);
	}

}
 8000e72:	bd07      	pop	{r0, r1, r2, pc}
		ILI9341_Draw_Filled_Rectangle_Coord(0, 214,  121,  240,  BLACK);
 8000e74:	23f0      	movs	r3, #240	@ 0xf0
 8000e76:	2279      	movs	r2, #121	@ 0x79
 8000e78:	21d6      	movs	r1, #214	@ 0xd6
 8000e7a:	9000      	str	r0, [sp, #0]
 8000e7c:	f7ff fb17 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000e80:	e7f7      	b.n	8000e72 <draw_set_alarm+0x1a>
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	08003e86 	.word	0x08003e86
 8000e88:	0000ffff 	.word	0x0000ffff

08000e8c <start_ball>:


void start_ball(){
 8000e8c:	b570      	push	{r4, r5, r6, lr}
	// Delete the previous ball position
	ILI9341_Draw_Filled_Circle(ball_position[0], ball_position[1], ball_size, BLUE);
 8000e8e:	4c0b      	ldr	r4, [pc, #44]	@ (8000ebc <start_ball+0x30>)
 8000e90:	4d0b      	ldr	r5, [pc, #44]	@ (8000ec0 <start_ball+0x34>)
 8000e92:	8861      	ldrh	r1, [r4, #2]
 8000e94:	782a      	ldrb	r2, [r5, #0]
 8000e96:	8820      	ldrh	r0, [r4, #0]
 8000e98:	231f      	movs	r3, #31
 8000e9a:	f7ff fab5 	bl	8000408 <ILI9341_Draw_Filled_Circle>

	ball_position[0] = 120;
	ball_position[1] = 160;

	ball_direction[0] = 0;
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <start_ball+0x38>)
	ball_position[0] = 120;
 8000ea2:	2078      	movs	r0, #120	@ 0x78
	ball_direction[0] = 0;
 8000ea4:	701a      	strb	r2, [r3, #0]
	ball_direction[1] = 7;
 8000ea6:	3207      	adds	r2, #7
 8000ea8:	705a      	strb	r2, [r3, #1]

	ILI9341_Draw_Filled_Circle(ball_position[0], ball_position[1], ball_size, RED);
 8000eaa:	23f8      	movs	r3, #248	@ 0xf8
	ball_position[1] = 160;
 8000eac:	21a0      	movs	r1, #160	@ 0xa0
	ILI9341_Draw_Filled_Circle(ball_position[0], ball_position[1], ball_size, RED);
 8000eae:	782a      	ldrb	r2, [r5, #0]
 8000eb0:	021b      	lsls	r3, r3, #8
	ball_position[0] = 120;
 8000eb2:	8020      	strh	r0, [r4, #0]
	ball_position[1] = 160;
 8000eb4:	8061      	strh	r1, [r4, #2]
	ILI9341_Draw_Filled_Circle(ball_position[0], ball_position[1], ball_size, RED);
 8000eb6:	f7ff faa7 	bl	8000408 <ILI9341_Draw_Filled_Circle>
}
 8000eba:	bd70      	pop	{r4, r5, r6, pc}
 8000ebc:	20000020 	.word	0x20000020
 8000ec0:	2000001e 	.word	0x2000001e
 8000ec4:	200000c2 	.word	0x200000c2

08000ec8 <draw_top_borders>:

void draw_top_borders(){
 8000ec8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ILI9341_Draw_Filled_Rectangle_Coord(0, 0, LEFT_BORDER, 320, BLACK);
 8000eca:	25a0      	movs	r5, #160	@ 0xa0
 8000ecc:	2400      	movs	r4, #0
 8000ece:	006d      	lsls	r5, r5, #1
 8000ed0:	002b      	movs	r3, r5
 8000ed2:	0021      	movs	r1, r4
 8000ed4:	0020      	movs	r0, r4
 8000ed6:	220a      	movs	r2, #10
 8000ed8:	9400      	str	r4, [sp, #0]
 8000eda:	f7ff fae8 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(10, 0, 240, 10, BLACK);
 8000ede:	230a      	movs	r3, #10
	ILI9341_Draw_Filled_Rectangle_Coord(RIGHT_BORDER, 10, 240, 320, BLACK);
	ILI9341_Draw_Filled_Rectangle_Coord(0, 0, LEFT_BORDER-2, 320, DARKGREY);
 8000ee0:	4e11      	ldr	r6, [pc, #68]	@ (8000f28 <draw_top_borders+0x60>)
	ILI9341_Draw_Filled_Rectangle_Coord(10, 0, 240, 10, BLACK);
 8000ee2:	0021      	movs	r1, r4
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	22f0      	movs	r2, #240	@ 0xf0
 8000ee8:	9400      	str	r4, [sp, #0]
 8000eea:	f7ff fae0 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(RIGHT_BORDER, 10, 240, 320, BLACK);
 8000eee:	002b      	movs	r3, r5
 8000ef0:	22f0      	movs	r2, #240	@ 0xf0
 8000ef2:	210a      	movs	r1, #10
 8000ef4:	20e6      	movs	r0, #230	@ 0xe6
 8000ef6:	9400      	str	r4, [sp, #0]
 8000ef8:	f7ff fad9 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(0, 0, LEFT_BORDER-2, 320, DARKGREY);
 8000efc:	002b      	movs	r3, r5
 8000efe:	0021      	movs	r1, r4
 8000f00:	0020      	movs	r0, r4
 8000f02:	9600      	str	r6, [sp, #0]
 8000f04:	2208      	movs	r2, #8
 8000f06:	f7ff fad2 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(10, 0, 240, 10-2, DARKGREY);
 8000f0a:	0021      	movs	r1, r4
 8000f0c:	9600      	str	r6, [sp, #0]
 8000f0e:	2308      	movs	r3, #8
 8000f10:	22f0      	movs	r2, #240	@ 0xf0
 8000f12:	200a      	movs	r0, #10
 8000f14:	f7ff facb 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(RIGHT_BORDER+2, 10, 240, 320, DARKGREY);
 8000f18:	002b      	movs	r3, r5
 8000f1a:	9600      	str	r6, [sp, #0]
 8000f1c:	22f0      	movs	r2, #240	@ 0xf0
 8000f1e:	210a      	movs	r1, #10
 8000f20:	20e8      	movs	r0, #232	@ 0xe8
 8000f22:	f7ff fac4 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000f26:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8000f28:	00007bef 	.word	0x00007bef

08000f2c <draw_game_borders>:

void draw_game_borders(){
 8000f2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ILI9341_Draw_Filled_Rectangle_Coord(0, TOP_BORDER - TOP_BORDER_HEIGHT - 1, LEFT_BORDER, 320, BLACK);
 8000f2e:	25a0      	movs	r5, #160	@ 0xa0
 8000f30:	2400      	movs	r4, #0
 8000f32:	006d      	lsls	r5, r5, #1
 8000f34:	002b      	movs	r3, r5
 8000f36:	0020      	movs	r0, r4
 8000f38:	220a      	movs	r2, #10
 8000f3a:	2113      	movs	r1, #19
 8000f3c:	9400      	str	r4, [sp, #0]
 8000f3e:	f7ff fab6 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(10, TOP_BORDER - TOP_BORDER_HEIGHT - 1, 240, TOP_BORDER, BLACK);
	ILI9341_Draw_Filled_Rectangle_Coord(RIGHT_BORDER, TOP_BORDER - TOP_BORDER_HEIGHT, 240, 320, BLACK);
	ILI9341_Draw_Filled_Rectangle_Coord(0, TOP_BORDER - TOP_BORDER_HEIGHT, LEFT_BORDER -1, 320, DARKGREY);
 8000f42:	4e12      	ldr	r6, [pc, #72]	@ (8000f8c <draw_game_borders+0x60>)
	ILI9341_Draw_Filled_Rectangle_Coord(10, TOP_BORDER - TOP_BORDER_HEIGHT - 1, 240, TOP_BORDER, BLACK);
 8000f44:	231e      	movs	r3, #30
 8000f46:	22f0      	movs	r2, #240	@ 0xf0
 8000f48:	2113      	movs	r1, #19
 8000f4a:	200a      	movs	r0, #10
 8000f4c:	9400      	str	r4, [sp, #0]
 8000f4e:	f7ff faae 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(RIGHT_BORDER, TOP_BORDER - TOP_BORDER_HEIGHT, 240, 320, BLACK);
 8000f52:	002b      	movs	r3, r5
 8000f54:	22f0      	movs	r2, #240	@ 0xf0
 8000f56:	2114      	movs	r1, #20
 8000f58:	20e6      	movs	r0, #230	@ 0xe6
 8000f5a:	9400      	str	r4, [sp, #0]
 8000f5c:	f7ff faa7 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(0, TOP_BORDER - TOP_BORDER_HEIGHT, LEFT_BORDER -1, 320, DARKGREY);
 8000f60:	002b      	movs	r3, r5
 8000f62:	0020      	movs	r0, r4
 8000f64:	9600      	str	r6, [sp, #0]
 8000f66:	2209      	movs	r2, #9
 8000f68:	2114      	movs	r1, #20
 8000f6a:	f7ff faa0 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(10, TOP_BORDER - TOP_BORDER_HEIGHT, 240, TOP_BORDER-1, DARKGREY);
 8000f6e:	9600      	str	r6, [sp, #0]
 8000f70:	231d      	movs	r3, #29
 8000f72:	22f0      	movs	r2, #240	@ 0xf0
 8000f74:	2114      	movs	r1, #20
 8000f76:	200a      	movs	r0, #10
 8000f78:	f7ff fa99 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(RIGHT_BORDER+1, TOP_BORDER - TOP_BORDER_HEIGHT, 240, 320, DARKGREY);
 8000f7c:	002b      	movs	r3, r5
 8000f7e:	9600      	str	r6, [sp, #0]
 8000f80:	22f0      	movs	r2, #240	@ 0xf0
 8000f82:	2114      	movs	r1, #20
 8000f84:	20e7      	movs	r0, #231	@ 0xe7
 8000f86:	f7ff fa92 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000f8a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8000f8c:	00007bef 	.word	0x00007bef

08000f90 <start_platform>:
			}
		}
	}
}

void start_platform(){
 8000f90:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Delete the previous platform position
	ILI9341_Draw_Filled_Rectangle_Coord(
 8000f92:	4e25      	ldr	r6, [pc, #148]	@ (8001028 <start_platform+0x98>)
 8000f94:	4d25      	ldr	r5, [pc, #148]	@ (800102c <start_platform+0x9c>)
 8000f96:	7833      	ldrb	r3, [r6, #0]
 8000f98:	7829      	ldrb	r1, [r5, #0]
 8000f9a:	085b      	lsrs	r3, r3, #1
 8000f9c:	0849      	lsrs	r1, r1, #1
 8000f9e:	469c      	mov	ip, r3
 8000fa0:	000b      	movs	r3, r1
 8000fa2:	330f      	adds	r3, #15
void start_platform(){
 8000fa4:	b085      	sub	sp, #20
	ILI9341_Draw_Filled_Rectangle_Coord(
 8000fa6:	33ff      	adds	r3, #255	@ 0xff
 8000fa8:	9303      	str	r3, [sp, #12]
 8000faa:	4662      	mov	r2, ip
 8000fac:	4663      	mov	r3, ip
 8000fae:	4f20      	ldr	r7, [pc, #128]	@ (8001030 <start_platform+0xa0>)
 8000fb0:	2487      	movs	r4, #135	@ 0x87
 8000fb2:	7838      	ldrb	r0, [r7, #0]
 8000fb4:	0064      	lsls	r4, r4, #1
 8000fb6:	1882      	adds	r2, r0, r2
 8000fb8:	1ac0      	subs	r0, r0, r3
 8000fba:	231f      	movs	r3, #31
 8000fbc:	1a61      	subs	r1, r4, r1
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	b289      	uxth	r1, r1
 8000fc2:	9b03      	ldr	r3, [sp, #12]
 8000fc4:	b280      	uxth	r0, r0
 8000fc6:	f7ff fa72 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
			PLATFORM_LINE - platform_height / 2,
			platform_position + platform_width / 2,
			PLATFORM_LINE + platform_height / 2, BLUE);

	platform_position = (RIGHT_BORDER + LEFT_BORDER) / 2;
	platform_direction = DEFAULT_PLATFORM_DIRECTION;
 8000fca:	2207      	movs	r2, #7
 8000fcc:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <start_platform+0xa4>)
	ILI9341_Draw_Filled_Rectangle_Coord(
 8000fce:	7829      	ldrb	r1, [r5, #0]
	platform_direction = DEFAULT_PLATFORM_DIRECTION;
 8000fd0:	701a      	strb	r2, [r3, #0]
	ILI9341_Draw_Filled_Rectangle_Coord(
 8000fd2:	7833      	ldrb	r3, [r6, #0]
 8000fd4:	0849      	lsrs	r1, r1, #1
 8000fd6:	085b      	lsrs	r3, r3, #1
 8000fd8:	469c      	mov	ip, r3
	platform_position = (RIGHT_BORDER + LEFT_BORDER) / 2;
 8000fda:	2078      	movs	r0, #120	@ 0x78
	ILI9341_Draw_Filled_Rectangle_Coord(
 8000fdc:	4662      	mov	r2, ip
 8000fde:	190b      	adds	r3, r1, r4
 8000fe0:	1a61      	subs	r1, r4, r1
 8000fe2:	4664      	mov	r4, ip
	platform_position = (RIGHT_BORDER + LEFT_BORDER) / 2;
 8000fe4:	7038      	strb	r0, [r7, #0]
	ILI9341_Draw_Filled_Rectangle_Coord(
 8000fe6:	1812      	adds	r2, r2, r0
 8000fe8:	1b00      	subs	r0, r0, r4
 8000fea:	2400      	movs	r4, #0
 8000fec:	b289      	uxth	r1, r1
 8000fee:	9400      	str	r4, [sp, #0]
 8000ff0:	b280      	uxth	r0, r0
 8000ff2:	f7ff fa5c 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
			platform_position - platform_width / 2,
			PLATFORM_LINE - platform_height / 2,
			platform_position + platform_width / 2,
			PLATFORM_LINE + platform_height / 2, BLACK);

	ILI9341_Draw_Filled_Rectangle_Coord(
 8000ff6:	782d      	ldrb	r5, [r5, #0]
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	086d      	lsrs	r5, r5, #1
 8000ffc:	002b      	movs	r3, r5
			platform_position - platform_width / 2 + PLATFORM_LINE_THICKNESS,
 8000ffe:	7838      	ldrb	r0, [r7, #0]
 8001000:	7834      	ldrb	r4, [r6, #0]
	ILI9341_Draw_Filled_Rectangle_Coord(
 8001002:	1e42      	subs	r2, r0, #1
			platform_position - platform_width / 2 + PLATFORM_LINE_THICKNESS,
 8001004:	0864      	lsrs	r4, r4, #1
	ILI9341_Draw_Filled_Rectangle_Coord(
 8001006:	3001      	adds	r0, #1
 8001008:	18a2      	adds	r2, r4, r2
 800100a:	1b00      	subs	r0, r0, r4
 800100c:	31ff      	adds	r1, #255	@ 0xff
 800100e:	4c0a      	ldr	r4, [pc, #40]	@ (8001038 <start_platform+0xa8>)
 8001010:	1b49      	subs	r1, r1, r5
 8001012:	330e      	adds	r3, #14
 8001014:	33ff      	adds	r3, #255	@ 0xff
 8001016:	b292      	uxth	r2, r2
 8001018:	b289      	uxth	r1, r1
 800101a:	b280      	uxth	r0, r0
 800101c:	9400      	str	r4, [sp, #0]
 800101e:	f7ff fa46 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
			PLATFORM_LINE -  platform_height / 2 + PLATFORM_LINE_THICKNESS,
			platform_position + platform_width / 2 - PLATFORM_LINE_THICKNESS,
			PLATFORM_LINE + platform_height / 2- PLATFORM_LINE_THICKNESS , DARKGREY);
}
 8001022:	b005      	add	sp, #20
 8001024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	2000001c 	.word	0x2000001c
 800102c:	2000001b 	.word	0x2000001b
 8001030:	2000001d 	.word	0x2000001d
 8001034:	200000c1 	.word	0x200000c1
 8001038:	00007bef 	.word	0x00007bef

0800103c <move_ball>:
void move_ball(){
 800103c:	b5f0      	push	{r4, r5, r6, r7, lr}
	ILI9341_Draw_Filled_Circle(120, 160, ball_size, BLUE);
 800103e:	4c7d      	ldr	r4, [pc, #500]	@ (8001234 <move_ball+0x1f8>)
void move_ball(){
 8001040:	b085      	sub	sp, #20
	ILI9341_Draw_Filled_Circle(120, 160, ball_size, BLUE);
 8001042:	231f      	movs	r3, #31
 8001044:	21a0      	movs	r1, #160	@ 0xa0
 8001046:	2078      	movs	r0, #120	@ 0x78
 8001048:	7822      	ldrb	r2, [r4, #0]
 800104a:	f7ff f9dd 	bl	8000408 <ILI9341_Draw_Filled_Circle>
	ball_position[0] += ball_direction[0];
 800104e:	2200      	movs	r2, #0
	ball_position[1] += ball_direction[1];
 8001050:	2001      	movs	r0, #1
	prev_ball_position[0] = ball_position[0];
 8001052:	4e79      	ldr	r6, [pc, #484]	@ (8001238 <move_ball+0x1fc>)
	ball_position[0] += ball_direction[0];
 8001054:	4979      	ldr	r1, [pc, #484]	@ (800123c <move_ball+0x200>)
	prev_ball_position[0] = ball_position[0];
 8001056:	8833      	ldrh	r3, [r6, #0]
 8001058:	9300      	str	r3, [sp, #0]
	prev_ball_position[1] = ball_position[1];
 800105a:	8873      	ldrh	r3, [r6, #2]
 800105c:	9301      	str	r3, [sp, #4]
	ball_position[0] += ball_direction[0];
 800105e:	568a      	ldrsb	r2, [r1, r2]
 8001060:	9b00      	ldr	r3, [sp, #0]
	ball_position[1] += ball_direction[1];
 8001062:	9d01      	ldr	r5, [sp, #4]
	ball_position[0] += ball_direction[0];
 8001064:	189b      	adds	r3, r3, r2
 8001066:	b21b      	sxth	r3, r3
 8001068:	8033      	strh	r3, [r6, #0]
	ball_position[1] += ball_direction[1];
 800106a:	5608      	ldrsb	r0, [r1, r0]
 800106c:	182d      	adds	r5, r5, r0
 800106e:	b22d      	sxth	r5, r5
 8001070:	8075      	strh	r5, [r6, #2]
	if((ball_position[0] != prev_ball_position[0]) || (ball_position[1] != prev_ball_position[1])){
 8001072:	9e00      	ldr	r6, [sp, #0]
 8001074:	42b3      	cmp	r3, r6
 8001076:	d102      	bne.n	800107e <move_ball+0x42>
 8001078:	9e01      	ldr	r6, [sp, #4]
 800107a:	42b5      	cmp	r5, r6
 800107c:	d00a      	beq.n	8001094 <move_ball+0x58>
		if(ball_position[1] - ball_size + ball_direction[1] <= TOP_BORDER){
 800107e:	7827      	ldrb	r7, [r4, #0]
 8001080:	1bee      	subs	r6, r5, r7
 8001082:	1836      	adds	r6, r6, r0
 8001084:	2e1e      	cmp	r6, #30
 8001086:	dd00      	ble.n	800108a <move_ball+0x4e>
 8001088:	e068      	b.n	800115c <move_ball+0x120>
			ball_direction[1] = -ball_direction[1];
 800108a:	4240      	negs	r0, r0
 800108c:	7048      	strb	r0, [r1, #1]
			ball_hit_something = 1;
 800108e:	2201      	movs	r2, #1
 8001090:	4b6b      	ldr	r3, [pc, #428]	@ (8001240 <move_ball+0x204>)
 8001092:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Filled_Circle(prev_ball_position[0], prev_ball_position[1], ball_size, BLUE);
 8001094:	7822      	ldrb	r2, [r4, #0]
 8001096:	231f      	movs	r3, #31
 8001098:	9901      	ldr	r1, [sp, #4]
 800109a:	9800      	ldr	r0, [sp, #0]
 800109c:	f7ff f9b4 	bl	8000408 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Filled_Circle(ball_position[0], ball_position[1], ball_size, RED);
 80010a0:	4b65      	ldr	r3, [pc, #404]	@ (8001238 <move_ball+0x1fc>)
 80010a2:	7822      	ldrb	r2, [r4, #0]
 80010a4:	8859      	ldrh	r1, [r3, #2]
 80010a6:	8818      	ldrh	r0, [r3, #0]
 80010a8:	23f8      	movs	r3, #248	@ 0xf8
 80010aa:	2400      	movs	r4, #0
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	f7ff f9ab 	bl	8000408 <ILI9341_Draw_Filled_Circle>
		for(uint8_t i = 0; i < N_COLS * N_ROWS; i++){
 80010b2:	4f64      	ldr	r7, [pc, #400]	@ (8001244 <move_ball+0x208>)
			if(current_block_states[i]){
 80010b4:	783b      	ldrb	r3, [r7, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d04a      	beq.n	8001150 <move_ball+0x114>
				if((ball_position[1] + ball_size + ball_direction[1] <= position_y + ROW_HEIGHT) &&
 80010ba:	2601      	movs	r6, #1
 80010bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001234 <move_ball+0x1f8>)
 80010be:	4d5f      	ldr	r5, [pc, #380]	@ (800123c <move_ball+0x200>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
				position_y = (i / N_COLS) * ROW_HEIGHT + TOP_ROW;
 80010c2:	2105      	movs	r1, #5
				if((ball_position[1] + ball_size + ball_direction[1] <= position_y + ROW_HEIGHT) &&
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001238 <move_ball+0x1fc>)
				position_y = (i / N_COLS) * ROW_HEIGHT + TOP_ROW;
 80010c8:	b2e0      	uxtb	r0, r4
				if((ball_position[1] + ball_size + ball_direction[1] <= position_y + ROW_HEIGHT) &&
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	2202      	movs	r2, #2
 80010ce:	5e9b      	ldrsh	r3, [r3, r2]
 80010d0:	9a00      	ldr	r2, [sp, #0]
 80010d2:	57ae      	ldrsb	r6, [r5, r6]
 80010d4:	189b      	adds	r3, r3, r2
 80010d6:	199e      	adds	r6, r3, r6
				position_y = (i / N_COLS) * ROW_HEIGHT + TOP_ROW;
 80010d8:	f7ff f820 	bl	800011c <__udivsi3>
 80010dc:	2314      	movs	r3, #20
 80010de:	4358      	muls	r0, r3
 80010e0:	303c      	adds	r0, #60	@ 0x3c
				if((ball_position[1] + ball_size + ball_direction[1] <= position_y + ROW_HEIGHT) &&
 80010e2:	b2c0      	uxtb	r0, r0
 80010e4:	0003      	movs	r3, r0
 80010e6:	3314      	adds	r3, #20
 80010e8:	429e      	cmp	r6, r3
 80010ea:	dc31      	bgt.n	8001150 <move_ball+0x114>
 80010ec:	4286      	cmp	r6, r0
 80010ee:	dd2f      	ble.n	8001150 <move_ball+0x114>
				  (ball_position[0] >= position_x - ball_size - ball_direction[0]) &&
 80010f0:	9b01      	ldr	r3, [sp, #4]
				position_x = (i % N_COLS) * COLUMN_WIDTH + LEFT_COLUMN;
 80010f2:	2105      	movs	r1, #5
 80010f4:	b2e0      	uxtb	r0, r4
				  (ball_position[0] >= position_x - ball_size - ball_direction[0]) &&
 80010f6:	2600      	movs	r6, #0
 80010f8:	5f9e      	ldrsh	r6, [r3, r6]
				position_x = (i % N_COLS) * COLUMN_WIDTH + LEFT_COLUMN;
 80010fa:	f7ff f895 	bl	8000228 <__aeabi_uidivmod>
 80010fe:	232c      	movs	r3, #44	@ 0x2c
				  (ball_position[0] >= position_x - ball_size - ball_direction[0]) &&
 8001100:	2200      	movs	r2, #0
				position_x = (i % N_COLS) * COLUMN_WIDTH + LEFT_COLUMN;
 8001102:	4359      	muls	r1, r3
				  (ball_position[0] >= position_x - ball_size - ball_direction[0]) &&
 8001104:	9b00      	ldr	r3, [sp, #0]
				position_x = (i % N_COLS) * COLUMN_WIDTH + LEFT_COLUMN;
 8001106:	310a      	adds	r1, #10
				  (ball_position[0] >= position_x - ball_size - ball_direction[0]) &&
 8001108:	56aa      	ldrsb	r2, [r5, r2]
 800110a:	b2c9      	uxtb	r1, r1
 800110c:	1acb      	subs	r3, r1, r3
 800110e:	1a9b      	subs	r3, r3, r2
				  (ball_position[1] + ball_size + ball_direction[1] > position_y) &&
 8001110:	429e      	cmp	r6, r3
 8001112:	db1d      	blt.n	8001150 <move_ball+0x114>
				  (ball_position[0] <= position_x + COLUMN_WIDTH + ball_size + ball_direction[0])){
 8001114:	9b00      	ldr	r3, [sp, #0]
 8001116:	312c      	adds	r1, #44	@ 0x2c
 8001118:	18c9      	adds	r1, r1, r3
 800111a:	1889      	adds	r1, r1, r2
				  (ball_position[0] >= position_x - ball_size - ball_direction[0]) &&
 800111c:	428e      	cmp	r6, r1
 800111e:	dc17      	bgt.n	8001150 <move_ball+0x114>
					current_block_states[i] = 0;
 8001120:	2300      	movs	r3, #0
					draw_block(i, 1);
 8001122:	2101      	movs	r1, #1
 8001124:	0020      	movs	r0, r4
					current_block_states[i] = 0;
 8001126:	703b      	strb	r3, [r7, #0]
					draw_block(i, 1);
 8001128:	f7ff fe26 	bl	8000d78 <draw_block>
					draw_blocks();
 800112c:	f7ff fe6a 	bl	8000e04 <draw_blocks>
					draw_game_borders();
 8001130:	f7ff fefc 	bl	8000f2c <draw_game_borders>
					ball_hit_something = 1;
 8001134:	2201      	movs	r2, #1
						ball_direction[1] = -ball_direction[1];
 8001136:	786b      	ldrb	r3, [r5, #1]
				draw_score(125,2);
 8001138:	2102      	movs	r1, #2
						ball_direction[1] = -ball_direction[1];
 800113a:	425b      	negs	r3, r3
 800113c:	706b      	strb	r3, [r5, #1]
					ball_hit_something = 1;
 800113e:	4b40      	ldr	r3, [pc, #256]	@ (8001240 <move_ball+0x204>)
				draw_score(125,2);
 8001140:	207d      	movs	r0, #125	@ 0x7d
					ball_hit_something = 1;
 8001142:	701a      	strb	r2, [r3, #0]
				score++;
 8001144:	4a40      	ldr	r2, [pc, #256]	@ (8001248 <move_ball+0x20c>)
 8001146:	8813      	ldrh	r3, [r2, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	8013      	strh	r3, [r2, #0]
				draw_score(125,2);
 800114c:	f7ff fdd2 	bl	8000cf4 <draw_score>
		for(uint8_t i = 0; i < N_COLS * N_ROWS; i++){
 8001150:	3401      	adds	r4, #1
 8001152:	3701      	adds	r7, #1
 8001154:	2c14      	cmp	r4, #20
 8001156:	d1ad      	bne.n	80010b4 <move_ball+0x78>
}
 8001158:	b005      	add	sp, #20
 800115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if((ball_position[1] + ball_size + ball_direction[1] >= PLATFORM_LINE - platform_height / 2) &&
 800115c:	19ee      	adds	r6, r5, r7
 800115e:	1831      	adds	r1, r6, r0
 8001160:	9103      	str	r1, [sp, #12]
 8001162:	493a      	ldr	r1, [pc, #232]	@ (800124c <move_ball+0x210>)
 8001164:	7809      	ldrb	r1, [r1, #0]
 8001166:	9102      	str	r1, [sp, #8]
 8001168:	0849      	lsrs	r1, r1, #1
 800116a:	000e      	movs	r6, r1
 800116c:	2187      	movs	r1, #135	@ 0x87
 800116e:	0049      	lsls	r1, r1, #1
 8001170:	1b89      	subs	r1, r1, r6
 8001172:	468c      	mov	ip, r1
 8001174:	9903      	ldr	r1, [sp, #12]
 8001176:	4561      	cmp	r1, ip
 8001178:	db40      	blt.n	80011fc <move_ball+0x1c0>
				(ball_position[1] + ball_size + ball_direction[1] < PLATFORM_LINE + platform_height / 2) &&
 800117a:	0031      	movs	r1, r6
		else if((ball_position[1] + ball_size + ball_direction[1] >= PLATFORM_LINE - platform_height / 2) &&
 800117c:	9e03      	ldr	r6, [sp, #12]
				(ball_position[1] + ball_size + ball_direction[1] < PLATFORM_LINE + platform_height / 2) &&
 800117e:	310e      	adds	r1, #14
 8001180:	31ff      	adds	r1, #255	@ 0xff
		else if((ball_position[1] + ball_size + ball_direction[1] >= PLATFORM_LINE - platform_height / 2) &&
 8001182:	428e      	cmp	r6, r1
 8001184:	dc3a      	bgt.n	80011fc <move_ball+0x1c0>
				(ball_position[0] >= platform_position - platform_width / 2 - ball_size - ball_direction[0] - platform_height &&
 8001186:	4e32      	ldr	r6, [pc, #200]	@ (8001250 <move_ball+0x214>)
 8001188:	4932      	ldr	r1, [pc, #200]	@ (8001254 <move_ball+0x218>)
 800118a:	7836      	ldrb	r6, [r6, #0]
 800118c:	7809      	ldrb	r1, [r1, #0]
 800118e:	0876      	lsrs	r6, r6, #1
 8001190:	46b4      	mov	ip, r6
 8001192:	1b8e      	subs	r6, r1, r6
 8001194:	9103      	str	r1, [sp, #12]
 8001196:	1bf6      	subs	r6, r6, r7
 8001198:	9902      	ldr	r1, [sp, #8]
 800119a:	1ab6      	subs	r6, r6, r2
 800119c:	1a76      	subs	r6, r6, r1
				(ball_position[1] + ball_size + ball_direction[1] < PLATFORM_LINE + platform_height / 2) &&
 800119e:	42b3      	cmp	r3, r6
 80011a0:	db2c      	blt.n	80011fc <move_ball+0x1c0>
			    (ball_position[0] <= platform_position + platform_width / 2 + ball_size + ball_direction[0] + platform_height)))
 80011a2:	9903      	ldr	r1, [sp, #12]
 80011a4:	9e02      	ldr	r6, [sp, #8]
 80011a6:	4461      	add	r1, ip
 80011a8:	19c9      	adds	r1, r1, r7
 80011aa:	1889      	adds	r1, r1, r2
 80011ac:	1989      	adds	r1, r1, r6
				(ball_position[0] >= platform_position - platform_width / 2 - ball_size - ball_direction[0] - platform_height &&
 80011ae:	428b      	cmp	r3, r1
 80011b0:	dc24      	bgt.n	80011fc <move_ball+0x1c0>
			ball_direction[1] = -ball_direction[1];
 80011b2:	4d22      	ldr	r5, [pc, #136]	@ (800123c <move_ball+0x200>)
 80011b4:	4240      	negs	r0, r0
 80011b6:	7068      	strb	r0, [r5, #1]
			if(HAL_GPIO_ReadPin(GPIOA, BTN1_Pin) == 0){
 80011b8:	2090      	movs	r0, #144	@ 0x90
 80011ba:	2102      	movs	r1, #2
 80011bc:	05c0      	lsls	r0, r0, #23
 80011be:	f001 fb9f 	bl	8002900 <HAL_GPIO_ReadPin>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d109      	bne.n	80011da <move_ball+0x19e>
				ball_direction[0] += platform_direction / 2;
 80011c6:	2200      	movs	r2, #0
 80011c8:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <move_ball+0x21c>)
 80011ca:	569a      	ldrsb	r2, [r3, r2]
 80011cc:	0fd3      	lsrs	r3, r2, #31
 80011ce:	189b      	adds	r3, r3, r2
 80011d0:	782a      	ldrb	r2, [r5, #0]
 80011d2:	105b      	asrs	r3, r3, #1
 80011d4:	189b      	adds	r3, r3, r2
				ball_direction[0] -= platform_direction / 2;
 80011d6:	702b      	strb	r3, [r5, #0]
			ball_hit_something = 1;
 80011d8:	e759      	b.n	800108e <move_ball+0x52>
			else if(HAL_GPIO_ReadPin(GPIOA, BTN2_Pin) == 0){
 80011da:	2090      	movs	r0, #144	@ 0x90
 80011dc:	2104      	movs	r1, #4
 80011de:	05c0      	lsls	r0, r0, #23
 80011e0:	f001 fb8e 	bl	8002900 <HAL_GPIO_ReadPin>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d000      	beq.n	80011ea <move_ball+0x1ae>
 80011e8:	e751      	b.n	800108e <move_ball+0x52>
				ball_direction[0] -= platform_direction / 2;
 80011ea:	2200      	movs	r2, #0
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <move_ball+0x21c>)
 80011ee:	569a      	ldrsb	r2, [r3, r2]
 80011f0:	0fd3      	lsrs	r3, r2, #31
 80011f2:	189b      	adds	r3, r3, r2
 80011f4:	782a      	ldrb	r2, [r5, #0]
 80011f6:	105b      	asrs	r3, r3, #1
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	e7ec      	b.n	80011d6 <move_ball+0x19a>
		else if(ball_position[0] + ball_size + ball_direction[0] >= RIGHT_BORDER){
 80011fc:	19d9      	adds	r1, r3, r7
 80011fe:	1889      	adds	r1, r1, r2
 8001200:	29e5      	cmp	r1, #229	@ 0xe5
 8001202:	dd03      	ble.n	800120c <move_ball+0x1d0>
			ball_direction[0] = -ball_direction[0];
 8001204:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <move_ball+0x200>)
 8001206:	4252      	negs	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e740      	b.n	800108e <move_ball+0x52>
		else if(ball_position[0] - ball_size + ball_direction[0] <= LEFT_BORDER){
 800120c:	1bdb      	subs	r3, r3, r7
 800120e:	189b      	adds	r3, r3, r2
 8001210:	2b0a      	cmp	r3, #10
 8001212:	ddf7      	ble.n	8001204 <move_ball+0x1c8>
		else if(ball_position[1] > 320){ // Ball is out of bounds
 8001214:	23a0      	movs	r3, #160	@ 0xa0
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	429d      	cmp	r5, r3
 800121a:	dc00      	bgt.n	800121e <move_ball+0x1e2>
 800121c:	e73a      	b.n	8001094 <move_ball+0x58>
			start_ball();
 800121e:	f7ff fe35 	bl	8000e8c <start_ball>
			hp--;
 8001222:	4a0e      	ldr	r2, [pc, #56]	@ (800125c <move_ball+0x220>)
 8001224:	7813      	ldrb	r3, [r2, #0]
 8001226:	3b01      	subs	r3, #1
 8001228:	7013      	strb	r3, [r2, #0]
			draw_hp();
 800122a:	f7ff fd47 	bl	8000cbc <draw_hp>
			start_platform();
 800122e:	f7ff feaf 	bl	8000f90 <start_platform>
 8001232:	e72f      	b.n	8001094 <move_ball+0x58>
 8001234:	2000001e 	.word	0x2000001e
 8001238:	20000020 	.word	0x20000020
 800123c:	200000c2 	.word	0x200000c2
 8001240:	200000ba 	.word	0x200000ba
 8001244:	200000d4 	.word	0x200000d4
 8001248:	200000bc 	.word	0x200000bc
 800124c:	2000001b 	.word	0x2000001b
 8001250:	2000001c 	.word	0x2000001c
 8001254:	2000001d 	.word	0x2000001d
 8001258:	200000c1 	.word	0x200000c1
 800125c:	200000be 	.word	0x200000be

08001260 <move_platform>:

void move_platform(){
	int prev_platform_position = platform_position;
	if(HAL_GPIO_ReadPin(GPIOA, BTN1_Pin) == 0){
 8001260:	2090      	movs	r0, #144	@ 0x90
void move_platform(){
 8001262:	b5f0      	push	{r4, r5, r6, r7, lr}
	int prev_platform_position = platform_position;
 8001264:	4c43      	ldr	r4, [pc, #268]	@ (8001374 <move_platform+0x114>)
void move_platform(){
 8001266:	b085      	sub	sp, #20
	int prev_platform_position = platform_position;
 8001268:	7823      	ldrb	r3, [r4, #0]
	if(HAL_GPIO_ReadPin(GPIOA, BTN1_Pin) == 0){
 800126a:	2102      	movs	r1, #2
 800126c:	05c0      	lsls	r0, r0, #23
	int prev_platform_position = platform_position;
 800126e:	9303      	str	r3, [sp, #12]
	if(HAL_GPIO_ReadPin(GPIOA, BTN1_Pin) == 0){
 8001270:	f001 fb46 	bl	8002900 <HAL_GPIO_ReadPin>
 8001274:	4e40      	ldr	r6, [pc, #256]	@ (8001378 <move_platform+0x118>)
 8001276:	4d41      	ldr	r5, [pc, #260]	@ (800137c <move_platform+0x11c>)
 8001278:	4f41      	ldr	r7, [pc, #260]	@ (8001380 <move_platform+0x120>)
 800127a:	2800      	cmp	r0, #0
 800127c:	d15a      	bne.n	8001334 <move_platform+0xd4>
		if(previously_moved_left){
 800127e:	7833      	ldrb	r3, [r6, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <move_platform+0x2a>
			previously_moved_left = 0;
			platform_direction = DEFAULT_PLATFORM_DIRECTION;
 8001284:	2307      	movs	r3, #7
			previously_moved_left = 0;
 8001286:	7030      	strb	r0, [r6, #0]
			platform_direction = DEFAULT_PLATFORM_DIRECTION;
 8001288:	702b      	strb	r3, [r5, #0]
		}
		platform_position += platform_direction;
 800128a:	7822      	ldrb	r2, [r4, #0]
 800128c:	782b      	ldrb	r3, [r5, #0]
 800128e:	189a      	adds	r2, r3, r2
 8001290:	7022      	strb	r2, [r4, #0]
		previously_moved_right = 1;
 8001292:	2201      	movs	r2, #1
 8001294:	703a      	strb	r2, [r7, #0]
			platform_direction = DEFAULT_PLATFORM_DIRECTION;
		}
		platform_position -= platform_direction;
		previously_moved_left = 1;
		if(previously_moved_left){
			platform_direction += 2;
 8001296:	3302      	adds	r3, #2
 8001298:	702b      	strb	r3, [r5, #0]
		previously_moved_left = 0;

	}


	if(prev_platform_position != platform_position){
 800129a:	7823      	ldrb	r3, [r4, #0]
 800129c:	9a03      	ldr	r2, [sp, #12]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d046      	beq.n	8001330 <move_platform+0xd0>
		// Check that it has not gone out of bounds
		if(platform_position + platform_width / 2 >= RIGHT_BORDER){
 80012a2:	4a38      	ldr	r2, [pc, #224]	@ (8001384 <move_platform+0x124>)
 80012a4:	7810      	ldrb	r0, [r2, #0]
 80012a6:	0840      	lsrs	r0, r0, #1
 80012a8:	181a      	adds	r2, r3, r0
 80012aa:	2ae5      	cmp	r2, #229	@ 0xe5
 80012ac:	dd5c      	ble.n	8001368 <move_platform+0x108>
			platform_position = RIGHT_BORDER - platform_width / 2;
 80012ae:	231a      	movs	r3, #26
 80012b0:	425b      	negs	r3, r3
 80012b2:	1a1b      	subs	r3, r3, r0
		}
		else if(platform_position - platform_width / 2 <= LEFT_BORDER){
			platform_position = LEFT_BORDER + platform_width / 2;
 80012b4:	7023      	strb	r3, [r4, #0]
		}

		// Move
		ILI9341_Draw_Filled_Rectangle_Coord(
 80012b6:	4c34      	ldr	r4, [pc, #208]	@ (8001388 <move_platform+0x128>)
 80012b8:	9e03      	ldr	r6, [sp, #12]
 80012ba:	7821      	ldrb	r1, [r4, #0]
 80012bc:	9a03      	ldr	r2, [sp, #12]
 80012be:	0849      	lsrs	r1, r1, #1
 80012c0:	2587      	movs	r5, #135	@ 0x87
 80012c2:	000b      	movs	r3, r1
 80012c4:	1812      	adds	r2, r2, r0
 80012c6:	1a30      	subs	r0, r6, r0
 80012c8:	261f      	movs	r6, #31
 80012ca:	006d      	lsls	r5, r5, #1
 80012cc:	1a69      	subs	r1, r5, r1
 80012ce:	330f      	adds	r3, #15
 80012d0:	33ff      	adds	r3, #255	@ 0xff
 80012d2:	b289      	uxth	r1, r1
 80012d4:	b280      	uxth	r0, r0
 80012d6:	9600      	str	r6, [sp, #0]
 80012d8:	f7ff f8e9 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
						prev_platform_position - platform_width / 2,
						PLATFORM_LINE - platform_height / 2,
						prev_platform_position + platform_width / 2,
						PLATFORM_LINE + platform_height / 2, BLUE);

		ILI9341_Draw_Filled_Rectangle_Coord(
 80012dc:	4e29      	ldr	r6, [pc, #164]	@ (8001384 <move_platform+0x124>)
 80012de:	7821      	ldrb	r1, [r4, #0]
 80012e0:	7833      	ldrb	r3, [r6, #0]
 80012e2:	0849      	lsrs	r1, r1, #1
 80012e4:	085b      	lsrs	r3, r3, #1
 80012e6:	469c      	mov	ip, r3
 80012e8:	194b      	adds	r3, r1, r5
 80012ea:	4662      	mov	r2, ip
 80012ec:	1a69      	subs	r1, r5, r1
 80012ee:	4665      	mov	r5, ip
 80012f0:	4f20      	ldr	r7, [pc, #128]	@ (8001374 <move_platform+0x114>)
 80012f2:	b289      	uxth	r1, r1
 80012f4:	7838      	ldrb	r0, [r7, #0]
 80012f6:	1882      	adds	r2, r0, r2
 80012f8:	1b40      	subs	r0, r0, r5
 80012fa:	2500      	movs	r5, #0
 80012fc:	b280      	uxth	r0, r0
 80012fe:	9500      	str	r5, [sp, #0]
 8001300:	f7ff f8d5 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
							platform_position - platform_width / 2,
							PLATFORM_LINE - platform_height / 2,
							platform_position + platform_width / 2,
							PLATFORM_LINE + platform_height / 2, BLACK);

		ILI9341_Draw_Filled_Rectangle_Coord(
 8001304:	7824      	ldrb	r4, [r4, #0]
 8001306:	2110      	movs	r1, #16
 8001308:	0864      	lsrs	r4, r4, #1
 800130a:	0023      	movs	r3, r4
			platform_position - platform_width / 2 + PLATFORM_LINE_THICKNESS,
 800130c:	7838      	ldrb	r0, [r7, #0]
 800130e:	7835      	ldrb	r5, [r6, #0]
		ILI9341_Draw_Filled_Rectangle_Coord(
 8001310:	31ff      	adds	r1, #255	@ 0xff
			platform_position - platform_width / 2 + PLATFORM_LINE_THICKNESS,
 8001312:	086d      	lsrs	r5, r5, #1
		ILI9341_Draw_Filled_Rectangle_Coord(
 8001314:	1e42      	subs	r2, r0, #1
 8001316:	1b09      	subs	r1, r1, r4
 8001318:	3001      	adds	r0, #1
 800131a:	4c1c      	ldr	r4, [pc, #112]	@ (800138c <move_platform+0x12c>)
 800131c:	330e      	adds	r3, #14
 800131e:	18aa      	adds	r2, r5, r2
 8001320:	1b40      	subs	r0, r0, r5
 8001322:	33ff      	adds	r3, #255	@ 0xff
 8001324:	b292      	uxth	r2, r2
 8001326:	b289      	uxth	r1, r1
 8001328:	b280      	uxth	r0, r0
 800132a:	9400      	str	r4, [sp, #0]
 800132c:	f7ff f8bf 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
			PLATFORM_LINE -  platform_height / 2 + PLATFORM_LINE_THICKNESS,
			platform_position + platform_width / 2 - PLATFORM_LINE_THICKNESS,
			PLATFORM_LINE + platform_height / 2- PLATFORM_LINE_THICKNESS , DARKGREY);
	}
}
 8001330:	b005      	add	sp, #20
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(HAL_GPIO_ReadPin(GPIOA, BTN2_Pin) == 0){
 8001334:	2090      	movs	r0, #144	@ 0x90
 8001336:	2104      	movs	r1, #4
 8001338:	05c0      	lsls	r0, r0, #23
 800133a:	f001 fae1 	bl	8002900 <HAL_GPIO_ReadPin>
 800133e:	2800      	cmp	r0, #0
 8001340:	d10c      	bne.n	800135c <move_platform+0xfc>
		if(previously_moved_right){
 8001342:	783b      	ldrb	r3, [r7, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <move_platform+0xee>
			platform_direction = DEFAULT_PLATFORM_DIRECTION;
 8001348:	2307      	movs	r3, #7
			previously_moved_right = 0;
 800134a:	7038      	strb	r0, [r7, #0]
			platform_direction = DEFAULT_PLATFORM_DIRECTION;
 800134c:	702b      	strb	r3, [r5, #0]
		platform_position -= platform_direction;
 800134e:	7822      	ldrb	r2, [r4, #0]
 8001350:	782b      	ldrb	r3, [r5, #0]
 8001352:	1ad2      	subs	r2, r2, r3
 8001354:	7022      	strb	r2, [r4, #0]
		previously_moved_left = 1;
 8001356:	2201      	movs	r2, #1
 8001358:	7032      	strb	r2, [r6, #0]
 800135a:	e79c      	b.n	8001296 <move_platform+0x36>
		platform_direction = DEFAULT_PLATFORM_DIRECTION;
 800135c:	2307      	movs	r3, #7
 800135e:	702b      	strb	r3, [r5, #0]
		previously_moved_right = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	703b      	strb	r3, [r7, #0]
		previously_moved_left = 0;
 8001364:	7033      	strb	r3, [r6, #0]
 8001366:	e798      	b.n	800129a <move_platform+0x3a>
		else if(platform_position - platform_width / 2 <= LEFT_BORDER){
 8001368:	1a1b      	subs	r3, r3, r0
 800136a:	2b0a      	cmp	r3, #10
 800136c:	dca3      	bgt.n	80012b6 <move_platform+0x56>
			platform_position = LEFT_BORDER + platform_width / 2;
 800136e:	0003      	movs	r3, r0
 8001370:	330a      	adds	r3, #10
 8001372:	e79f      	b.n	80012b4 <move_platform+0x54>
 8001374:	2000001d 	.word	0x2000001d
 8001378:	200000bf 	.word	0x200000bf
 800137c:	200000c1 	.word	0x200000c1
 8001380:	200000c0 	.word	0x200000c0
 8001384:	2000001c 	.word	0x2000001c
 8001388:	2000001b 	.word	0x2000001b
 800138c:	00007bef 	.word	0x00007bef

08001390 <draw_msg>:

void draw_msg(){
 8001390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	char msg[] = "Press button";
 8001392:	220d      	movs	r2, #13
 8001394:	4907      	ldr	r1, [pc, #28]	@ (80013b4 <draw_msg+0x24>)
 8001396:	a802      	add	r0, sp, #8
 8001398:	f002 fc36 	bl	8003c08 <memcpy>
	ILI9341_Draw_Text(msg, 45, 255, BLACK, 2, BLUE);
 800139c:	231f      	movs	r3, #31
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	3b1d      	subs	r3, #29
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	22ff      	movs	r2, #255	@ 0xff
 80013a6:	2300      	movs	r3, #0
 80013a8:	212d      	movs	r1, #45	@ 0x2d
 80013aa:	a802      	add	r0, sp, #8
 80013ac:	f7ff f8e6 	bl	800057c <ILI9341_Draw_Text>
}
 80013b0:	b007      	add	sp, #28
 80013b2:	bd00      	pop	{pc}
 80013b4:	08003e90 	.word	0x08003e90

080013b8 <delete_msg>:

void delete_msg(){
 80013b8:	b507      	push	{r0, r1, r2, lr}
	ILI9341_Draw_Filled_Rectangle_Coord(40, 250, 200, 280, BLUE);
 80013ba:	238c      	movs	r3, #140	@ 0x8c
 80013bc:	221f      	movs	r2, #31
 80013be:	21fa      	movs	r1, #250	@ 0xfa
 80013c0:	9200      	str	r2, [sp, #0]
 80013c2:	2028      	movs	r0, #40	@ 0x28
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	32a9      	adds	r2, #169	@ 0xa9
 80013c8:	f7ff f871 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
}
 80013cc:	bd07      	pop	{r0, r1, r2, pc}
	...

080013d0 <prepare_start>:

void prepare_start(char title[10]){
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	9002      	str	r0, [sp, #8]
	ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 80013d6:	2002      	movs	r0, #2
 80013d8:	f7ff f978 	bl	80006cc <ILI9341_Set_Rotation>
	ILI9341_Fill_Screen(BLUE);
 80013dc:	201f      	movs	r0, #31
 80013de:	f7ff faff 	bl	80009e0 <ILI9341_Fill_Screen>

	draw_top_borders();
 80013e2:	f7ff fd71 	bl	8000ec8 <draw_top_borders>

	// Draw platform
	platform_position = (RIGHT_BORDER + LEFT_BORDER) / 2;
	ILI9341_Draw_Filled_Rectangle_Coord(
 80013e6:	21aa      	movs	r1, #170	@ 0xaa
 80013e8:	4c29      	ldr	r4, [pc, #164]	@ (8001490 <prepare_start+0xc0>)
 80013ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <prepare_start+0xc4>)
 80013ec:	7825      	ldrb	r5, [r4, #0]
	platform_position = (RIGHT_BORDER + LEFT_BORDER) / 2;
 80013ee:	2778      	movs	r7, #120	@ 0x78
	ILI9341_Draw_Filled_Rectangle_Coord(
 80013f0:	086d      	lsrs	r5, r5, #1
 80013f2:	7818      	ldrb	r0, [r3, #0]
 80013f4:	9303      	str	r3, [sp, #12]
 80013f6:	1b49      	subs	r1, r1, r5
 80013f8:	002b      	movs	r3, r5
 80013fa:	2500      	movs	r5, #0
	platform_position = (RIGHT_BORDER + LEFT_BORDER) / 2;
 80013fc:	4e26      	ldr	r6, [pc, #152]	@ (8001498 <prepare_start+0xc8>)
	ILI9341_Draw_Filled_Rectangle_Coord(
 80013fe:	0840      	lsrs	r0, r0, #1
 8001400:	19c2      	adds	r2, r0, r7
 8001402:	1a38      	subs	r0, r7, r0
	platform_position = (RIGHT_BORDER + LEFT_BORDER) / 2;
 8001404:	7037      	strb	r7, [r6, #0]
	ILI9341_Draw_Filled_Rectangle_Coord(
 8001406:	33aa      	adds	r3, #170	@ 0xaa
 8001408:	b289      	uxth	r1, r1
 800140a:	b280      	uxth	r0, r0
 800140c:	9500      	str	r5, [sp, #0]
 800140e:	f7ff f84e 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
			platform_position - platform_width / 2,
			PLATFORM_LINE - 100 - platform_height / 2,
			platform_position + platform_width / 2,
			PLATFORM_LINE - 100 + platform_height / 2, BLACK);
	ILI9341_Draw_Filled_Rectangle_Coord(
 8001412:	7821      	ldrb	r1, [r4, #0]
				platform_position - platform_width / 2 + PLATFORM_LINE_THICKNESS,
 8001414:	9b03      	ldr	r3, [sp, #12]
	ILI9341_Draw_Filled_Rectangle_Coord(
 8001416:	0849      	lsrs	r1, r1, #1
 8001418:	24ab      	movs	r4, #171	@ 0xab
				platform_position - platform_width / 2 + PLATFORM_LINE_THICKNESS,
 800141a:	7830      	ldrb	r0, [r6, #0]
 800141c:	781e      	ldrb	r6, [r3, #0]
	ILI9341_Draw_Filled_Rectangle_Coord(
 800141e:	000b      	movs	r3, r1
				platform_position - platform_width / 2 + PLATFORM_LINE_THICKNESS,
 8001420:	0876      	lsrs	r6, r6, #1
	ILI9341_Draw_Filled_Rectangle_Coord(
 8001422:	1e42      	subs	r2, r0, #1
 8001424:	3001      	adds	r0, #1
 8001426:	18b2      	adds	r2, r6, r2
 8001428:	1b80      	subs	r0, r0, r6
 800142a:	4e1c      	ldr	r6, [pc, #112]	@ (800149c <prepare_start+0xcc>)
 800142c:	1a61      	subs	r1, r4, r1
 800142e:	33a9      	adds	r3, #169	@ 0xa9
 8001430:	b292      	uxth	r2, r2
 8001432:	b289      	uxth	r1, r1
 8001434:	b280      	uxth	r0, r0
 8001436:	9600      	str	r6, [sp, #0]
 8001438:	f7ff f839 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
				PLATFORM_LINE - 100 - platform_height / 2 + PLATFORM_LINE_THICKNESS,
				platform_position + platform_width / 2 - PLATFORM_LINE_THICKNESS,
				PLATFORM_LINE - 100 + platform_height / 2- PLATFORM_LINE_THICKNESS , DARKGREY);

	// Draw ball
	ILI9341_Draw_Filled_Circle(120, 160, ball_size, RED);
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <prepare_start+0xd0>)
 800143e:	0038      	movs	r0, r7
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	23f8      	movs	r3, #248	@ 0xf8
 8001444:	21a0      	movs	r1, #160	@ 0xa0
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	f7fe ffde 	bl	8000408 <ILI9341_Draw_Filled_Circle>

	// Draw title message
	if(title[0] == 'G'){
 800144c:	9b02      	ldr	r3, [sp, #8]
 800144e:	2604      	movs	r6, #4
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	3f59      	subs	r7, #89	@ 0x59
 8001454:	2b47      	cmp	r3, #71	@ 0x47
 8001456:	d113      	bne.n	8001480 <prepare_start+0xb0>
		ILI9341_Draw_Text("GAME", 70, 30, BLACK, 4, BLUE);
 8001458:	002b      	movs	r3, r5
 800145a:	221e      	movs	r2, #30
 800145c:	2146      	movs	r1, #70	@ 0x46
 800145e:	4811      	ldr	r0, [pc, #68]	@ (80014a4 <prepare_start+0xd4>)
 8001460:	9701      	str	r7, [sp, #4]
 8001462:	9600      	str	r6, [sp, #0]
 8001464:	f7ff f88a 	bl	800057c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OVER", 70, 70, BLACK, 4, BLUE);
 8001468:	2246      	movs	r2, #70	@ 0x46
 800146a:	002b      	movs	r3, r5
 800146c:	0011      	movs	r1, r2
 800146e:	480e      	ldr	r0, [pc, #56]	@ (80014a8 <prepare_start+0xd8>)
 8001470:	9701      	str	r7, [sp, #4]
 8001472:	9600      	str	r6, [sp, #0]
	}
	else{
	ILI9341_Draw_Text(title, 25, 40, BLACK, 4, BLUE);
 8001474:	f7ff f882 	bl	800057c <ILI9341_Draw_Text>
	}
	// Draw start message
	draw_msg();
 8001478:	f7ff ff8a 	bl	8001390 <draw_msg>
}
 800147c:	b005      	add	sp, #20
 800147e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ILI9341_Draw_Text(title, 25, 40, BLACK, 4, BLUE);
 8001480:	002b      	movs	r3, r5
 8001482:	2228      	movs	r2, #40	@ 0x28
 8001484:	2119      	movs	r1, #25
 8001486:	9802      	ldr	r0, [sp, #8]
 8001488:	9701      	str	r7, [sp, #4]
 800148a:	9600      	str	r6, [sp, #0]
 800148c:	e7f2      	b.n	8001474 <prepare_start+0xa4>
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	2000001b 	.word	0x2000001b
 8001494:	2000001c 	.word	0x2000001c
 8001498:	2000001d 	.word	0x2000001d
 800149c:	00007bef 	.word	0x00007bef
 80014a0:	2000001e 	.word	0x2000001e
 80014a4:	08003e9d 	.word	0x08003e9d
 80014a8:	08003eb9 	.word	0x08003eb9

080014ac <prepare_game>:


void prepare_game(){
 80014ac:	b510      	push	{r4, lr}
	// Delete title
	ILI9341_Fill_Screen(BLUE);
 80014ae:	201f      	movs	r0, #31
 80014b0:	f7ff fa96 	bl	80009e0 <ILI9341_Fill_Screen>

	// Draw borders
	draw_game_borders();
 80014b4:	f7ff fd3a 	bl	8000f2c <draw_game_borders>

	// Start ball
	start_ball();
 80014b8:	f7ff fce8 	bl	8000e8c <start_ball>

	// Start platform
	start_platform();
 80014bc:	f7ff fd68 	bl	8000f90 <start_platform>
}
 80014c0:	bd10      	pop	{r4, pc}

080014c2 <draw_min_rectangles>:
	// Print minute and hour separator
	ILI9341_Draw_Char(':', 150, 70, WHITE, 8, BLACK);
	raise_flags(current_time);
}

void draw_min_rectangles(bool draw){
 80014c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Draw rectangle below and above minutes
	ILI9341_Draw_Filled_Rectangle_Coord(170, 140, 280, 145, draw ? WHITE : BLACK);
 80014c4:	258c      	movs	r5, #140	@ 0x8c
 80014c6:	4244      	negs	r4, r0
 80014c8:	006d      	lsls	r5, r5, #1
 80014ca:	b2a4      	uxth	r4, r4
 80014cc:	002a      	movs	r2, r5
 80014ce:	2391      	movs	r3, #145	@ 0x91
 80014d0:	218c      	movs	r1, #140	@ 0x8c
 80014d2:	20aa      	movs	r0, #170	@ 0xaa
 80014d4:	9400      	str	r4, [sp, #0]
 80014d6:	f7fe ffea 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(170, 65, 280, 70, draw ? WHITE : BLACK);
 80014da:	002a      	movs	r2, r5
 80014dc:	2346      	movs	r3, #70	@ 0x46
 80014de:	2141      	movs	r1, #65	@ 0x41
 80014e0:	20aa      	movs	r0, #170	@ 0xaa
 80014e2:	9400      	str	r4, [sp, #0]
 80014e4:	f7fe ffe3 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
}
 80014e8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080014ea <compare_times>:

int compare_times(struct time * time1, struct time * time2){
 80014ea:	0002      	movs	r2, r0
 80014ec:	2306      	movs	r3, #6
	bool are_equal = 1;
 80014ee:	2001      	movs	r0, #1
int compare_times(struct time * time1, struct time * time2){
 80014f0:	b530      	push	{r4, r5, lr}
	for(uint8_t i = 0; i < 6; i++){
		if(time1->values[i] != time2->values[i]){
 80014f2:	56d5      	ldrsb	r5, [r2, r3]
 80014f4:	56cc      	ldrsb	r4, [r1, r3]
 80014f6:	42a5      	cmp	r5, r4
 80014f8:	d000      	beq.n	80014fc <compare_times+0x12>
			are_equal = 0;
 80014fa:	2000      	movs	r0, #0
	for(uint8_t i = 0; i < 6; i++){
 80014fc:	3301      	adds	r3, #1
 80014fe:	2b0c      	cmp	r3, #12
 8001500:	d1f7      	bne.n	80014f2 <compare_times+0x8>
		}
	}
	return are_equal;
}
 8001502:	bd30      	pop	{r4, r5, pc}

08001504 <draw_hour_rectangles>:

void draw_hour_rectangles(bool draw){
	// Draw new rectangles above hours
	ILI9341_Draw_Filled_Rectangle_Coord(30, 140, 140, 145, draw ? WHITE : BLACK);
 8001504:	228c      	movs	r2, #140	@ 0x8c
void draw_hour_rectangles(bool draw){
 8001506:	b513      	push	{r0, r1, r4, lr}
	ILI9341_Draw_Filled_Rectangle_Coord(30, 140, 140, 145, draw ? WHITE : BLACK);
 8001508:	4244      	negs	r4, r0
 800150a:	b2a4      	uxth	r4, r4
 800150c:	0011      	movs	r1, r2
 800150e:	2391      	movs	r3, #145	@ 0x91
 8001510:	201e      	movs	r0, #30
 8001512:	9400      	str	r4, [sp, #0]
 8001514:	f7fe ffcb 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(30, 65, 140, 70, draw ? WHITE : BLACK);
 8001518:	2346      	movs	r3, #70	@ 0x46
 800151a:	228c      	movs	r2, #140	@ 0x8c
 800151c:	2141      	movs	r1, #65	@ 0x41
 800151e:	201e      	movs	r0, #30
 8001520:	9400      	str	r4, [sp, #0]
 8001522:	f7fe ffc4 	bl	80004ae <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8001526:	bd13      	pop	{r0, r1, r4, pc}

08001528 <update_watch>:


uint8_t positions[3][6] = {{250, 210, 230, 170, 90, 30}, {170, 170, 60, 60, 60, 60}, {7,7,10,10,10,10}};
void update_watch(struct time* current_time){
 8001528:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800152a:	0005      	movs	r5, r0
 800152c:	24fc      	movs	r4, #252	@ 0xfc
 800152e:	4e17      	ldr	r6, [pc, #92]	@ (800158c <update_watch+0x64>)
	for(uint8_t i = 0; i < 6; i++){
		if(current_time->change_flag[i]){
 8001530:	782b      	ldrb	r3, [r5, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d018      	beq.n	8001568 <update_watch+0x40>
			ILI9341_Draw_Char(current_time->values[i] + '0', positions[0][i], positions[1][i], WHITE, positions[2][i], BLACK);
 8001536:	2300      	movs	r3, #0
 8001538:	79a8      	ldrb	r0, [r5, #6]
 800153a:	79b2      	ldrb	r2, [r6, #6]
 800153c:	7831      	ldrb	r1, [r6, #0]
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	7b33      	ldrb	r3, [r6, #12]
 8001542:	3030      	adds	r0, #48	@ 0x30
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	b2c0      	uxtb	r0, r0
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <update_watch+0x68>)
 800154a:	f7fe ffc9 	bl	80004e0 <ILI9341_Draw_Char>
			if((i == 2 || i == 3) && current_clock_state != NORMAL)
 800154e:	1ca3      	adds	r3, r4, #2
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d80f      	bhi.n	8001576 <update_watch+0x4e>
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <update_watch+0x6c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <update_watch+0x3c>
				draw_min_rectangles(1);
 800155e:	2001      	movs	r0, #1
 8001560:	f7ff ffaf 	bl	80014c2 <draw_min_rectangles>
			else if((i == 4 || i == 5) && current_clock_state != NORMAL)
				draw_hour_rectangles(1);
			current_time->change_flag[i] = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	702b      	strb	r3, [r5, #0]
	for(uint8_t i = 0; i < 6; i++){
 8001568:	3401      	adds	r4, #1
 800156a:	b2e4      	uxtb	r4, r4
 800156c:	3501      	adds	r5, #1
 800156e:	3601      	adds	r6, #1
 8001570:	2c02      	cmp	r4, #2
 8001572:	d1dd      	bne.n	8001530 <update_watch+0x8>
		}
	}
}
 8001574:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
			else if((i == 4 || i == 5) && current_clock_state != NORMAL)
 8001576:	2c01      	cmp	r4, #1
 8001578:	d8f4      	bhi.n	8001564 <update_watch+0x3c>
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <update_watch+0x6c>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <update_watch+0x3c>
				draw_hour_rectangles(1);
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff ffbe 	bl	8001504 <draw_hour_rectangles>
 8001588:	e7ec      	b.n	8001564 <update_watch+0x3c>
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	20000009 	.word	0x20000009
 8001590:	0000ffff 	.word	0x0000ffff
 8001594:	200000cb 	.word	0x200000cb

08001598 <raise_flags>:

void raise_flags(struct time* current_time){
	for(uint8_t i = 0; i < 6; i++){
		current_time->change_flag[i] = 1;
 8001598:	2301      	movs	r3, #1
 800159a:	7003      	strb	r3, [r0, #0]
 800159c:	7043      	strb	r3, [r0, #1]
 800159e:	7083      	strb	r3, [r0, #2]
 80015a0:	70c3      	strb	r3, [r0, #3]
 80015a2:	7103      	strb	r3, [r0, #4]
 80015a4:	7143      	strb	r3, [r0, #5]
	}
}
 80015a6:	4770      	bx	lr

080015a8 <prepare_watch>:
void prepare_watch(struct time * current_time){
 80015a8:	b513      	push	{r0, r1, r4, lr}
 80015aa:	0004      	movs	r4, r0
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f7ff f88d 	bl	80006cc <ILI9341_Set_Rotation>
	ILI9341_Fill_Screen(BLACK);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff fa14 	bl	80009e0 <ILI9341_Fill_Screen>
	ILI9341_Draw_Char(':', 150, 70, WHITE, 8, BLACK);
 80015b8:	2300      	movs	r3, #0
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	3308      	adds	r3, #8
 80015be:	2246      	movs	r2, #70	@ 0x46
 80015c0:	2196      	movs	r1, #150	@ 0x96
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	203a      	movs	r0, #58	@ 0x3a
 80015c6:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <prepare_watch+0x2c>)
 80015c8:	f7fe ff8a 	bl	80004e0 <ILI9341_Draw_Char>
	raise_flags(current_time);
 80015cc:	0020      	movs	r0, r4
 80015ce:	f7ff ffe3 	bl	8001598 <raise_flags>
}
 80015d2:	bd13      	pop	{r0, r1, r4, pc}
 80015d4:	0000ffff 	.word	0x0000ffff

080015d8 <increase_time>:

uint8_t time_limits[5] = {10, 6, 10, 6, 10};
void increase_time(struct time *current_time, int position){
 80015d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Increase the position
	current_time->values[position*2]++;
	current_time->change_flag[position*2] = 1;
 80015da:	2701      	movs	r7, #1
void increase_time(struct time *current_time, int position){
 80015dc:	0004      	movs	r4, r0
	current_time->values[position*2]++;
 80015de:	0049      	lsls	r1, r1, #1
 80015e0:	1842      	adds	r2, r0, r1
 80015e2:	7993      	ldrb	r3, [r2, #6]
 80015e4:	4e18      	ldr	r6, [pc, #96]	@ (8001648 <increase_time+0x70>)
 80015e6:	3301      	adds	r3, #1
 80015e8:	7193      	strb	r3, [r2, #6]
	current_time->change_flag[position*2] = 1;
 80015ea:	1d83      	adds	r3, r0, #6
 80015ec:	5447      	strb	r7, [r0, r1]

	for(uint8_t i = 0; i < 5; i++){
 80015ee:	19c5      	adds	r5, r0, r7
 80015f0:	9301      	str	r3, [sp, #4]
		if(current_time->values[i] == time_limits[i]){
 80015f2:	2205      	movs	r2, #5
 80015f4:	7833      	ldrb	r3, [r6, #0]
 80015f6:	56aa      	ldrsb	r2, [r5, r2]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d107      	bne.n	800160c <increase_time+0x34>
			current_time->values[i] = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	716b      	strb	r3, [r5, #5]
			current_time->values[i+1]++;
 8001600:	79ab      	ldrb	r3, [r5, #6]
			current_time->change_flag[i+1] = 1;
 8001602:	702f      	strb	r7, [r5, #0]
			current_time->values[i+1]++;
 8001604:	3301      	adds	r3, #1
 8001606:	71ab      	strb	r3, [r5, #6]
			process_battery();
 8001608:	f7ff fb18 	bl	8000c3c <process_battery>
	for(uint8_t i = 0; i < 5; i++){
 800160c:	9b01      	ldr	r3, [sp, #4]
 800160e:	3501      	adds	r5, #1
 8001610:	3601      	adds	r6, #1
 8001612:	429d      	cmp	r5, r3
 8001614:	d1ed      	bne.n	80015f2 <increase_time+0x1a>
		}
	}
	if(current_time->values[5] == 2 && current_time->values[4]== 4){
 8001616:	230b      	movs	r3, #11
 8001618:	56e3      	ldrsb	r3, [r4, r3]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d10d      	bne.n	800163a <increase_time+0x62>
 800161e:	230a      	movs	r3, #10
 8001620:	56e3      	ldrsb	r3, [r4, r3]
 8001622:	2b04      	cmp	r3, #4
 8001624:	d109      	bne.n	800163a <increase_time+0x62>
	  for(uint8_t i = 0; i < 6; i++){
		  current_time->values[i] = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	71a3      	strb	r3, [r4, #6]
 800162a:	71e3      	strb	r3, [r4, #7]
 800162c:	7223      	strb	r3, [r4, #8]
 800162e:	7263      	strb	r3, [r4, #9]
 8001630:	72a3      	strb	r3, [r4, #10]
 8001632:	72e3      	strb	r3, [r4, #11]
	  }
	  current_time->change_flag[4] = 1;
 8001634:	3301      	adds	r3, #1
 8001636:	7123      	strb	r3, [r4, #4]
	  current_time->change_flag[5] = 1;
 8001638:	7163      	strb	r3, [r4, #5]
	}
	HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 800163a:	2090      	movs	r0, #144	@ 0x90
 800163c:	2110      	movs	r1, #16
 800163e:	05c0      	lsls	r0, r0, #23
 8001640:	f001 f96a 	bl	8002918 <HAL_GPIO_TogglePin>
}
 8001644:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	20000004 	.word	0x20000004

0800164c <decrease_time>:

void decrease_time(struct time* current_time, volatile int position){
 800164c:	b082      	sub	sp, #8
 800164e:	9101      	str	r1, [sp, #4]
	current_time->values[position*2]--;
 8001650:	9b01      	ldr	r3, [sp, #4]
 8001652:	1d81      	adds	r1, r0, #6
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	18c3      	adds	r3, r0, r3
 8001658:	799a      	ldrb	r2, [r3, #6]
 800165a:	3a01      	subs	r2, #1
 800165c:	719a      	strb	r2, [r3, #6]
	current_time->change_flag[position*2] = 1;
 800165e:	2201      	movs	r2, #1
 8001660:	9b01      	ldr	r3, [sp, #4]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	541a      	strb	r2, [r3, r0]
	for(uint8_t i = 0; i < 3; i++){
		if(current_time->values[i*2] == -1){
 8001666:	2306      	movs	r3, #6
 8001668:	56c3      	ldrsb	r3, [r0, r3]
 800166a:	3301      	adds	r3, #1
 800166c:	d108      	bne.n	8001680 <decrease_time+0x34>
			current_time->values[i*2+1]--;
 800166e:	79c3      	ldrb	r3, [r0, #7]
			current_time->change_flag[i*2+1] = 1;
 8001670:	7042      	strb	r2, [r0, #1]
			current_time->values[i*2+1]--;
 8001672:	3b01      	subs	r3, #1
 8001674:	b25b      	sxtb	r3, r3
 8001676:	71c3      	strb	r3, [r0, #7]
			current_time->values[i*2] = 9;
			if(current_time->values[i*2+1] == -1){
 8001678:	3301      	adds	r3, #1
 800167a:	d006      	beq.n	800168a <decrease_time+0x3e>
			current_time->values[i*2] = 9;
 800167c:	2309      	movs	r3, #9
 800167e:	7183      	strb	r3, [r0, #6]
	for(uint8_t i = 0; i < 3; i++){
 8001680:	3002      	adds	r0, #2
 8001682:	4288      	cmp	r0, r1
 8001684:	d1ef      	bne.n	8001666 <decrease_time+0x1a>
				current_time->change_flag[i*2] = 0;
				current_time->change_flag[i*2+1] = 0;
			}
		}
	}
}
 8001686:	b002      	add	sp, #8
 8001688:	4770      	bx	lr
				current_time->values[i*2] = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	7183      	strb	r3, [r0, #6]
				current_time->values[i*2+1] = 0;
 800168e:	71c3      	strb	r3, [r0, #7]
				current_time->change_flag[i*2] = 0;
 8001690:	7003      	strb	r3, [r0, #0]
				current_time->change_flag[i*2+1] = 0;
 8001692:	7043      	strb	r3, [r0, #1]
 8001694:	e7f4      	b.n	8001680 <decrease_time+0x34>
	...

08001698 <small_buzz>:

void small_buzz(){
 8001698:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA, EN_Pin, GPIO_PIN_SET);
 800169a:	2680      	movs	r6, #128	@ 0x80
 800169c:	2590      	movs	r5, #144	@ 0x90
 800169e:	00f6      	lsls	r6, r6, #3
 80016a0:	05ed      	lsls	r5, r5, #23
 80016a2:	2201      	movs	r2, #1
 80016a4:	0031      	movs	r1, r6
 80016a6:	0028      	movs	r0, r5
 80016a8:	f001 f930 	bl	800290c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80016ac:	4c08      	ldr	r4, [pc, #32]	@ (80016d0 <small_buzz+0x38>)
 80016ae:	2104      	movs	r1, #4
 80016b0:	0020      	movs	r0, r4
 80016b2:	f002 f9d3 	bl	8003a5c <HAL_TIM_PWM_Start>
	HAL_Delay(50);
 80016b6:	2032      	movs	r0, #50	@ 0x32
 80016b8:	f000 fe12 	bl	80022e0 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80016bc:	2104      	movs	r1, #4
 80016be:	0020      	movs	r0, r4
 80016c0:	f002 fa16 	bl	8003af0 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, GPIO_PIN_RESET);
 80016c4:	0031      	movs	r1, r6
 80016c6:	0028      	movs	r0, r5
 80016c8:	2200      	movs	r2, #0
 80016ca:	f001 f91f 	bl	800290c <HAL_GPIO_WritePin>
}
 80016ce:	bd70      	pop	{r4, r5, r6, pc}
 80016d0:	20000208 	.word	0x20000208

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d6:	2510      	movs	r5, #16
{
 80016d8:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	222c      	movs	r2, #44	@ 0x2c
 80016dc:	2100      	movs	r1, #0
 80016de:	a805      	add	r0, sp, #20
 80016e0:	f002 fa66 	bl	8003bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	002a      	movs	r2, r5
 80016e6:	2100      	movs	r1, #0
 80016e8:	4668      	mov	r0, sp
 80016ea:	f002 fa61 	bl	8003bb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80016ee:	2312      	movs	r3, #18
 80016f0:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016f2:	23e0      	movs	r3, #224	@ 0xe0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f4:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f6:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80016f8:	950a      	str	r5, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016fa:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fc:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fe:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001700:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001702:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001704:	950c      	str	r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001706:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001708:	f001 f90e 	bl	8002928 <HAL_RCC_OscConfig>
 800170c:	2800      	cmp	r0, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001712:	e7fe      	b.n	8001712 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001714:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001716:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001718:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800171a:	0021      	movs	r1, r4
 800171c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001720:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001722:	f001 fb25 	bl	8002d70 <HAL_RCC_ClockConfig>
 8001726:	2800      	cmp	r0, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0x5a>
 800172a:	b672      	cpsid	i
  while (1)
 800172c:	e7fe      	b.n	800172c <SystemClock_Config+0x58>
}
 800172e:	b011      	add	sp, #68	@ 0x44
 8001730:	bd30      	pop	{r4, r5, pc}
	...

08001734 <main>:
{
 8001734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001736:	b09f      	sub	sp, #124	@ 0x7c
  HAL_Init();
 8001738:	f000 fdb0 	bl	800229c <HAL_Init>
  SystemClock_Config();
 800173c:	f7ff ffca 	bl	80016d4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	2214      	movs	r2, #20
 8001742:	2100      	movs	r1, #0
 8001744:	a816      	add	r0, sp, #88	@ 0x58
 8001746:	f002 fa33 	bl	8003bb0 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800174a:	2180      	movs	r1, #128	@ 0x80
 800174c:	4bb1      	ldr	r3, [pc, #708]	@ (8001a14 <main+0x2e0>)
 800174e:	03c9      	lsls	r1, r1, #15
 8001750:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|CS_Pin|EN_Pin, GPIO_PIN_RESET);
 8001752:	258b      	movs	r5, #139	@ 0x8b
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001754:	430a      	orrs	r2, r1
 8001756:	615a      	str	r2, [r3, #20]
 8001758:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|CS_Pin|EN_Pin, GPIO_PIN_RESET);
 800175a:	2090      	movs	r0, #144	@ 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800175c:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001760:	9206      	str	r2, [sp, #24]
 8001762:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	0289      	lsls	r1, r1, #10
 8001768:	430a      	orrs	r2, r1
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2180      	movs	r1, #128	@ 0x80
  GPIO_InitStruct.Pin = ON_Pin;
 8001774:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	9207      	str	r2, [sp, #28]
 8001778:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	695a      	ldr	r2, [r3, #20]
 800177c:	02c9      	lsls	r1, r1, #11
 800177e:	430a      	orrs	r2, r1
 8001780:	615a      	str	r2, [r3, #20]
 8001782:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|CS_Pin|EN_Pin, GPIO_PIN_RESET);
 8001784:	00ed      	lsls	r5, r5, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|CS_Pin|EN_Pin, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	0029      	movs	r1, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|CS_Pin|EN_Pin, GPIO_PIN_RESET);
 800178e:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001790:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|CS_Pin|EN_Pin, GPIO_PIN_RESET);
 8001792:	f001 f8bb 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2102      	movs	r1, #2
 800179a:	489f      	ldr	r0, [pc, #636]	@ (8001a18 <main+0x2e4>)
 800179c:	f001 f8b6 	bl	800290c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(ON_GPIO_Port, &GPIO_InitStruct);
 80017a0:	489e      	ldr	r0, [pc, #632]	@ (8001a1c <main+0x2e8>)
 80017a2:	a916      	add	r1, sp, #88	@ 0x58
  GPIO_InitStruct.Pin = ON_Pin;
 80017a4:	9616      	str	r6, [sp, #88]	@ 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a6:	9417      	str	r4, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	9418      	str	r4, [sp, #96]	@ 0x60
  HAL_GPIO_Init(ON_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f000 fff1 	bl	8002790 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80017b0:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	a916      	add	r1, sp, #88	@ 0x58
 80017b4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80017b6:	9316      	str	r3, [sp, #88]	@ 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b8:	9417      	str	r4, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	9418      	str	r4, [sp, #96]	@ 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f000 ffe8 	bl	8002790 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	2090      	movs	r0, #144	@ 0x90
 80017c2:	a916      	add	r1, sp, #88	@ 0x58
 80017c4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = RST_Pin|LED_Pin|CS_Pin|EN_Pin;
 80017c6:	9516      	str	r5, [sp, #88]	@ 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	9617      	str	r6, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	9418      	str	r4, [sp, #96]	@ 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	9419      	str	r4, [sp, #100]	@ 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f000 ffdf 	bl	8002790 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DC_Pin;
 80017d2:	2302      	movs	r3, #2
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80017d4:	4890      	ldr	r0, [pc, #576]	@ (8001a18 <main+0x2e4>)
 80017d6:	a916      	add	r1, sp, #88	@ 0x58
  GPIO_InitStruct.Pin = DC_Pin;
 80017d8:	9316      	str	r3, [sp, #88]	@ 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	9617      	str	r6, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	9418      	str	r4, [sp, #96]	@ 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	9419      	str	r4, [sp, #100]	@ 0x64
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f000 ffd6 	bl	8002790 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 80017e4:	488e      	ldr	r0, [pc, #568]	@ (8001a20 <main+0x2ec>)
 80017e6:	4b8f      	ldr	r3, [pc, #572]	@ (8001a24 <main+0x2f0>)
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e8:	6104      	str	r4, [r0, #16]
  hspi1.Instance = SPI1;
 80017ea:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ec:	2382      	movs	r3, #130	@ 0x82
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80017f2:	2380      	movs	r3, #128	@ 0x80
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f8:	23e0      	movs	r3, #224	@ 0xe0
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017fe:	2380      	movs	r3, #128	@ 0x80
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8001804:	3bfa      	subs	r3, #250	@ 0xfa
 8001806:	3bff      	subs	r3, #255	@ 0xff
 8001808:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800180a:	199b      	adds	r3, r3, r6
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800180c:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800180e:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001810:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001812:	6244      	str	r4, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001814:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001816:	6304      	str	r4, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001818:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800181a:	f001 fc19 	bl	8003050 <HAL_SPI_Init>
 800181e:	0005      	movs	r5, r0
 8001820:	42a0      	cmp	r0, r4
 8001822:	d001      	beq.n	8001828 <main+0xf4>
 8001824:	b672      	cpsid	i
  while (1)
 8001826:	e7fe      	b.n	8001826 <main+0xf2>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001828:	0001      	movs	r1, r0
 800182a:	220c      	movs	r2, #12
 800182c:	a816      	add	r0, sp, #88	@ 0x58
 800182e:	f002 f9bf 	bl	8003bb0 <memset>
  hadc.Instance = ADC1;
 8001832:	4c7d      	ldr	r4, [pc, #500]	@ (8001a28 <main+0x2f4>)
 8001834:	4b7d      	ldr	r3, [pc, #500]	@ (8001a2c <main+0x2f8>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001836:	2704      	movs	r7, #4
  hadc.Instance = ADC1;
 8001838:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800183a:	23c2      	movs	r3, #194	@ 0xc2
 800183c:	33ff      	adds	r3, #255	@ 0xff
 800183e:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001840:	0020      	movs	r0, r4
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001842:	1d63      	adds	r3, r4, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001844:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001846:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001848:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800184a:	6126      	str	r6, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800184c:	6167      	str	r7, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800184e:	61a5      	str	r5, [r4, #24]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001850:	6225      	str	r5, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001852:	77dd      	strb	r5, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001854:	62a6      	str	r6, [r4, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001856:	f000 fda5 	bl	80023a4 <HAL_ADC_Init>
 800185a:	2800      	cmp	r0, #0
 800185c:	d001      	beq.n	8001862 <main+0x12e>
 800185e:	b672      	cpsid	i
  while (1)
 8001860:	e7fe      	b.n	8001860 <main+0x12c>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001862:	2380      	movs	r3, #128	@ 0x80
 8001864:	015b      	lsls	r3, r3, #5
 8001866:	9317      	str	r3, [sp, #92]	@ 0x5c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001868:	2380      	movs	r3, #128	@ 0x80
  sConfig.Channel = ADC_CHANNEL_0;
 800186a:	9016      	str	r0, [sp, #88]	@ 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800186c:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800186e:	0020      	movs	r0, r4
 8001870:	a916      	add	r1, sp, #88	@ 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001872:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001874:	f000 fecc 	bl	8002610 <HAL_ADC_ConfigChannel>
 8001878:	1e04      	subs	r4, r0, #0
 800187a:	d001      	beq.n	8001880 <main+0x14c>
 800187c:	b672      	cpsid	i
  while (1)
 800187e:	e7fe      	b.n	800187e <main+0x14a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001880:	0001      	movs	r1, r0
 8001882:	2210      	movs	r2, #16
 8001884:	a80b      	add	r0, sp, #44	@ 0x2c
 8001886:	f002 f993 	bl	8003bb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188a:	2208      	movs	r2, #8
 800188c:	0021      	movs	r1, r4
 800188e:	a809      	add	r0, sp, #36	@ 0x24
 8001890:	f002 f98e 	bl	8003bb0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001894:	221c      	movs	r2, #28
 8001896:	0021      	movs	r1, r4
 8001898:	a80f      	add	r0, sp, #60	@ 0x3c
 800189a:	f002 f989 	bl	8003bb0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800189e:	2220      	movs	r2, #32
 80018a0:	0021      	movs	r1, r4
 80018a2:	a816      	add	r0, sp, #88	@ 0x58
 80018a4:	f002 f984 	bl	8003bb0 <memset>
  htim1.Instance = TIM1;
 80018a8:	4e61      	ldr	r6, [pc, #388]	@ (8001a30 <main+0x2fc>)
 80018aa:	4b62      	ldr	r3, [pc, #392]	@ (8001a34 <main+0x300>)
  htim1.Init.Prescaler = 3199;
 80018ac:	4d62      	ldr	r5, [pc, #392]	@ (8001a38 <main+0x304>)
  htim1.Instance = TIM1;
 80018ae:	6033      	str	r3, [r6, #0]
  htim1.Init.Period = 10;
 80018b0:	230a      	movs	r3, #10
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b2:	0030      	movs	r0, r6
  htim1.Init.Prescaler = 3199;
 80018b4:	6075      	str	r5, [r6, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b6:	60b4      	str	r4, [r6, #8]
  htim1.Init.Period = 10;
 80018b8:	60f3      	str	r3, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 80018bc:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018be:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018c0:	f001 feda 	bl	8003678 <HAL_TIM_Base_Init>
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d001      	beq.n	80018cc <main+0x198>
 80018c8:	b672      	cpsid	i
  while (1)
 80018ca:	e7fe      	b.n	80018ca <main+0x196>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018cc:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018ce:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d0:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018d2:	a90b      	add	r1, sp, #44	@ 0x2c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d4:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018d6:	f001 ffc7 	bl	8003868 <HAL_TIM_ConfigClockSource>
 80018da:	2800      	cmp	r0, #0
 80018dc:	d001      	beq.n	80018e2 <main+0x1ae>
 80018de:	b672      	cpsid	i
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <main+0x1ac>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018e2:	0030      	movs	r0, r6
 80018e4:	f001 fef0 	bl	80036c8 <HAL_TIM_PWM_Init>
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d001      	beq.n	80018f0 <main+0x1bc>
 80018ec:	b672      	cpsid	i
  while (1)
 80018ee:	e7fe      	b.n	80018ee <main+0x1ba>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f0:	9009      	str	r0, [sp, #36]	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f4:	a909      	add	r1, sp, #36	@ 0x24
 80018f6:	0030      	movs	r0, r6
 80018f8:	f002 f8fe 	bl	8003af8 <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d001      	beq.n	8001904 <main+0x1d0>
 8001900:	b672      	cpsid	i
  while (1)
 8001902:	e7fe      	b.n	8001902 <main+0x1ce>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001904:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001906:	9011      	str	r0, [sp, #68]	@ 0x44
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001908:	9012      	str	r0, [sp, #72]	@ 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190a:	9013      	str	r0, [sp, #76]	@ 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800190c:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800190e:	9015      	str	r0, [sp, #84]	@ 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001910:	003a      	movs	r2, r7
 8001912:	0030      	movs	r0, r6
 8001914:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001916:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.Pulse = 4;
 8001918:	9710      	str	r7, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800191a:	f001 ff39 	bl	8003790 <HAL_TIM_PWM_ConfigChannel>
 800191e:	2800      	cmp	r0, #0
 8001920:	d001      	beq.n	8001926 <main+0x1f2>
 8001922:	b672      	cpsid	i
  while (1)
 8001924:	e7fe      	b.n	8001924 <main+0x1f0>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001926:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001928:	9016      	str	r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800192a:	9017      	str	r0, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800192c:	9018      	str	r0, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.DeadTime = 0;
 800192e:	9019      	str	r0, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001930:	901a      	str	r0, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001932:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001934:	901d      	str	r0, [sp, #116]	@ 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001936:	a916      	add	r1, sp, #88	@ 0x58
 8001938:	0030      	movs	r0, r6
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800193a:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800193c:	f002 f904 	bl	8003b48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001940:	1e04      	subs	r4, r0, #0
 8001942:	d001      	beq.n	8001948 <main+0x214>
 8001944:	b672      	cpsid	i
  while (1)
 8001946:	e7fe      	b.n	8001946 <main+0x212>
  HAL_TIM_MspPostInit(&htim1);
 8001948:	0030      	movs	r0, r6
 800194a:	f000 fbc5 	bl	80020d8 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	2210      	movs	r2, #16
 8001950:	0021      	movs	r1, r4
 8001952:	a816      	add	r0, sp, #88	@ 0x58
 8001954:	f002 f92c 	bl	8003bb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	2208      	movs	r2, #8
 800195a:	0021      	movs	r1, r4
 800195c:	a80f      	add	r0, sp, #60	@ 0x3c
 800195e:	f002 f927 	bl	8003bb0 <memset>
  htim3.Instance = TIM3;
 8001962:	4b36      	ldr	r3, [pc, #216]	@ (8001a3c <main+0x308>)
  htim3.Init.Period = 10000;
 8001964:	4f36      	ldr	r7, [pc, #216]	@ (8001a40 <main+0x30c>)
  htim3.Instance = TIM3;
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	9a01      	ldr	r2, [sp, #4]
 800196a:	4b36      	ldr	r3, [pc, #216]	@ (8001a44 <main+0x310>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800196c:	0010      	movs	r0, r2
  htim3.Instance = TIM3;
 800196e:	6013      	str	r3, [r2, #0]
  htim3.Init.Prescaler = 3199;
 8001970:	6055      	str	r5, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001972:	6094      	str	r4, [r2, #8]
  htim3.Init.Period = 10000;
 8001974:	60d7      	str	r7, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001976:	6114      	str	r4, [r2, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001978:	6194      	str	r4, [r2, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800197a:	f001 fe7d 	bl	8003678 <HAL_TIM_Base_Init>
 800197e:	2800      	cmp	r0, #0
 8001980:	d001      	beq.n	8001986 <main+0x252>
 8001982:	b672      	cpsid	i
  while (1)
 8001984:	e7fe      	b.n	8001984 <main+0x250>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001986:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001988:	9801      	ldr	r0, [sp, #4]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800198c:	a916      	add	r1, sp, #88	@ 0x58
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198e:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001990:	f001 ff6a 	bl	8003868 <HAL_TIM_ConfigClockSource>
 8001994:	2800      	cmp	r0, #0
 8001996:	d001      	beq.n	800199c <main+0x268>
 8001998:	b672      	cpsid	i
  while (1)
 800199a:	e7fe      	b.n	800199a <main+0x266>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199c:	900f      	str	r0, [sp, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199e:	9010      	str	r0, [sp, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019a0:	a90f      	add	r1, sp, #60	@ 0x3c
 80019a2:	9801      	ldr	r0, [sp, #4]
 80019a4:	f002 f8a8 	bl	8003af8 <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	2800      	cmp	r0, #0
 80019aa:	d001      	beq.n	80019b0 <main+0x27c>
 80019ac:	b672      	cpsid	i
  while (1)
 80019ae:	e7fe      	b.n	80019ae <main+0x27a>
  htim14.Instance = TIM14;
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <main+0x314>)
 80019b2:	9302      	str	r3, [sp, #8]
 80019b4:	9a02      	ldr	r2, [sp, #8]
 80019b6:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <main+0x318>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	6090      	str	r0, [r2, #8]
  htim14.Instance = TIM14;
 80019ba:	6013      	str	r3, [r2, #0]
  htim14.Init.Period = 10;
 80019bc:	230a      	movs	r3, #10
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019be:	6110      	str	r0, [r2, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c0:	6190      	str	r0, [r2, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80019c2:	0010      	movs	r0, r2
  htim14.Init.Period = 10;
 80019c4:	60d3      	str	r3, [r2, #12]
  htim14.Init.Prescaler = 3199;
 80019c6:	6055      	str	r5, [r2, #4]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80019c8:	f001 fe56 	bl	8003678 <HAL_TIM_Base_Init>
 80019cc:	1e03      	subs	r3, r0, #0
 80019ce:	d001      	beq.n	80019d4 <main+0x2a0>
 80019d0:	b672      	cpsid	i
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <main+0x29e>
  htim16.Instance = TIM16;
 80019d4:	481e      	ldr	r0, [pc, #120]	@ (8001a50 <main+0x31c>)
 80019d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a54 <main+0x320>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d8:	6083      	str	r3, [r0, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019da:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 80019dc:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019de:	6183      	str	r3, [r0, #24]
  htim16.Instance = TIM16;
 80019e0:	6002      	str	r2, [r0, #0]
  htim16.Init.Prescaler = 3199;
 80019e2:	6045      	str	r5, [r0, #4]
  htim16.Init.Period = 10000;
 80019e4:	60c7      	str	r7, [r0, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019e6:	f001 fe47 	bl	8003678 <HAL_TIM_Base_Init>
 80019ea:	1e03      	subs	r3, r0, #0
 80019ec:	d001      	beq.n	80019f2 <main+0x2be>
 80019ee:	b672      	cpsid	i
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <main+0x2bc>
  htim17.Instance = TIM17;
 80019f2:	4819      	ldr	r0, [pc, #100]	@ (8001a58 <main+0x324>)
 80019f4:	4a19      	ldr	r2, [pc, #100]	@ (8001a5c <main+0x328>)
  htim17.Init.Prescaler = 3199;
 80019f6:	6045      	str	r5, [r0, #4]
  htim17.Instance = TIM17;
 80019f8:	6002      	str	r2, [r0, #0]
  htim17.Init.Period = 1000;
 80019fa:	22fa      	movs	r2, #250	@ 0xfa
 80019fc:	0092      	lsls	r2, r2, #2
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fe:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 1000;
 8001a00:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a02:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8001a04:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a06:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001a08:	f001 fe36 	bl	8003678 <HAL_TIM_Base_Init>
 8001a0c:	1e07      	subs	r7, r0, #0
 8001a0e:	d027      	beq.n	8001a60 <main+0x32c>
 8001a10:	b672      	cpsid	i
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <main+0x2de>
 8001a14:	40021000 	.word	0x40021000
 8001a18:	48000400 	.word	0x48000400
 8001a1c:	48001400 	.word	0x48001400
 8001a20:	20000250 	.word	0x20000250
 8001a24:	40013000 	.word	0x40013000
 8001a28:	200002b4 	.word	0x200002b4
 8001a2c:	40012400 	.word	0x40012400
 8001a30:	20000208 	.word	0x20000208
 8001a34:	40012c00 	.word	0x40012c00
 8001a38:	00000c7f 	.word	0x00000c7f
 8001a3c:	200001c0 	.word	0x200001c0
 8001a40:	00002710 	.word	0x00002710
 8001a44:	40000400 	.word	0x40000400
 8001a48:	20000178 	.word	0x20000178
 8001a4c:	40002000 	.word	0x40002000
 8001a50:	20000130 	.word	0x20000130
 8001a54:	40014400 	.word	0x40014400
 8001a58:	200000e8 	.word	0x200000e8
 8001a5c:	40014800 	.word	0x40014800
  ILI9341_Init();//initial driver setup to drive ili9341
 8001a60:	f7fe fe66 	bl	8000730 <ILI9341_Init>
  HAL_TIM_Base_Start_IT(&htim3); // Start the clock timer
 8001a64:	9801      	ldr	r0, [sp, #4]
 8001a66:	f001 fcdd 	bl	8003424 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14); // Start the debouncing timer
 8001a6a:	9802      	ldr	r0, [sp, #8]
 8001a6c:	f001 fcda 	bl	8003424 <HAL_TIM_Base_Start_IT>
  current_main_state = WATCH;
 8001a70:	4bd5      	ldr	r3, [pc, #852]	@ (8001dc8 <main+0x694>)
  prepare_watch(&current_time);
 8001a72:	48d6      	ldr	r0, [pc, #856]	@ (8001dcc <main+0x698>)
  current_main_state = WATCH;
 8001a74:	701f      	strb	r7, [r3, #0]
  current_clock_state = NORMAL;
 8001a76:	4bd6      	ldr	r3, [pc, #856]	@ (8001dd0 <main+0x69c>)
 8001a78:	701f      	strb	r7, [r3, #0]
  current_set_state = SET_MINUTES;
 8001a7a:	4bd6      	ldr	r3, [pc, #856]	@ (8001dd4 <main+0x6a0>)
 8001a7c:	701f      	strb	r7, [r3, #0]
  prepare_watch(&current_time);
 8001a7e:	f7ff fd93 	bl	80015a8 <prepare_watch>
  process_battery();
 8001a82:	f7ff f8db 	bl	8000c3c <process_battery>
	mode_switch = HAL_GPIO_ReadPin(GPIOF, ON_Pin);
 8001a86:	2101      	movs	r1, #1
 8001a88:	48d3      	ldr	r0, [pc, #844]	@ (8001dd8 <main+0x6a4>)
 8001a8a:	f000 ff39 	bl	8002900 <HAL_GPIO_ReadPin>
	if(compare_times(&current_time, &alarm_time)){
 8001a8e:	4bcf      	ldr	r3, [pc, #828]	@ (8001dcc <main+0x698>)
	mode_switch = HAL_GPIO_ReadPin(GPIOF, ON_Pin);
 8001a90:	9004      	str	r0, [sp, #16]
	if(compare_times(&current_time, &alarm_time)){
 8001a92:	49d2      	ldr	r1, [pc, #840]	@ (8001ddc <main+0x6a8>)
 8001a94:	0018      	movs	r0, r3
 8001a96:	9303      	str	r3, [sp, #12]
 8001a98:	f7ff fd27 	bl	80014ea <compare_times>
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	d035      	beq.n	8001b0c <main+0x3d8>
		 appear = 1;
 8001aa0:	2701      	movs	r7, #1
		 HAL_TIM_Base_Start_IT(&htim16);  // Start the blinking timer
 8001aa2:	48cf      	ldr	r0, [pc, #828]	@ (8001de0 <main+0x6ac>)
 8001aa4:	f001 fcbe 	bl	8003424 <HAL_TIM_Base_Start_IT>
				appear = !appear;
 8001aa8:	003c      	movs	r4, r7
			 if(blink){
 8001aaa:	4bce      	ldr	r3, [pc, #824]	@ (8001de4 <main+0x6b0>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d011      	beq.n	8001ad6 <main+0x3a2>
				if(appear){
 8001ab2:	2f00      	cmp	r7, #0
 8001ab4:	d039      	beq.n	8001b2a <main+0x3f6>
					HAL_GPIO_WritePin(GPIOA, EN_Pin, GPIO_PIN_SET);
 8001ab6:	2180      	movs	r1, #128	@ 0x80
 8001ab8:	2090      	movs	r0, #144	@ 0x90
 8001aba:	00c9      	lsls	r1, r1, #3
 8001abc:	05c0      	lsls	r0, r0, #23
 8001abe:	0022      	movs	r2, r4
 8001ac0:	f000 ff24 	bl	800290c <HAL_GPIO_WritePin>
					HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001ac4:	2104      	movs	r1, #4
 8001ac6:	0030      	movs	r0, r6
 8001ac8:	f001 ffc8 	bl	8003a5c <HAL_TIM_PWM_Start>
				blink = 0;
 8001acc:	2200      	movs	r2, #0
 8001ace:	4bc5      	ldr	r3, [pc, #788]	@ (8001de4 <main+0x6b0>)
				appear = !appear;
 8001ad0:	4067      	eors	r7, r4
 8001ad2:	b2ff      	uxtb	r7, r7
				blink = 0;
 8001ad4:	701a      	strb	r2, [r3, #0]
			 if(btn_1_is_debounced || btn_2_is_debounced){
 8001ad6:	4bc4      	ldr	r3, [pc, #784]	@ (8001de8 <main+0x6b4>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <main+0x3b2>
 8001ade:	4bc3      	ldr	r3, [pc, #780]	@ (8001dec <main+0x6b8>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0e1      	beq.n	8001aaa <main+0x376>
				 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	0030      	movs	r0, r6
 8001aea:	f002 f801 	bl	8003af0 <HAL_TIM_PWM_Stop>
			     HAL_GPIO_WritePin(GPIOA, EN_Pin, GPIO_PIN_RESET);
 8001aee:	2180      	movs	r1, #128	@ 0x80
 8001af0:	2090      	movs	r0, #144	@ 0x90
 8001af2:	2200      	movs	r2, #0
 8001af4:	00c9      	lsls	r1, r1, #3
 8001af6:	05c0      	lsls	r0, r0, #23
 8001af8:	f000 ff08 	bl	800290c <HAL_GPIO_WritePin>
			     HAL_TIM_Base_Stop_IT(&htim16);  // Stop the blinking timer
 8001afc:	48b8      	ldr	r0, [pc, #736]	@ (8001de0 <main+0x6ac>)
 8001afe:	f001 fcb7 	bl	8003470 <HAL_TIM_Base_Stop_IT>
			     btn_1_is_debounced = 0;
 8001b02:	2200      	movs	r2, #0
 8001b04:	4bb8      	ldr	r3, [pc, #736]	@ (8001de8 <main+0x6b4>)
 8001b06:	701a      	strb	r2, [r3, #0]
			     btn_2_is_debounced = 0;
 8001b08:	4bb8      	ldr	r3, [pc, #736]	@ (8001dec <main+0x6b8>)
 8001b0a:	701a      	strb	r2, [r3, #0]
	next_main_state = current_main_state;
 8001b0c:	4bae      	ldr	r3, [pc, #696]	@ (8001dc8 <main+0x694>)
 8001b0e:	4ab8      	ldr	r2, [pc, #736]	@ (8001df0 <main+0x6bc>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	9205      	str	r2, [sp, #20]
 8001b14:	7013      	strb	r3, [r2, #0]
	switch(current_main_state){
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d013      	beq.n	8001b42 <main+0x40e>
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d100      	bne.n	8001b20 <main+0x3ec>
 8001b1e:	e0dd      	b.n	8001cdc <main+0x5a8>
	current_main_state = next_main_state;
 8001b20:	4ab3      	ldr	r2, [pc, #716]	@ (8001df0 <main+0x6bc>)
 8001b22:	4ba9      	ldr	r3, [pc, #676]	@ (8001dc8 <main+0x694>)
 8001b24:	7812      	ldrb	r2, [r2, #0]
 8001b26:	701a      	strb	r2, [r3, #0]
	mode_switch = HAL_GPIO_ReadPin(GPIOF, ON_Pin);
 8001b28:	e7ad      	b.n	8001a86 <main+0x352>
					HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	0030      	movs	r0, r6
 8001b2e:	f001 ffdf 	bl	8003af0 <HAL_TIM_PWM_Stop>
					HAL_GPIO_WritePin(GPIOA, EN_Pin, GPIO_PIN_RESET);
 8001b32:	2180      	movs	r1, #128	@ 0x80
 8001b34:	2090      	movs	r0, #144	@ 0x90
 8001b36:	003a      	movs	r2, r7
 8001b38:	00c9      	lsls	r1, r1, #3
 8001b3a:	05c0      	lsls	r0, r0, #23
 8001b3c:	f000 fee6 	bl	800290c <HAL_GPIO_WritePin>
 8001b40:	e7c4      	b.n	8001acc <main+0x398>
		update_watch(&current_time);
 8001b42:	9803      	ldr	r0, [sp, #12]
 8001b44:	f7ff fcf0 	bl	8001528 <update_watch>
		next_clock_state = current_clock_state;
 8001b48:	4ba1      	ldr	r3, [pc, #644]	@ (8001dd0 <main+0x69c>)
 8001b4a:	4daa      	ldr	r5, [pc, #680]	@ (8001df4 <main+0x6c0>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	702b      	strb	r3, [r5, #0]
		switch(current_clock_state){
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d04b      	beq.n	8001bec <main+0x4b8>
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d046      	beq.n	8001be6 <main+0x4b2>
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d119      	bne.n	8001b90 <main+0x45c>
			if (btn_1_is_debounced || btn_2_is_debounced){
 8001b5c:	4ba2      	ldr	r3, [pc, #648]	@ (8001de8 <main+0x6b4>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d103      	bne.n	8001b6c <main+0x438>
 8001b64:	4ba1      	ldr	r3, [pc, #644]	@ (8001dec <main+0x6b8>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d011      	beq.n	8001b90 <main+0x45c>
				HAL_TIM_Base_Stop_IT(&htim3);   // Stop counting time
 8001b6c:	9801      	ldr	r0, [sp, #4]
 8001b6e:	f001 fc7f 	bl	8003470 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Start_IT(&htim16); // Start the blinking timer
 8001b72:	489b      	ldr	r0, [pc, #620]	@ (8001de0 <main+0x6ac>)
 8001b74:	f001 fc56 	bl	8003424 <HAL_TIM_Base_Start_IT>
				if(btn_1_is_debounced){
 8001b78:	4a9b      	ldr	r2, [pc, #620]	@ (8001de8 <main+0x6b4>)
 8001b7a:	4b9f      	ldr	r3, [pc, #636]	@ (8001df8 <main+0x6c4>)
 8001b7c:	7814      	ldrb	r4, [r2, #0]
 8001b7e:	2c00      	cmp	r4, #0
 8001b80:	d021      	beq.n	8001bc6 <main+0x492>
					time_to_set = &current_time;
 8001b82:	9903      	ldr	r1, [sp, #12]
 8001b84:	6019      	str	r1, [r3, #0]
					next_clock_state = SET_TIME;
 8001b86:	2301      	movs	r3, #1
 8001b88:	702b      	strb	r3, [r5, #0]
					btn_1_is_debounced = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	7013      	strb	r3, [r2, #0]
				appear = 1;
 8001b8e:	2701      	movs	r7, #1
		current_clock_state = next_clock_state;
 8001b90:	4a98      	ldr	r2, [pc, #608]	@ (8001df4 <main+0x6c0>)
 8001b92:	4b8f      	ldr	r3, [pc, #572]	@ (8001dd0 <main+0x69c>)
 8001b94:	7812      	ldrb	r2, [r2, #0]
 8001b96:	701a      	strb	r2, [r3, #0]
		if (mode_switch == 1){
 8001b98:	9b04      	ldr	r3, [sp, #16]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0c0      	beq.n	8001b20 <main+0x3ec>
			next_main_state = GAME;
 8001b9e:	2701      	movs	r7, #1
			current_game_state = START;
 8001ba0:	2400      	movs	r4, #0
			next_main_state = GAME;
 8001ba2:	9b05      	ldr	r3, [sp, #20]
			prepare_start("ARKANOID");
 8001ba4:	4895      	ldr	r0, [pc, #596]	@ (8001dfc <main+0x6c8>)
			next_main_state = GAME;
 8001ba6:	701f      	strb	r7, [r3, #0]
			current_game_state = START;
 8001ba8:	4b95      	ldr	r3, [pc, #596]	@ (8001e00 <main+0x6cc>)
 8001baa:	701c      	strb	r4, [r3, #0]
			prepare_start("ARKANOID");
 8001bac:	f7ff fc10 	bl	80013d0 <prepare_start>
			HAL_TIM_Base_Stop_IT(&htim14);   // Stop button debounce timer
 8001bb0:	9802      	ldr	r0, [sp, #8]
 8001bb2:	f001 fc5d 	bl	8003470 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim16);  // Start the blinking timer
 8001bb6:	488a      	ldr	r0, [pc, #552]	@ (8001de0 <main+0x6ac>)
 8001bb8:	f001 fc34 	bl	8003424 <HAL_TIM_Base_Start_IT>
			btn_1_is_debounced = 0; // Reset buttons
 8001bbc:	4b8a      	ldr	r3, [pc, #552]	@ (8001de8 <main+0x6b4>)
 8001bbe:	701c      	strb	r4, [r3, #0]
			btn_2_is_debounced = 0;
 8001bc0:	4b8a      	ldr	r3, [pc, #552]	@ (8001dec <main+0x6b8>)
 8001bc2:	701c      	strb	r4, [r3, #0]
			appear = 1;
 8001bc4:	e7ac      	b.n	8001b20 <main+0x3ec>
					time_to_set = &alarm_time;
 8001bc6:	4f85      	ldr	r7, [pc, #532]	@ (8001ddc <main+0x6a8>)
 8001bc8:	601f      	str	r7, [r3, #0]
					next_clock_state = SET_ALARM;
 8001bca:	2302      	movs	r3, #2
					raise_flags(&alarm_time);
 8001bcc:	0038      	movs	r0, r7
					next_clock_state = SET_ALARM;
 8001bce:	702b      	strb	r3, [r5, #0]
					raise_flags(&alarm_time);
 8001bd0:	f7ff fce2 	bl	8001598 <raise_flags>
					update_watch(&alarm_time);
 8001bd4:	0038      	movs	r0, r7
 8001bd6:	f7ff fca7 	bl	8001528 <update_watch>
					draw_hour_rectangles(0);
 8001bda:	0020      	movs	r0, r4
 8001bdc:	f7ff fc92 	bl	8001504 <draw_hour_rectangles>
					btn_2_is_debounced = 0;
 8001be0:	4b82      	ldr	r3, [pc, #520]	@ (8001dec <main+0x6b8>)
 8001be2:	701c      	strb	r4, [r3, #0]
 8001be4:	e7d3      	b.n	8001b8e <main+0x45a>
			update_watch(&alarm_time);
 8001be6:	487d      	ldr	r0, [pc, #500]	@ (8001ddc <main+0x6a8>)
 8001be8:	f7ff fc9e 	bl	8001528 <update_watch>
			next_set_state = current_set_state;
 8001bec:	4c79      	ldr	r4, [pc, #484]	@ (8001dd4 <main+0x6a0>)
 8001bee:	4b85      	ldr	r3, [pc, #532]	@ (8001e04 <main+0x6d0>)
 8001bf0:	7822      	ldrb	r2, [r4, #0]
 8001bf2:	701a      	strb	r2, [r3, #0]
			if(blink){
 8001bf4:	4b7b      	ldr	r3, [pc, #492]	@ (8001de4 <main+0x6b0>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d016      	beq.n	8001c2a <main+0x4f6>
				if(current_clock_state == SET_TIME)
 8001bfc:	4b74      	ldr	r3, [pc, #464]	@ (8001dd0 <main+0x69c>)
					draw_set_time(appear);
 8001bfe:	0038      	movs	r0, r7
				if(current_clock_state == SET_TIME)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d136      	bne.n	8001c74 <main+0x540>
					draw_set_time(appear);
 8001c06:	f7ff f90d 	bl	8000e24 <draw_set_time>
				if(current_set_state == SET_MINUTES)
 8001c0a:	7823      	ldrb	r3, [r4, #0]
					draw_min_rectangles(appear);
 8001c0c:	0038      	movs	r0, r7
				if(current_set_state == SET_MINUTES)
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d133      	bne.n	8001c7a <main+0x546>
					draw_min_rectangles(appear);
 8001c12:	f7ff fc56 	bl	80014c2 <draw_min_rectangles>
				appear = !appear;
 8001c16:	2301      	movs	r3, #1
				n_loops++;
 8001c18:	4a7b      	ldr	r2, [pc, #492]	@ (8001e08 <main+0x6d4>)
				appear = !appear;
 8001c1a:	405f      	eors	r7, r3
				n_loops++;
 8001c1c:	7813      	ldrb	r3, [r2, #0]
				appear = !appear;
 8001c1e:	b2ff      	uxtb	r7, r7
				n_loops++;
 8001c20:	3301      	adds	r3, #1
 8001c22:	7013      	strb	r3, [r2, #0]
				blink = 0;
 8001c24:	2200      	movs	r2, #0
 8001c26:	4b6f      	ldr	r3, [pc, #444]	@ (8001de4 <main+0x6b0>)
 8001c28:	701a      	strb	r2, [r3, #0]
			switch(current_set_state){
 8001c2a:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd4 <main+0x6a0>)
 8001c2c:	7819      	ldrb	r1, [r3, #0]
 8001c2e:	2901      	cmp	r1, #1
 8001c30:	d81b      	bhi.n	8001c6a <main+0x536>
				if(btn_1_is_debounced){
 8001c32:	4c6d      	ldr	r4, [pc, #436]	@ (8001de8 <main+0x6b4>)
 8001c34:	7823      	ldrb	r3, [r4, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d008      	beq.n	8001c4c <main+0x518>
					increase_time(time_to_set, current_set_state + 1);
 8001c3a:	4b6f      	ldr	r3, [pc, #444]	@ (8001df8 <main+0x6c4>)
 8001c3c:	3101      	adds	r1, #1
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	f7ff fcca 	bl	80015d8 <increase_time>
					n_loops = 0;
 8001c44:	2200      	movs	r2, #0
 8001c46:	4b70      	ldr	r3, [pc, #448]	@ (8001e08 <main+0x6d4>)
					btn_1_is_debounced = 0;
 8001c48:	7022      	strb	r2, [r4, #0]
					n_loops = 0;
 8001c4a:	701a      	strb	r2, [r3, #0]
				if(btn_2_is_debounced){
 8001c4c:	4d67      	ldr	r5, [pc, #412]	@ (8001dec <main+0x6b8>)
 8001c4e:	782c      	ldrb	r4, [r5, #0]
 8001c50:	2c00      	cmp	r4, #0
 8001c52:	d015      	beq.n	8001c80 <main+0x54c>
					decrease_time(time_to_set, current_set_state + 1);
 8001c54:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd4 <main+0x6a0>)
 8001c56:	7819      	ldrb	r1, [r3, #0]
 8001c58:	4b67      	ldr	r3, [pc, #412]	@ (8001df8 <main+0x6c4>)
 8001c5a:	3101      	adds	r1, #1
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	f7ff fcf5 	bl	800164c <decrease_time>
					n_loops = 0;
 8001c62:	2200      	movs	r2, #0
 8001c64:	4b68      	ldr	r3, [pc, #416]	@ (8001e08 <main+0x6d4>)
					btn_2_is_debounced = 0;
 8001c66:	702a      	strb	r2, [r5, #0]
					n_loops = 0;
 8001c68:	701a      	strb	r2, [r3, #0]
			current_set_state = next_set_state;
 8001c6a:	4a66      	ldr	r2, [pc, #408]	@ (8001e04 <main+0x6d0>)
 8001c6c:	4b59      	ldr	r3, [pc, #356]	@ (8001dd4 <main+0x6a0>)
 8001c6e:	7812      	ldrb	r2, [r2, #0]
 8001c70:	701a      	strb	r2, [r3, #0]
		break;
 8001c72:	e78d      	b.n	8001b90 <main+0x45c>
					draw_set_alarm(appear);
 8001c74:	f7ff f8f0 	bl	8000e58 <draw_set_alarm>
 8001c78:	e7c7      	b.n	8001c0a <main+0x4d6>
					draw_hour_rectangles(appear);
 8001c7a:	f7ff fc43 	bl	8001504 <draw_hour_rectangles>
 8001c7e:	e7ca      	b.n	8001c16 <main+0x4e2>
				if(n_loops > LOOP_LIMIT+1){
 8001c80:	4b61      	ldr	r3, [pc, #388]	@ (8001e08 <main+0x6d4>)
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	2a05      	cmp	r2, #5
 8001c86:	d9f0      	bls.n	8001c6a <main+0x536>
					n_loops = 0;
 8001c88:	701c      	strb	r4, [r3, #0]
					if(current_set_state == SET_MINUTES){
 8001c8a:	4b52      	ldr	r3, [pc, #328]	@ (8001dd4 <main+0x6a0>)
 8001c8c:	781d      	ldrb	r5, [r3, #0]
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e04 <main+0x6d0>)
 8001c90:	2d00      	cmp	r5, #0
 8001c92:	d107      	bne.n	8001ca4 <main+0x570>
						next_set_state = SET_HOURS;
 8001c94:	2001      	movs	r0, #1
 8001c96:	7018      	strb	r0, [r3, #0]
						draw_hour_rectangles(1);
 8001c98:	f7ff fc34 	bl	8001504 <draw_hour_rectangles>
						draw_min_rectangles(0);
 8001c9c:	0028      	movs	r0, r5
 8001c9e:	f7ff fc10 	bl	80014c2 <draw_min_rectangles>
 8001ca2:	e7e2      	b.n	8001c6a <main+0x536>
						next_clock_state = NORMAL;
 8001ca4:	4a53      	ldr	r2, [pc, #332]	@ (8001df4 <main+0x6c0>)
						HAL_TIM_Base_Start_IT(&htim3);   // Start counting time
 8001ca6:	9801      	ldr	r0, [sp, #4]
						next_clock_state = NORMAL;
 8001ca8:	7014      	strb	r4, [r2, #0]
						next_set_state = SET_MINUTES;
 8001caa:	701c      	strb	r4, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim3);   // Start counting time
 8001cac:	f001 fbba 	bl	8003424 <HAL_TIM_Base_Start_IT>
						HAL_TIM_Base_Stop_IT(&htim16);   // Stop the blinking timer
 8001cb0:	484b      	ldr	r0, [pc, #300]	@ (8001de0 <main+0x6ac>)
 8001cb2:	f001 fbdd 	bl	8003470 <HAL_TIM_Base_Stop_IT>
						raise_flags(&current_time);
 8001cb6:	9803      	ldr	r0, [sp, #12]
 8001cb8:	f7ff fc6e 	bl	8001598 <raise_flags>
						update_watch(&current_time);
 8001cbc:	9803      	ldr	r0, [sp, #12]
 8001cbe:	f7ff fc33 	bl	8001528 <update_watch>
						draw_min_rectangles(0);
 8001cc2:	0020      	movs	r0, r4
 8001cc4:	f7ff fbfd 	bl	80014c2 <draw_min_rectangles>
						draw_hour_rectangles(0);
 8001cc8:	0020      	movs	r0, r4
 8001cca:	f7ff fc1b 	bl	8001504 <draw_hour_rectangles>
						draw_set_time(0);
 8001cce:	0020      	movs	r0, r4
 8001cd0:	f7ff f8a8 	bl	8000e24 <draw_set_time>
						draw_set_alarm(0);
 8001cd4:	0020      	movs	r0, r4
 8001cd6:	f7ff f8bf 	bl	8000e58 <draw_set_alarm>
 8001cda:	e7c6      	b.n	8001c6a <main+0x536>
		next_game_state = current_game_state;
 8001cdc:	4b48      	ldr	r3, [pc, #288]	@ (8001e00 <main+0x6cc>)
 8001cde:	4d4b      	ldr	r5, [pc, #300]	@ (8001e0c <main+0x6d8>)
 8001ce0:	781c      	ldrb	r4, [r3, #0]
 8001ce2:	702c      	strb	r4, [r5, #0]
		switch(current_game_state){
 8001ce4:	2c01      	cmp	r4, #1
 8001ce6:	d100      	bne.n	8001cea <main+0x5b6>
 8001ce8:	e09a      	b.n	8001e20 <main+0x6ec>
 8001cea:	d902      	bls.n	8001cf2 <main+0x5be>
 8001cec:	3c02      	subs	r4, #2
 8001cee:	2c01      	cmp	r4, #1
 8001cf0:	d838      	bhi.n	8001d64 <main+0x630>
			if(blink){
 8001cf2:	4c3c      	ldr	r4, [pc, #240]	@ (8001de4 <main+0x6b0>)
 8001cf4:	7823      	ldrb	r3, [r4, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <main+0x5d8>
				if(appear){
 8001cfa:	2f00      	cmp	r7, #0
 8001cfc:	d058      	beq.n	8001db0 <main+0x67c>
					draw_msg();
 8001cfe:	f7ff fb47 	bl	8001390 <draw_msg>
				appear = !appear;
 8001d02:	2301      	movs	r3, #1
 8001d04:	405f      	eors	r7, r3
				blink = 0;
 8001d06:	2300      	movs	r3, #0
				appear = !appear;
 8001d08:	b2ff      	uxtb	r7, r7
				blink = 0;
 8001d0a:	7023      	strb	r3, [r4, #0]
			if((HAL_GPIO_ReadPin(GPIOA, BTN1_Pin) == 0) || (HAL_GPIO_ReadPin(GPIOA, BTN2_Pin) == 0)){
 8001d0c:	2090      	movs	r0, #144	@ 0x90
 8001d0e:	2102      	movs	r1, #2
 8001d10:	05c0      	lsls	r0, r0, #23
 8001d12:	f000 fdf5 	bl	8002900 <HAL_GPIO_ReadPin>
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d14d      	bne.n	8001db6 <main+0x682>
				next_game_state = GAMING;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	702b      	strb	r3, [r5, #0]
				small_buzz(); // Do it before the game starts
 8001d1e:	f7ff fcbb 	bl	8001698 <small_buzz>
				HAL_TIM_Base_Start_IT(&htim17);   // Start the game timer
 8001d22:	483b      	ldr	r0, [pc, #236]	@ (8001e10 <main+0x6dc>)
 8001d24:	f001 fb7e 	bl	8003424 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Stop_IT(&htim16);    // Stop the blinking timer
 8001d28:	482d      	ldr	r0, [pc, #180]	@ (8001de0 <main+0x6ac>)
 8001d2a:	f001 fba1 	bl	8003470 <HAL_TIM_Base_Stop_IT>
				hp = 3;
 8001d2e:	2203      	movs	r2, #3
				score = 0;
 8001d30:	2400      	movs	r4, #0
				hp = 3;
 8001d32:	4b38      	ldr	r3, [pc, #224]	@ (8001e14 <main+0x6e0>)
				level = 0;
 8001d34:	4d38      	ldr	r5, [pc, #224]	@ (8001e18 <main+0x6e4>)
				hp = 3;
 8001d36:	701a      	strb	r2, [r3, #0]
				score = 0;
 8001d38:	4b38      	ldr	r3, [pc, #224]	@ (8001e1c <main+0x6e8>)
				level = 0;
 8001d3a:	702c      	strb	r4, [r5, #0]
				score = 0;
 8001d3c:	801c      	strh	r4, [r3, #0]
				delete_msg();
 8001d3e:	f7ff fb3b 	bl	80013b8 <delete_msg>
				prepare_game();
 8001d42:	f7ff fbb3 	bl	80014ac <prepare_game>
				draw_hp();
 8001d46:	f7fe ffb9 	bl	8000cbc <draw_hp>
				draw_score(125, 2);
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	207d      	movs	r0, #125	@ 0x7d
 8001d4e:	f7fe ffd1 	bl	8000cf4 <draw_score>
				copy_level(level);
 8001d52:	7828      	ldrb	r0, [r5, #0]
 8001d54:	f7ff f802 	bl	8000d5c <copy_level>
				draw_blocks();
 8001d58:	f7ff f854 	bl	8000e04 <draw_blocks>
				btn_1_is_debounced = 0;
 8001d5c:	4b22      	ldr	r3, [pc, #136]	@ (8001de8 <main+0x6b4>)
 8001d5e:	701c      	strb	r4, [r3, #0]
				btn_2_is_debounced = 0;
 8001d60:	4b22      	ldr	r3, [pc, #136]	@ (8001dec <main+0x6b8>)
 8001d62:	701c      	strb	r4, [r3, #0]
		current_game_state = next_game_state;
 8001d64:	4a29      	ldr	r2, [pc, #164]	@ (8001e0c <main+0x6d8>)
 8001d66:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <main+0x6cc>)
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	701a      	strb	r2, [r3, #0]
		if(mode_switch == 0 && btn_1_is_debounced == 0 && btn_2_is_debounced == 0){
 8001d6c:	9b04      	ldr	r3, [sp, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d000      	beq.n	8001d74 <main+0x640>
 8001d72:	e6d5      	b.n	8001b20 <main+0x3ec>
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <main+0x6b4>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d000      	beq.n	8001d7e <main+0x64a>
 8001d7c:	e6d0      	b.n	8001b20 <main+0x3ec>
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dec <main+0x6b8>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d000      	beq.n	8001d88 <main+0x654>
 8001d86:	e6cb      	b.n	8001b20 <main+0x3ec>
			next_main_state = WATCH;
 8001d88:	9a04      	ldr	r2, [sp, #16]
 8001d8a:	4b19      	ldr	r3, [pc, #100]	@ (8001df0 <main+0x6bc>)
			prepare_watch(&current_time);
 8001d8c:	480f      	ldr	r0, [pc, #60]	@ (8001dcc <main+0x698>)
			next_main_state = WATCH;
 8001d8e:	701a      	strb	r2, [r3, #0]
			next_clock_state = NORMAL;
 8001d90:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <main+0x6c0>)
 8001d92:	701a      	strb	r2, [r3, #0]
			prepare_watch(&current_time);
 8001d94:	f7ff fc08 	bl	80015a8 <prepare_watch>
			HAL_TIM_Base_Stop_IT(&htim17);    // Stop the game timer
 8001d98:	481d      	ldr	r0, [pc, #116]	@ (8001e10 <main+0x6dc>)
 8001d9a:	f001 fb69 	bl	8003470 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim16);    // Stop the blinking timer
 8001d9e:	4810      	ldr	r0, [pc, #64]	@ (8001de0 <main+0x6ac>)
 8001da0:	f001 fb66 	bl	8003470 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim14);   // Start the button debounce timer
 8001da4:	9802      	ldr	r0, [sp, #8]
 8001da6:	f001 fb3d 	bl	8003424 <HAL_TIM_Base_Start_IT>
			draw_battery();
 8001daa:	f7fe ff07 	bl	8000bbc <draw_battery>
 8001dae:	e6b7      	b.n	8001b20 <main+0x3ec>
					delete_msg();
 8001db0:	f7ff fb02 	bl	80013b8 <delete_msg>
 8001db4:	e7a5      	b.n	8001d02 <main+0x5ce>
			if((HAL_GPIO_ReadPin(GPIOA, BTN1_Pin) == 0) || (HAL_GPIO_ReadPin(GPIOA, BTN2_Pin) == 0)){
 8001db6:	2090      	movs	r0, #144	@ 0x90
 8001db8:	2104      	movs	r1, #4
 8001dba:	05c0      	lsls	r0, r0, #23
 8001dbc:	f000 fda0 	bl	8002900 <HAL_GPIO_ReadPin>
 8001dc0:	2800      	cmp	r0, #0
 8001dc2:	d0aa      	beq.n	8001d1a <main+0x5e6>
 8001dc4:	e7ce      	b.n	8001d64 <main+0x630>
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	200000cf 	.word	0x200000cf
 8001dcc:	20000030 	.word	0x20000030
 8001dd0:	200000cb 	.word	0x200000cb
 8001dd4:	200000c7 	.word	0x200000c7
 8001dd8:	48001400 	.word	0x48001400
 8001ddc:	20000024 	.word	0x20000024
 8001de0:	20000130 	.word	0x20000130
 8001de4:	200000c4 	.word	0x200000c4
 8001de8:	200000cd 	.word	0x200000cd
 8001dec:	200000cc 	.word	0x200000cc
 8001df0:	200000ce 	.word	0x200000ce
 8001df4:	200000ca 	.word	0x200000ca
 8001df8:	200000d0 	.word	0x200000d0
 8001dfc:	08003ea2 	.word	0x08003ea2
 8001e00:	200000c9 	.word	0x200000c9
 8001e04:	200000c6 	.word	0x200000c6
 8001e08:	200000c5 	.word	0x200000c5
 8001e0c:	200000c8 	.word	0x200000c8
 8001e10:	200000e8 	.word	0x200000e8
 8001e14:	200000be 	.word	0x200000be
 8001e18:	200000bb 	.word	0x200000bb
 8001e1c:	200000bc 	.word	0x200000bc
 8001e20:	2200      	movs	r2, #0
				if(current_block_states[i]) level_over = 0;
 8001e22:	4931      	ldr	r1, [pc, #196]	@ (8001ee8 <main+0x7b4>)
 8001e24:	5c8b      	ldrb	r3, [r1, r2]
			for(int i = 0; i < N_COLS*N_ROWS; i++){
 8001e26:	3201      	adds	r2, #1
				if(current_block_states[i]) level_over = 0;
 8001e28:	4258      	negs	r0, r3
 8001e2a:	4143      	adcs	r3, r0
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	401c      	ands	r4, r3
			for(int i = 0; i < N_COLS*N_ROWS; i++){
 8001e30:	2a14      	cmp	r2, #20
 8001e32:	d1f7      	bne.n	8001e24 <main+0x6f0>
			if(ball_hit_something){
 8001e34:	4b2d      	ldr	r3, [pc, #180]	@ (8001eec <main+0x7b8>)
 8001e36:	781a      	ldrb	r2, [r3, #0]
 8001e38:	2a00      	cmp	r2, #0
 8001e3a:	d003      	beq.n	8001e44 <main+0x710>
				ball_hit_something = 0;
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
				small_buzz();
 8001e40:	f7ff fc2a 	bl	8001698 <small_buzz>
			if(level_over){
 8001e44:	2c00      	cmp	r4, #0
 8001e46:	d023      	beq.n	8001e90 <main+0x75c>
				level++;
 8001e48:	4b29      	ldr	r3, [pc, #164]	@ (8001ef0 <main+0x7bc>)
 8001e4a:	9303      	str	r3, [sp, #12]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	9a03      	ldr	r2, [sp, #12]
 8001e50:	3301      	adds	r3, #1
 8001e52:	7013      	strb	r3, [r2, #0]
				start_ball();
 8001e54:	f7ff f81a 	bl	8000e8c <start_ball>
				start_platform();
 8001e58:	f7ff f89a 	bl	8000f90 <start_platform>
				if(level == 3){
 8001e5c:	9b03      	ldr	r3, [sp, #12]
 8001e5e:	4a25      	ldr	r2, [pc, #148]	@ (8001ef4 <main+0x7c0>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	9205      	str	r2, [sp, #20]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d12e      	bne.n	8001ec6 <main+0x792>
					HAL_TIM_Base_Stop_IT(&htim17);   // Stop the game timer
 8001e68:	0010      	movs	r0, r2
					next_game_state = GAME_WIN;
 8001e6a:	702b      	strb	r3, [r5, #0]
					HAL_TIM_Base_Stop_IT(&htim17);   // Stop the game timer
 8001e6c:	f001 fb00 	bl	8003470 <HAL_TIM_Base_Stop_IT>
					HAL_TIM_Base_Start_IT(&htim16);  // Start the blinking timer
 8001e70:	4821      	ldr	r0, [pc, #132]	@ (8001ef8 <main+0x7c4>)
 8001e72:	f001 fad7 	bl	8003424 <HAL_TIM_Base_Start_IT>
					prepare_start("YOU WIN!");
 8001e76:	4821      	ldr	r0, [pc, #132]	@ (8001efc <main+0x7c8>)
 8001e78:	f7ff faaa 	bl	80013d0 <prepare_start>
					btn_1_is_debounced = 0; // Reset buttons
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4b20      	ldr	r3, [pc, #128]	@ (8001f00 <main+0x7cc>)
					draw_score(60, 200);
 8001e80:	21c8      	movs	r1, #200	@ 0xc8
					btn_1_is_debounced = 0; // Reset buttons
 8001e82:	701a      	strb	r2, [r3, #0]
					btn_2_is_debounced = 0;
 8001e84:	4b1f      	ldr	r3, [pc, #124]	@ (8001f04 <main+0x7d0>)
					draw_score(60, 200);
 8001e86:	203c      	movs	r0, #60	@ 0x3c
					btn_2_is_debounced = 0;
 8001e88:	701a      	strb	r2, [r3, #0]
					appear = 1;
 8001e8a:	0027      	movs	r7, r4
					draw_score(60, 200);
 8001e8c:	f7fe ff32 	bl	8000cf4 <draw_score>
			if(hp < 0){
 8001e90:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <main+0x7d4>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e96:	d800      	bhi.n	8001e9a <main+0x766>
 8001e98:	e764      	b.n	8001d64 <main+0x630>
				next_game_state = GAME_OVER;
 8001e9a:	2302      	movs	r3, #2
				HAL_TIM_Base_Stop_IT(&htim17);   // Stop the game timer
 8001e9c:	4815      	ldr	r0, [pc, #84]	@ (8001ef4 <main+0x7c0>)
				next_game_state = GAME_OVER;
 8001e9e:	702b      	strb	r3, [r5, #0]
				HAL_TIM_Base_Stop_IT(&htim17);   // Stop the game timer
 8001ea0:	f001 fae6 	bl	8003470 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Start_IT(&htim16);  // Start the blinking timer
 8001ea4:	4814      	ldr	r0, [pc, #80]	@ (8001ef8 <main+0x7c4>)
 8001ea6:	f001 fabd 	bl	8003424 <HAL_TIM_Base_Start_IT>
				prepare_start("GAME OVER");
 8001eaa:	4818      	ldr	r0, [pc, #96]	@ (8001f0c <main+0x7d8>)
 8001eac:	f7ff fa90 	bl	80013d0 <prepare_start>
				btn_1_is_debounced = 0; // Reset buttons
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <main+0x7cc>)
				draw_score(60, 200);
 8001eb4:	21c8      	movs	r1, #200	@ 0xc8
				btn_1_is_debounced = 0; // Reset buttons
 8001eb6:	701a      	strb	r2, [r3, #0]
				btn_2_is_debounced = 0;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <main+0x7d0>)
				draw_score(60, 200);
 8001eba:	203c      	movs	r0, #60	@ 0x3c
				btn_2_is_debounced = 0;
 8001ebc:	701a      	strb	r2, [r3, #0]
				appear = 1;
 8001ebe:	2701      	movs	r7, #1
				draw_score(60, 200);
 8001ec0:	f7fe ff18 	bl	8000cf4 <draw_score>
				appear = 1;
 8001ec4:	e74e      	b.n	8001d64 <main+0x630>
					HAL_TIM_Base_Stop_IT(&htim17);
 8001ec6:	9805      	ldr	r0, [sp, #20]
 8001ec8:	f001 fad2 	bl	8003470 <HAL_TIM_Base_Stop_IT>
					HAL_Delay(1000);
 8001ecc:	20fa      	movs	r0, #250	@ 0xfa
 8001ece:	0080      	lsls	r0, r0, #2
 8001ed0:	f000 fa06 	bl	80022e0 <HAL_Delay>
					copy_level(level);
 8001ed4:	9b03      	ldr	r3, [sp, #12]
 8001ed6:	7818      	ldrb	r0, [r3, #0]
 8001ed8:	f7fe ff40 	bl	8000d5c <copy_level>
					draw_blocks();
 8001edc:	f7fe ff92 	bl	8000e04 <draw_blocks>
					HAL_TIM_Base_Start_IT(&htim17);
 8001ee0:	9805      	ldr	r0, [sp, #20]
 8001ee2:	f001 fa9f 	bl	8003424 <HAL_TIM_Base_Start_IT>
 8001ee6:	e7d3      	b.n	8001e90 <main+0x75c>
 8001ee8:	200000d4 	.word	0x200000d4
 8001eec:	200000ba 	.word	0x200000ba
 8001ef0:	200000bb 	.word	0x200000bb
 8001ef4:	200000e8 	.word	0x200000e8
 8001ef8:	20000130 	.word	0x20000130
 8001efc:	08003eab 	.word	0x08003eab
 8001f00:	200000cd 	.word	0x200000cd
 8001f04:	200000cc 	.word	0x200000cc
 8001f08:	200000be 	.word	0x200000be
 8001f0c:	08003eb4 	.word	0x08003eb4

08001f10 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f10:	2101      	movs	r1, #1
 8001f12:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <HAL_MspInit+0x2c>)
{
 8001f14:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	619a      	str	r2, [r3, #24]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f20:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	9200      	str	r2, [sp, #0]
 8001f24:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	69da      	ldr	r2, [r3, #28]
 8001f28:	0549      	lsls	r1, r1, #21
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	61da      	str	r2, [r3, #28]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	400b      	ands	r3, r1
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f36:	b002      	add	sp, #8
 8001f38:	4770      	bx	lr
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	40021000 	.word	0x40021000

08001f40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f40:	b510      	push	{r4, lr}
 8001f42:	0004      	movs	r4, r0
 8001f44:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f46:	2214      	movs	r2, #20
 8001f48:	2100      	movs	r1, #0
 8001f4a:	a803      	add	r0, sp, #12
 8001f4c:	f001 fe30 	bl	8003bb0 <memset>
  if(hadc->Instance==ADC1)
 8001f50:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <HAL_ADC_MspInit+0x54>)
 8001f52:	6822      	ldr	r2, [r4, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d11b      	bne.n	8001f90 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f58:	2180      	movs	r1, #128	@ 0x80
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <HAL_ADC_MspInit+0x58>)
 8001f5c:	0089      	lsls	r1, r1, #2
 8001f5e:	699a      	ldr	r2, [r3, #24]
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f62:	430a      	orrs	r2, r1
 8001f64:	619a      	str	r2, [r3, #24]
 8001f66:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f68:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f6a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6c:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f6e:	9201      	str	r2, [sp, #4]
 8001f70:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	0289      	lsls	r1, r1, #10
 8001f76:	430a      	orrs	r2, r1
 8001f78:	615a      	str	r2, [r3, #20]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	9302      	str	r3, [sp, #8]
 8001f80:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f82:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f88:	3302      	adds	r3, #2
 8001f8a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f000 fc00 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f90:	b008      	add	sp, #32
 8001f92:	bd10      	pop	{r4, pc}
 8001f94:	40012400 	.word	0x40012400
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f9c:	b510      	push	{r4, lr}
 8001f9e:	0004      	movs	r4, r0
 8001fa0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa2:	2214      	movs	r2, #20
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	a803      	add	r0, sp, #12
 8001fa8:	f001 fe02 	bl	8003bb0 <memset>
  if(hspi->Instance==SPI1)
 8001fac:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <HAL_SPI_MspInit+0x58>)
 8001fae:	6822      	ldr	r2, [r4, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d11d      	bne.n	8001ff0 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fb4:	2180      	movs	r1, #128	@ 0x80
 8001fb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <HAL_SPI_MspInit+0x5c>)
 8001fb8:	0149      	lsls	r1, r1, #5
 8001fba:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	619a      	str	r2, [r3, #24]
 8001fc2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fc6:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fca:	9201      	str	r2, [sp, #4]
 8001fcc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	0289      	lsls	r1, r1, #10
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	615a      	str	r2, [r3, #20]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	400b      	ands	r3, r1
 8001fda:	9302      	str	r3, [sp, #8]
 8001fdc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001fde:	23a0      	movs	r3, #160	@ 0xa0
 8001fe0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	3b9e      	subs	r3, #158	@ 0x9e
 8001fe4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe8:	3301      	adds	r3, #1
 8001fea:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f000 fbd0 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ff0:	b008      	add	sp, #32
 8001ff2:	bd10      	pop	{r4, pc}
 8001ff4:	40013000 	.word	0x40013000
 8001ff8:	40021000 	.word	0x40021000

08001ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ffc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if(htim_base->Instance==TIM1)
 8001ffe:	6803      	ldr	r3, [r0, #0]
 8002000:	4a2f      	ldr	r2, [pc, #188]	@ (80020c0 <HAL_TIM_Base_MspInit+0xc4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10b      	bne.n	800201e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002006:	2180      	movs	r1, #128	@ 0x80
 8002008:	4b2e      	ldr	r3, [pc, #184]	@ (80020c4 <HAL_TIM_Base_MspInit+0xc8>)
 800200a:	0109      	lsls	r1, r1, #4
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	430a      	orrs	r2, r1
 8002010:	619a      	str	r2, [r3, #24]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	400b      	ands	r3, r1
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800201a:	b007      	add	sp, #28
 800201c:	bd00      	pop	{pc}
  else if(htim_base->Instance==TIM3)
 800201e:	4a2a      	ldr	r2, [pc, #168]	@ (80020c8 <HAL_TIM_Base_MspInit+0xcc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d111      	bne.n	8002048 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002024:	2102      	movs	r1, #2
 8002026:	4b27      	ldr	r3, [pc, #156]	@ (80020c4 <HAL_TIM_Base_MspInit+0xc8>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002028:	2010      	movs	r0, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 800202a:	69da      	ldr	r2, [r3, #28]
 800202c:	430a      	orrs	r2, r1
 800202e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002030:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	400b      	ands	r3, r1
 8002036:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002038:	0011      	movs	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800203a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800203c:	f000 fb58 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002040:	2010      	movs	r0, #16
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002042:	f000 fb7f 	bl	8002744 <HAL_NVIC_EnableIRQ>
}
 8002046:	e7e8      	b.n	800201a <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM14)
 8002048:	4a20      	ldr	r2, [pc, #128]	@ (80020cc <HAL_TIM_Base_MspInit+0xd0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d110      	bne.n	8002070 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800204e:	2180      	movs	r1, #128	@ 0x80
 8002050:	4b1c      	ldr	r3, [pc, #112]	@ (80020c4 <HAL_TIM_Base_MspInit+0xc8>)
 8002052:	0049      	lsls	r1, r1, #1
 8002054:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002056:	2013      	movs	r0, #19
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002058:	430a      	orrs	r2, r1
 800205a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800205c:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	400b      	ands	r3, r1
 8002062:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002064:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002066:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002068:	f000 fb42 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800206c:	2013      	movs	r0, #19
 800206e:	e7e8      	b.n	8002042 <HAL_TIM_Base_MspInit+0x46>
  else if(htim_base->Instance==TIM16)
 8002070:	4a17      	ldr	r2, [pc, #92]	@ (80020d0 <HAL_TIM_Base_MspInit+0xd4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d110      	bne.n	8002098 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002076:	2180      	movs	r1, #128	@ 0x80
 8002078:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <HAL_TIM_Base_MspInit+0xc8>)
 800207a:	0289      	lsls	r1, r1, #10
 800207c:	699a      	ldr	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800207e:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002080:	430a      	orrs	r2, r1
 8002082:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002084:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	400b      	ands	r3, r1
 800208a:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800208c:	0011      	movs	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 800208e:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002090:	f000 fb2e 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002094:	2015      	movs	r0, #21
 8002096:	e7d4      	b.n	8002042 <HAL_TIM_Base_MspInit+0x46>
  else if(htim_base->Instance==TIM17)
 8002098:	4a0e      	ldr	r2, [pc, #56]	@ (80020d4 <HAL_TIM_Base_MspInit+0xd8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d1bd      	bne.n	800201a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800209e:	2180      	movs	r1, #128	@ 0x80
 80020a0:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <HAL_TIM_Base_MspInit+0xc8>)
 80020a2:	02c9      	lsls	r1, r1, #11
 80020a4:	699a      	ldr	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80020a6:	2016      	movs	r0, #22
    __HAL_RCC_TIM17_CLK_ENABLE();
 80020a8:	430a      	orrs	r2, r1
 80020aa:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80020ac:	2200      	movs	r2, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	400b      	ands	r3, r1
 80020b2:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80020b4:	0011      	movs	r1, r2
    __HAL_RCC_TIM17_CLK_ENABLE();
 80020b6:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80020b8:	f000 fb1a 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80020bc:	2016      	movs	r0, #22
 80020be:	e7c0      	b.n	8002042 <HAL_TIM_Base_MspInit+0x46>
 80020c0:	40012c00 	.word	0x40012c00
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40002000 	.word	0x40002000
 80020d0:	40014400 	.word	0x40014400
 80020d4:	40014800 	.word	0x40014800

080020d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020d8:	b510      	push	{r4, lr}
 80020da:	0004      	movs	r4, r0
 80020dc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020de:	2214      	movs	r2, #20
 80020e0:	2100      	movs	r1, #0
 80020e2:	a801      	add	r0, sp, #4
 80020e4:	f001 fd64 	bl	8003bb0 <memset>
  if(htim->Instance==TIM1)
 80020e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <HAL_TIM_MspPostInit+0x48>)
 80020ea:	6822      	ldr	r2, [r4, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d115      	bne.n	800211c <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f0:	2180      	movs	r1, #128	@ 0x80
 80020f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <HAL_TIM_MspPostInit+0x4c>)
 80020f4:	0289      	lsls	r1, r1, #10
 80020f6:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = AUDIO_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(AUDIO_GPIO_Port, &GPIO_InitStruct);
 80020f8:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	430a      	orrs	r2, r1
 80020fc:	615a      	str	r2, [r3, #20]
 80020fe:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(AUDIO_GPIO_Port, &GPIO_InitStruct);
 8002100:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	400b      	ands	r3, r1
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = AUDIO_Pin;
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	3bff      	subs	r3, #255	@ 0xff
 8002110:	3bff      	subs	r3, #255	@ 0xff
    HAL_GPIO_Init(AUDIO_GPIO_Port, &GPIO_InitStruct);
 8002112:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002116:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(AUDIO_GPIO_Port, &GPIO_InitStruct);
 8002118:	f000 fb3a 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800211c:	b006      	add	sp, #24
 800211e:	bd10      	pop	{r4, pc}
 8002120:	40012c00 	.word	0x40012c00
 8002124:	40021000 	.word	0x40021000

08002128 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002128:	e7fe      	b.n	8002128 <NMI_Handler>

0800212a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <HardFault_Handler>

0800212c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800212c:	4770      	bx	lr

0800212e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800212e:	4770      	bx	lr

08002130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002130:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002132:	f000 f8c3 	bl	80022bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002136:	bd10      	pop	{r4, pc}

08002138 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002138:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800213a:	4804      	ldr	r0, [pc, #16]	@ (800214c <TIM3_IRQHandler+0x14>)
 800213c:	f001 f9b8 	bl	80034b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  increase_time(&current_time, 0); // Increase low seconds
 8002140:	2100      	movs	r1, #0
 8002142:	4803      	ldr	r0, [pc, #12]	@ (8002150 <TIM3_IRQHandler+0x18>)
 8002144:	f7ff fa48 	bl	80015d8 <increase_time>
  /* USER CODE END TIM3_IRQn 1 */
}
 8002148:	bd10      	pop	{r4, pc}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	200001c0 	.word	0x200001c0
 8002150:	20000030 	.word	0x20000030

08002154 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002154:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002156:	4817      	ldr	r0, [pc, #92]	@ (80021b4 <TIM14_IRQHandler+0x60>)
 8002158:	f001 f9aa 	bl	80034b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */


  // https://www.ganssle.com/debouncing-pt2.htm
  // Debounce button 1
  int btn_1 = HAL_GPIO_ReadPin(GPIOA, BTN1_Pin);
 800215c:	2090      	movs	r0, #144	@ 0x90
 800215e:	2102      	movs	r1, #2
 8002160:	05c0      	lsls	r0, r0, #23
 8002162:	f000 fbcd 	bl	8002900 <HAL_GPIO_ReadPin>
  static uint16_t State_1 = 0;
  State_1 = (State_1<<1) | !btn_1 | 0Xe000;
 8002166:	4241      	negs	r1, r0
 8002168:	4148      	adcs	r0, r1
 800216a:	4a13      	ldr	r2, [pc, #76]	@ (80021b8 <TIM14_IRQHandler+0x64>)
 800216c:	4c13      	ldr	r4, [pc, #76]	@ (80021bc <TIM14_IRQHandler+0x68>)
 800216e:	8813      	ldrh	r3, [r2, #0]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4318      	orrs	r0, r3
  if(State_1 == 0xf000) btn_1_is_debounced = 1;
 8002174:	23f0      	movs	r3, #240	@ 0xf0
  State_1 = (State_1<<1) | !btn_1 | 0Xe000;
 8002176:	4320      	orrs	r0, r4
 8002178:	b280      	uxth	r0, r0
 800217a:	8010      	strh	r0, [r2, #0]
  if(State_1 == 0xf000) btn_1_is_debounced = 1;
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	4298      	cmp	r0, r3
 8002180:	d102      	bne.n	8002188 <TIM14_IRQHandler+0x34>
 8002182:	2201      	movs	r2, #1
 8002184:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <TIM14_IRQHandler+0x6c>)
 8002186:	701a      	strb	r2, [r3, #0]

  // Debounce button 2
  int btn_2 = HAL_GPIO_ReadPin(GPIOA, BTN2_Pin);
 8002188:	2090      	movs	r0, #144	@ 0x90
 800218a:	2104      	movs	r1, #4
 800218c:	05c0      	lsls	r0, r0, #23
 800218e:	f000 fbb7 	bl	8002900 <HAL_GPIO_ReadPin>
  static uint16_t State_2 = 0;
  State_2 = (State_2<<1) | !btn_2 | 0Xe000;
 8002192:	4241      	negs	r1, r0
 8002194:	4148      	adcs	r0, r1
 8002196:	4a0b      	ldr	r2, [pc, #44]	@ (80021c4 <TIM14_IRQHandler+0x70>)
 8002198:	8813      	ldrh	r3, [r2, #0]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4318      	orrs	r0, r3
  if(State_2 == 0xf000) btn_2_is_debounced = 1;
 800219e:	23f0      	movs	r3, #240	@ 0xf0
  State_2 = (State_2<<1) | !btn_2 | 0Xe000;
 80021a0:	4304      	orrs	r4, r0
 80021a2:	b2a4      	uxth	r4, r4
 80021a4:	8014      	strh	r4, [r2, #0]
  if(State_2 == 0xf000) btn_2_is_debounced = 1;
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	429c      	cmp	r4, r3
 80021aa:	d102      	bne.n	80021b2 <TIM14_IRQHandler+0x5e>
 80021ac:	2201      	movs	r2, #1
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <TIM14_IRQHandler+0x74>)
 80021b0:	701a      	strb	r2, [r3, #0]


  /* USER CODE END TIM14_IRQn 1 */
}
 80021b2:	bd10      	pop	{r4, pc}
 80021b4:	20000178 	.word	0x20000178
 80021b8:	200002f6 	.word	0x200002f6
 80021bc:	ffffe000 	.word	0xffffe000
 80021c0:	200000cd 	.word	0x200000cd
 80021c4:	200002f4 	.word	0x200002f4
 80021c8:	200000cc 	.word	0x200000cc

080021cc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80021cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80021ce:	4803      	ldr	r0, [pc, #12]	@ (80021dc <TIM16_IRQHandler+0x10>)
 80021d0:	f001 f96e 	bl	80034b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  blink = 1;
 80021d4:	2201      	movs	r2, #1
 80021d6:	4b02      	ldr	r3, [pc, #8]	@ (80021e0 <TIM16_IRQHandler+0x14>)
 80021d8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM16_IRQn 1 */
}
 80021da:	bd10      	pop	{r4, pc}
 80021dc:	20000130 	.word	0x20000130
 80021e0:	200000c4 	.word	0x200000c4

080021e4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80021e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80021e6:	4804      	ldr	r0, [pc, #16]	@ (80021f8 <TIM17_IRQHandler+0x14>)
 80021e8:	f001 f962 	bl	80034b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  move_ball();
 80021ec:	f7fe ff26 	bl	800103c <move_ball>
  move_platform();
 80021f0:	f7ff f836 	bl	8001260 <move_platform>
  /* USER CODE END TIM17_IRQn 1 */
}
 80021f4:	bd10      	pop	{r4, pc}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	200000e8 	.word	0x200000e8

080021fc <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80021fc:	4770      	bx	lr
	...

08002200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002200:	480d      	ldr	r0, [pc, #52]	@ (8002238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002202:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002204:	f7ff fffa 	bl	80021fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002208:	480c      	ldr	r0, [pc, #48]	@ (800223c <LoopForever+0x6>)
  ldr r1, =_edata
 800220a:	490d      	ldr	r1, [pc, #52]	@ (8002240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800220c:	4a0d      	ldr	r2, [pc, #52]	@ (8002244 <LoopForever+0xe>)
  movs r3, #0
 800220e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002210:	e002      	b.n	8002218 <LoopCopyDataInit>

08002212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002216:	3304      	adds	r3, #4

08002218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800221c:	d3f9      	bcc.n	8002212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221e:	4a0a      	ldr	r2, [pc, #40]	@ (8002248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002220:	4c0a      	ldr	r4, [pc, #40]	@ (800224c <LoopForever+0x16>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002224:	e001      	b.n	800222a <LoopFillZerobss>

08002226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002228:	3204      	adds	r2, #4

0800222a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800222c:	d3fb      	bcc.n	8002226 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800222e:	f001 fcc7 	bl	8003bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002232:	f7ff fa7f 	bl	8001734 <main>

08002236 <LoopForever>:

LoopForever:
    b LoopForever
 8002236:	e7fe      	b.n	8002236 <LoopForever>
  ldr   r0, =_estack
 8002238:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800223c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002240:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002244:	08003ef8 	.word	0x08003ef8
  ldr r2, =_sbss
 8002248:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800224c:	200002fc 	.word	0x200002fc

08002250 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002250:	e7fe      	b.n	8002250 <ADC1_IRQHandler>
	...

08002254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002258:	20fa      	movs	r0, #250	@ 0xfa
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <HAL_InitTick+0x3c>)
 800225c:	0080      	lsls	r0, r0, #2
 800225e:	7819      	ldrb	r1, [r3, #0]
 8002260:	f7fd ff5c 	bl	800011c <__udivsi3>
 8002264:	4c0b      	ldr	r4, [pc, #44]	@ (8002294 <HAL_InitTick+0x40>)
 8002266:	0001      	movs	r1, r0
 8002268:	6820      	ldr	r0, [r4, #0]
 800226a:	f7fd ff57 	bl	800011c <__udivsi3>
 800226e:	f000 fa75 	bl	800275c <HAL_SYSTICK_Config>
 8002272:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002274:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002276:	2c00      	cmp	r4, #0
 8002278:	d109      	bne.n	800228e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227a:	2d03      	cmp	r5, #3
 800227c:	d807      	bhi.n	800228e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800227e:	3802      	subs	r0, #2
 8002280:	0022      	movs	r2, r4
 8002282:	0029      	movs	r1, r5
 8002284:	f000 fa34 	bl	80026f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002288:	0020      	movs	r0, r4
 800228a:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_InitTick+0x44>)
 800228c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800228e:	bd70      	pop	{r4, r5, r6, pc}
 8002290:	20000094 	.word	0x20000094
 8002294:	20000090 	.word	0x20000090
 8002298:	20000098 	.word	0x20000098

0800229c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800229c:	2310      	movs	r3, #16
 800229e:	4a06      	ldr	r2, [pc, #24]	@ (80022b8 <HAL_Init+0x1c>)
{
 80022a0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a2:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a6:	430b      	orrs	r3, r1
 80022a8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80022aa:	f7ff ffd3 	bl	8002254 <HAL_InitTick>
  HAL_MspInit();
 80022ae:	f7ff fe2f 	bl	8001f10 <HAL_MspInit>
}
 80022b2:	2000      	movs	r0, #0
 80022b4:	bd10      	pop	{r4, pc}
 80022b6:	46c0      	nop			@ (mov r8, r8)
 80022b8:	40022000 	.word	0x40022000

080022bc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80022bc:	4a03      	ldr	r2, [pc, #12]	@ (80022cc <HAL_IncTick+0x10>)
 80022be:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <HAL_IncTick+0x14>)
 80022c0:	6811      	ldr	r1, [r2, #0]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	185b      	adds	r3, r3, r1
 80022c6:	6013      	str	r3, [r2, #0]
}
 80022c8:	4770      	bx	lr
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	200002f8 	.word	0x200002f8
 80022d0:	20000094 	.word	0x20000094

080022d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80022d4:	4b01      	ldr	r3, [pc, #4]	@ (80022dc <HAL_GetTick+0x8>)
 80022d6:	6818      	ldr	r0, [r3, #0]
}
 80022d8:	4770      	bx	lr
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	200002f8 	.word	0x200002f8

080022e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e0:	b570      	push	{r4, r5, r6, lr}
 80022e2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff fff6 	bl	80022d4 <HAL_GetTick>
 80022e8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ea:	1c63      	adds	r3, r4, #1
 80022ec:	d002      	beq.n	80022f4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ee:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <HAL_Delay+0x20>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022f4:	f7ff ffee 	bl	80022d4 <HAL_GetTick>
 80022f8:	1b40      	subs	r0, r0, r5
 80022fa:	42a0      	cmp	r0, r4
 80022fc:	d3fa      	bcc.n	80022f4 <HAL_Delay+0x14>
  {
  }
}
 80022fe:	bd70      	pop	{r4, r5, r6, pc}
 8002300:	20000094 	.word	0x20000094

08002304 <ADC_Enable.constprop.0>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002304:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8002306:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002308:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 800230a:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800230c:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 800230e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	400a      	ands	r2, r1
 8002314:	2a01      	cmp	r2, #1
 8002316:	d107      	bne.n	8002328 <ADC_Enable.constprop.0+0x24>
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	4211      	tst	r1, r2
 800231c:	d001      	beq.n	8002322 <ADC_Enable.constprop.0+0x1e>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800231e:	2000      	movs	r0, #0
}
 8002320:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	0412      	lsls	r2, r2, #16
 8002326:	d4fa      	bmi.n	800231e <ADC_Enable.constprop.0+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002328:	6899      	ldr	r1, [r3, #8]
 800232a:	4a1b      	ldr	r2, [pc, #108]	@ (8002398 <ADC_Enable.constprop.0+0x94>)
 800232c:	4211      	tst	r1, r2
 800232e:	d009      	beq.n	8002344 <ADC_Enable.constprop.0+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002330:	2310      	movs	r3, #16
 8002332:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002334:	4313      	orrs	r3, r2
 8002336:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002338:	2301      	movs	r3, #1
 800233a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800233c:	4313      	orrs	r3, r2
      return HAL_ERROR;
 800233e:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002340:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002342:	e7ed      	b.n	8002320 <ADC_Enable.constprop.0+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8002344:	2201      	movs	r2, #1
 8002346:	6899      	ldr	r1, [r3, #8]
 8002348:	430a      	orrs	r2, r1
 800234a:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <ADC_Enable.constprop.0+0x98>)
 800234e:	4914      	ldr	r1, [pc, #80]	@ (80023a0 <ADC_Enable.constprop.0+0x9c>)
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	f7fd fee3 	bl	800011c <__udivsi3>
 8002356:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8002358:	9b01      	ldr	r3, [sp, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d117      	bne.n	800238e <ADC_Enable.constprop.0+0x8a>
    tickstart = HAL_GetTick();
 800235e:	f7ff ffb9 	bl	80022d4 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002362:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8002364:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	422b      	tst	r3, r5
 800236c:	d1d7      	bne.n	800231e <ADC_Enable.constprop.0+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800236e:	f7ff ffb1 	bl	80022d4 <HAL_GetTick>
 8002372:	1b80      	subs	r0, r0, r6
 8002374:	2802      	cmp	r0, #2
 8002376:	d9f6      	bls.n	8002366 <ADC_Enable.constprop.0+0x62>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	422b      	tst	r3, r5
 800237e:	d1f2      	bne.n	8002366 <ADC_Enable.constprop.0+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002380:	2310      	movs	r3, #16
 8002382:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002384:	4313      	orrs	r3, r2
 8002386:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002388:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800238a:	432b      	orrs	r3, r5
 800238c:	e7d7      	b.n	800233e <ADC_Enable.constprop.0+0x3a>
      wait_loop_index--;
 800238e:	9b01      	ldr	r3, [sp, #4]
 8002390:	3b01      	subs	r3, #1
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	e7e0      	b.n	8002358 <ADC_Enable.constprop.0+0x54>
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	80000017 	.word	0x80000017
 800239c:	20000090 	.word	0x20000090
 80023a0:	000f4240 	.word	0x000f4240

080023a4 <HAL_ADC_Init>:
{
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80023a8:	d100      	bne.n	80023ac <HAL_ADC_Init+0x8>
 80023aa:	e090      	b.n	80024ce <HAL_ADC_Init+0x12a>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023ac:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <HAL_ADC_Init+0x1a>
    hadc->Lock = HAL_UNLOCKED;
 80023b2:	0002      	movs	r2, r0
 80023b4:	3234      	adds	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80023b6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 80023b8:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80023ba:	f7ff fdc1 	bl	8001f40 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80023c0:	06db      	lsls	r3, r3, #27
 80023c2:	d500      	bpl.n	80023c6 <HAL_ADC_Init+0x22>
 80023c4:	e085      	b.n	80024d2 <HAL_ADC_Init+0x12e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80023c6:	6822      	ldr	r2, [r4, #0]
 80023c8:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80023ca:	075b      	lsls	r3, r3, #29
 80023cc:	d500      	bpl.n	80023d0 <HAL_ADC_Init+0x2c>
 80023ce:	e080      	b.n	80024d2 <HAL_ADC_Init+0x12e>
    ADC_STATE_CLR_SET(hadc->State,
 80023d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80023d2:	4b42      	ldr	r3, [pc, #264]	@ (80024dc <HAL_ADC_Init+0x138>)
 80023d4:	4019      	ands	r1, r3
 80023d6:	3306      	adds	r3, #6
 80023d8:	33ff      	adds	r3, #255	@ 0xff
 80023da:	430b      	orrs	r3, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80023dc:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80023de:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80023e0:	6893      	ldr	r3, [r2, #8]
 80023e2:	400b      	ands	r3, r1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_ADC_Init+0x50>
 80023e8:	6811      	ldr	r1, [r2, #0]
 80023ea:	4219      	tst	r1, r3
 80023ec:	d10e      	bne.n	800240c <HAL_ADC_Init+0x68>
 80023ee:	68d3      	ldr	r3, [r2, #12]
 80023f0:	041b      	lsls	r3, r3, #16
 80023f2:	d40b      	bmi.n	800240c <HAL_ADC_Init+0x68>
      MODIFY_REG(hadc->Instance->CFGR1,
 80023f4:	2118      	movs	r1, #24
 80023f6:	68d3      	ldr	r3, [r2, #12]
 80023f8:	438b      	bics	r3, r1
 80023fa:	68a1      	ldr	r1, [r4, #8]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002400:	6913      	ldr	r3, [r2, #16]
 8002402:	6861      	ldr	r1, [r4, #4]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	430b      	orrs	r3, r1
 800240a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800240c:	68d3      	ldr	r3, [r2, #12]
 800240e:	4934      	ldr	r1, [pc, #208]	@ (80024e0 <HAL_ADC_Init+0x13c>)
 8002410:	400b      	ands	r3, r1
 8002412:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002414:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002416:	7e60      	ldrb	r0, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002418:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800241a:	03c0      	lsls	r0, r0, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800241c:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800241e:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002420:	68e0      	ldr	r0, [r4, #12]
 8002422:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002424:	0348      	lsls	r0, r1, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002426:	4303      	orrs	r3, r0
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002428:	1d60      	adds	r0, r4, #5
 800242a:	7fc0      	ldrb	r0, [r0, #31]
 800242c:	0040      	lsls	r0, r0, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800242e:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002430:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002432:	3801      	subs	r0, #1
 8002434:	1e45      	subs	r5, r0, #1
 8002436:	41a8      	sbcs	r0, r5
 8002438:	0300      	lsls	r0, r0, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800243a:	4303      	orrs	r3, r0
 800243c:	6920      	ldr	r0, [r4, #16]
 800243e:	3802      	subs	r0, #2
 8002440:	4245      	negs	r5, r0
 8002442:	4168      	adcs	r0, r5
 8002444:	0080      	lsls	r0, r0, #2
 8002446:	4303      	orrs	r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002448:	7ee0      	ldrb	r0, [r4, #27]
 800244a:	2801      	cmp	r0, #1
 800244c:	d104      	bne.n	8002458 <HAL_ADC_Init+0xb4>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800244e:	2900      	cmp	r1, #0
 8002450:	d12b      	bne.n	80024aa <HAL_ADC_Init+0x106>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002452:	2180      	movs	r1, #128	@ 0x80
 8002454:	0249      	lsls	r1, r1, #9
 8002456:	430b      	orrs	r3, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002458:	20c2      	movs	r0, #194	@ 0xc2
 800245a:	69e1      	ldr	r1, [r4, #28]
 800245c:	30ff      	adds	r0, #255	@ 0xff
 800245e:	4281      	cmp	r1, r0
 8002460:	d002      	beq.n	8002468 <HAL_ADC_Init+0xc4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002462:	6a20      	ldr	r0, [r4, #32]
 8002464:	4301      	orrs	r1, r0
 8002466:	430b      	orrs	r3, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002468:	2080      	movs	r0, #128	@ 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800246a:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800246c:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800246e:	4319      	orrs	r1, r3
 8002470:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002472:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002474:	4281      	cmp	r1, r0
 8002476:	d002      	beq.n	800247e <HAL_ADC_Init+0xda>
 8002478:	1e48      	subs	r0, r1, #1
 800247a:	2806      	cmp	r0, #6
 800247c:	d807      	bhi.n	800248e <HAL_ADC_Init+0xea>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800247e:	2507      	movs	r5, #7
 8002480:	6950      	ldr	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002482:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002484:	43a8      	bics	r0, r5
 8002486:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002488:	6950      	ldr	r0, [r2, #20]
 800248a:	4301      	orrs	r1, r0
 800248c:	6151      	str	r1, [r2, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800248e:	68d2      	ldr	r2, [r2, #12]
 8002490:	4914      	ldr	r1, [pc, #80]	@ (80024e4 <HAL_ADC_Init+0x140>)
 8002492:	400a      	ands	r2, r1
 8002494:	429a      	cmp	r2, r3
 8002496:	d110      	bne.n	80024ba <HAL_ADC_Init+0x116>
      ADC_CLEAR_ERRORCODE(hadc);
 8002498:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800249a:	2303      	movs	r3, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800249c:	63e0      	str	r0, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800249e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80024a0:	439a      	bics	r2, r3
 80024a2:	3b02      	subs	r3, #2
 80024a4:	4313      	orrs	r3, r2
 80024a6:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80024a8:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024aa:	2120      	movs	r1, #32
 80024ac:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80024ae:	4329      	orrs	r1, r5
 80024b0:	63a1      	str	r1, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80024b4:	4308      	orrs	r0, r1
 80024b6:	63e0      	str	r0, [r4, #60]	@ 0x3c
 80024b8:	e7ce      	b.n	8002458 <HAL_ADC_Init+0xb4>
      ADC_STATE_CLR_SET(hadc->State,
 80024ba:	2312      	movs	r3, #18
 80024bc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80024be:	439a      	bics	r2, r3
 80024c0:	3b02      	subs	r3, #2
 80024c2:	4313      	orrs	r3, r2
 80024c4:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c6:	2301      	movs	r3, #1
 80024c8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80024ca:	4313      	orrs	r3, r2
 80024cc:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80024ce:	2001      	movs	r0, #1
 80024d0:	e7ea      	b.n	80024a8 <HAL_ADC_Init+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d2:	2310      	movs	r3, #16
 80024d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80024d6:	4313      	orrs	r3, r2
 80024d8:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 80024da:	e7f8      	b.n	80024ce <HAL_ADC_Init+0x12a>
 80024dc:	fffffefd 	.word	0xfffffefd
 80024e0:	fffe0219 	.word	0xfffe0219
 80024e4:	833fffe7 	.word	0x833fffe7

080024e8 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024e8:	6803      	ldr	r3, [r0, #0]
{
 80024ea:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024ec:	689b      	ldr	r3, [r3, #8]
{
 80024ee:	0004      	movs	r4, r0
    __HAL_LOCK(hadc);
 80024f0:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024f2:	075b      	lsls	r3, r3, #29
 80024f4:	d41a      	bmi.n	800252c <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80024f6:	0025      	movs	r5, r4
 80024f8:	3534      	adds	r5, #52	@ 0x34
 80024fa:	782b      	ldrb	r3, [r5, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d015      	beq.n	800252c <HAL_ADC_Start+0x44>
 8002500:	2301      	movs	r3, #1
 8002502:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002504:	7e63      	ldrb	r3, [r4, #25]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d111      	bne.n	800252e <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 800250a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800250c:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 800250e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002510:	401a      	ands	r2, r3
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002518:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800251a:	63a3      	str	r3, [r4, #56]	@ 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 800251c:	63e0      	str	r0, [r4, #60]	@ 0x3c
      __HAL_UNLOCK(hadc);
 800251e:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002524:	6899      	ldr	r1, [r3, #8]
 8002526:	3a18      	subs	r2, #24
 8002528:	430a      	orrs	r2, r1
 800252a:	609a      	str	r2, [r3, #8]
}
 800252c:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800252e:	0020      	movs	r0, r4
 8002530:	f7ff fee8 	bl	8002304 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 8002534:	2800      	cmp	r0, #0
 8002536:	d0e8      	beq.n	800250a <HAL_ADC_Start+0x22>
 8002538:	e7f8      	b.n	800252c <HAL_ADC_Start+0x44>
 800253a:	46c0      	nop			@ (mov r8, r8)
 800253c:	fffff0fe 	.word	0xfffff0fe

08002540 <HAL_ADC_PollForConversion>:
{
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002542:	6945      	ldr	r5, [r0, #20]
{
 8002544:	0004      	movs	r4, r0
 8002546:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002548:	2d08      	cmp	r5, #8
 800254a:	d00d      	beq.n	8002568 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800254c:	6803      	ldr	r3, [r0, #0]
 800254e:	2001      	movs	r0, #1
 8002550:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002552:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002554:	4203      	tst	r3, r0
 8002556:	d007      	beq.n	8002568 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002558:	2320      	movs	r3, #32
 800255a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
      __HAL_UNLOCK(hadc);
 800255c:	3434      	adds	r4, #52	@ 0x34
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255e:	4313      	orrs	r3, r2
 8002560:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8002562:	2300      	movs	r3, #0
 8002564:	7023      	strb	r3, [r4, #0]
}
 8002566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8002568:	f7ff feb4 	bl	80022d4 <HAL_GetTick>
 800256c:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4215      	tst	r5, r2
 8002574:	d022      	beq.n	80025bc <HAL_ADC_PollForConversion+0x7c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002576:	2280      	movs	r2, #128	@ 0x80
 8002578:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800257a:	0092      	lsls	r2, r2, #2
 800257c:	430a      	orrs	r2, r1
 800257e:	63a2      	str	r2, [r4, #56]	@ 0x38
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002580:	22c0      	movs	r2, #192	@ 0xc0
 8002582:	68d9      	ldr	r1, [r3, #12]
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	4211      	tst	r1, r2
 8002588:	d113      	bne.n	80025b2 <HAL_ADC_PollForConversion+0x72>
 800258a:	7ea2      	ldrb	r2, [r4, #26]
 800258c:	2a00      	cmp	r2, #0
 800258e:	d110      	bne.n	80025b2 <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	0712      	lsls	r2, r2, #28
 8002594:	d50d      	bpl.n	80025b2 <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	0752      	lsls	r2, r2, #29
 800259a:	d427      	bmi.n	80025ec <HAL_ADC_PollForConversion+0xac>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800259c:	210c      	movs	r1, #12
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	438a      	bics	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80025a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80025a6:	4a17      	ldr	r2, [pc, #92]	@ (8002604 <HAL_ADC_PollForConversion+0xc4>)
 80025a8:	4011      	ands	r1, r2
 80025aa:	3204      	adds	r2, #4
 80025ac:	32ff      	adds	r2, #255	@ 0xff
 80025ae:	430a      	orrs	r2, r1
 80025b0:	63a2      	str	r2, [r4, #56]	@ 0x38
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80025b2:	7e22      	ldrb	r2, [r4, #24]
 80025b4:	2a00      	cmp	r2, #0
 80025b6:	d022      	beq.n	80025fe <HAL_ADC_PollForConversion+0xbe>
  return HAL_OK;
 80025b8:	2000      	movs	r0, #0
 80025ba:	e7d4      	b.n	8002566 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80025bc:	1c72      	adds	r2, r6, #1
 80025be:	d0d7      	beq.n	8002570 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80025c0:	2e00      	cmp	r6, #0
 80025c2:	d10d      	bne.n	80025e0 <HAL_ADC_PollForConversion+0xa0>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80025c4:	002a      	movs	r2, r5
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	401a      	ands	r2, r3
 80025cc:	421d      	tst	r5, r3
 80025ce:	d1ce      	bne.n	800256e <HAL_ADC_PollForConversion+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025d0:	2304      	movs	r3, #4
 80025d2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
          __HAL_UNLOCK(hadc);
 80025d4:	3434      	adds	r4, #52	@ 0x34
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025d6:	430b      	orrs	r3, r1
 80025d8:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 80025da:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80025dc:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 80025de:	e7c2      	b.n	8002566 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80025e0:	f7ff fe78 	bl	80022d4 <HAL_GetTick>
 80025e4:	1bc0      	subs	r0, r0, r7
 80025e6:	42b0      	cmp	r0, r6
 80025e8:	d8ec      	bhi.n	80025c4 <HAL_ADC_PollForConversion+0x84>
 80025ea:	e7c0      	b.n	800256e <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ec:	2220      	movs	r2, #32
 80025ee:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80025f0:	430a      	orrs	r2, r1
 80025f2:	63a2      	str	r2, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f4:	2201      	movs	r2, #1
 80025f6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80025f8:	430a      	orrs	r2, r1
 80025fa:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80025fc:	e7d9      	b.n	80025b2 <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025fe:	220c      	movs	r2, #12
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e7d9      	b.n	80025b8 <HAL_ADC_PollForConversion+0x78>
 8002604:	fffffefe 	.word	0xfffffefe

08002608 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8002608:	6803      	ldr	r3, [r0, #0]
 800260a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800260c:	4770      	bx	lr
	...

08002610 <HAL_ADC_ConfigChannel>:
{
 8002610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002612:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002614:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8002616:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002618:	3434      	adds	r4, #52	@ 0x34
 800261a:	7822      	ldrb	r2, [r4, #0]
{
 800261c:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800261e:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 8002620:	2002      	movs	r0, #2
 8002622:	2a01      	cmp	r2, #1
 8002624:	d02a      	beq.n	800267c <HAL_ADC_ConfigChannel+0x6c>
 8002626:	3801      	subs	r0, #1
 8002628:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	6895      	ldr	r5, [r2, #8]
 800262e:	076d      	lsls	r5, r5, #29
 8002630:	d44e      	bmi.n	80026d0 <HAL_ADC_ConfigChannel+0xc0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002632:	680d      	ldr	r5, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8002634:	684f      	ldr	r7, [r1, #4]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002636:	002b      	movs	r3, r5
    if (sConfig->Rank != ADC_RANK_NONE)
 8002638:	46bc      	mov	ip, r7
 800263a:	4f28      	ldr	r7, [pc, #160]	@ (80026dc <HAL_ADC_ConfigChannel+0xcc>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800263c:	40a8      	lsls	r0, r5
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800263e:	3b10      	subs	r3, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 8002640:	45bc      	cmp	ip, r7
 8002642:	d036      	beq.n	80026b2 <HAL_ADC_ConfigChannel+0xa2>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002644:	6a97      	ldr	r7, [r2, #40]	@ 0x28
 8002646:	4338      	orrs	r0, r7
 8002648:	6290      	str	r0, [r2, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800264a:	2080      	movs	r0, #128	@ 0x80
 800264c:	0540      	lsls	r0, r0, #21
 800264e:	4286      	cmp	r6, r0
 8002650:	d00f      	beq.n	8002672 <HAL_ADC_ConfigChannel+0x62>
 8002652:	3e01      	subs	r6, #1
 8002654:	2e06      	cmp	r6, #6
 8002656:	d90c      	bls.n	8002672 <HAL_ADC_ConfigChannel+0x62>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002658:	2007      	movs	r0, #7
 800265a:	6956      	ldr	r6, [r2, #20]
 800265c:	6889      	ldr	r1, [r1, #8]
 800265e:	4006      	ands	r6, r0
 8002660:	42b1      	cmp	r1, r6
 8002662:	d006      	beq.n	8002672 <HAL_ADC_ConfigChannel+0x62>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002664:	6956      	ldr	r6, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002666:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002668:	4386      	bics	r6, r0
 800266a:	6156      	str	r6, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800266c:	6956      	ldr	r6, [r2, #20]
 800266e:	4331      	orrs	r1, r6
 8002670:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002672:	2b01      	cmp	r3, #1
 8002674:	d903      	bls.n	800267e <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002676:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002678:	2300      	movs	r3, #0
 800267a:	7023      	strb	r3, [r4, #0]
}
 800267c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800267e:	4a18      	ldr	r2, [pc, #96]	@ (80026e0 <HAL_ADC_ConfigChannel+0xd0>)
 8002680:	2180      	movs	r1, #128	@ 0x80
 8002682:	6813      	ldr	r3, [r2, #0]
 8002684:	2d10      	cmp	r5, #16
 8002686:	d012      	beq.n	80026ae <HAL_ADC_ConfigChannel+0x9e>
 8002688:	03c9      	lsls	r1, r1, #15
 800268a:	430b      	orrs	r3, r1
 800268c:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268e:	2d10      	cmp	r5, #16
 8002690:	d1f1      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002692:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <HAL_ADC_ConfigChannel+0xd4>)
 8002694:	4914      	ldr	r1, [pc, #80]	@ (80026e8 <HAL_ADC_ConfigChannel+0xd8>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	f7fd fd40 	bl	800011c <__udivsi3>
 800269c:	230a      	movs	r3, #10
 800269e:	4343      	muls	r3, r0
            wait_loop_index--;
 80026a0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80026a2:	9b01      	ldr	r3, [sp, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0e6      	beq.n	8002676 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 80026a8:	9b01      	ldr	r3, [sp, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	e7f8      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x90>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80026ae:	0409      	lsls	r1, r1, #16
 80026b0:	e7eb      	b.n	800268a <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80026b2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80026b4:	4381      	bics	r1, r0
 80026b6:	6291      	str	r1, [r2, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d8dc      	bhi.n	8002676 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80026bc:	1e58      	subs	r0, r3, #1
 80026be:	4183      	sbcs	r3, r0
 80026c0:	4a07      	ldr	r2, [pc, #28]	@ (80026e0 <HAL_ADC_ConfigChannel+0xd0>)
 80026c2:	480a      	ldr	r0, [pc, #40]	@ (80026ec <HAL_ADC_ConfigChannel+0xdc>)
 80026c4:	6811      	ldr	r1, [r2, #0]
 80026c6:	059b      	lsls	r3, r3, #22
 80026c8:	181b      	adds	r3, r3, r0
 80026ca:	400b      	ands	r3, r1
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e7d2      	b.n	8002676 <HAL_ADC_ConfigChannel+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d0:	2220      	movs	r2, #32
 80026d2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80026d4:	430a      	orrs	r2, r1
 80026d6:	639a      	str	r2, [r3, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 80026d8:	e7ce      	b.n	8002678 <HAL_ADC_ConfigChannel+0x68>
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	00001001 	.word	0x00001001
 80026e0:	40012708 	.word	0x40012708
 80026e4:	20000090 	.word	0x20000090
 80026e8:	000f4240 	.word	0x000f4240
 80026ec:	ff7fffff 	.word	0xff7fffff

080026f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f0:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026f2:	24ff      	movs	r4, #255	@ 0xff
 80026f4:	2203      	movs	r2, #3
 80026f6:	000b      	movs	r3, r1
 80026f8:	0021      	movs	r1, r4
 80026fa:	4002      	ands	r2, r0
 80026fc:	00d2      	lsls	r2, r2, #3
 80026fe:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002700:	019b      	lsls	r3, r3, #6
 8002702:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002704:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002706:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8002708:	2800      	cmp	r0, #0
 800270a:	db0a      	blt.n	8002722 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800270c:	24c0      	movs	r4, #192	@ 0xc0
 800270e:	4a0b      	ldr	r2, [pc, #44]	@ (800273c <HAL_NVIC_SetPriority+0x4c>)
 8002710:	0880      	lsrs	r0, r0, #2
 8002712:	0080      	lsls	r0, r0, #2
 8002714:	1880      	adds	r0, r0, r2
 8002716:	00a4      	lsls	r4, r4, #2
 8002718:	5902      	ldr	r2, [r0, r4]
 800271a:	400a      	ands	r2, r1
 800271c:	4313      	orrs	r3, r2
 800271e:	5103      	str	r3, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002720:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002722:	220f      	movs	r2, #15
 8002724:	4010      	ands	r0, r2
 8002726:	3808      	subs	r0, #8
 8002728:	4a05      	ldr	r2, [pc, #20]	@ (8002740 <HAL_NVIC_SetPriority+0x50>)
 800272a:	0880      	lsrs	r0, r0, #2
 800272c:	0080      	lsls	r0, r0, #2
 800272e:	1880      	adds	r0, r0, r2
 8002730:	69c2      	ldr	r2, [r0, #28]
 8002732:	4011      	ands	r1, r2
 8002734:	4319      	orrs	r1, r3
 8002736:	61c1      	str	r1, [r0, #28]
 8002738:	e7f2      	b.n	8002720 <HAL_NVIC_SetPriority+0x30>
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	e000e100 	.word	0xe000e100
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002744:	2800      	cmp	r0, #0
 8002746:	db05      	blt.n	8002754 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002748:	231f      	movs	r3, #31
 800274a:	4018      	ands	r0, r3
 800274c:	3b1e      	subs	r3, #30
 800274e:	4083      	lsls	r3, r0
 8002750:	4a01      	ldr	r2, [pc, #4]	@ (8002758 <HAL_NVIC_EnableIRQ+0x14>)
 8002752:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002754:	4770      	bx	lr
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	e000e100 	.word	0xe000e100

0800275c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800275c:	2280      	movs	r2, #128	@ 0x80
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002762:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002764:	4293      	cmp	r3, r2
 8002766:	d20d      	bcs.n	8002784 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002768:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276a:	4a07      	ldr	r2, [pc, #28]	@ (8002788 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800276c:	4807      	ldr	r0, [pc, #28]	@ (800278c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002770:	6a03      	ldr	r3, [r0, #32]
 8002772:	0609      	lsls	r1, r1, #24
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	430b      	orrs	r3, r1
 800277a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800277c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002780:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002782:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002784:	4770      	bx	lr
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	e000e010 	.word	0xe000e010
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8002790:	2300      	movs	r3, #0
{
 8002792:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002794:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002796:	680a      	ldr	r2, [r1, #0]
 8002798:	0014      	movs	r4, r2
 800279a:	40dc      	lsrs	r4, r3
 800279c:	d101      	bne.n	80027a2 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 800279e:	b007      	add	sp, #28
 80027a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027a2:	2501      	movs	r5, #1
 80027a4:	0014      	movs	r4, r2
 80027a6:	409d      	lsls	r5, r3
 80027a8:	402c      	ands	r4, r5
 80027aa:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 80027ac:	422a      	tst	r2, r5
 80027ae:	d100      	bne.n	80027b2 <HAL_GPIO_Init+0x22>
 80027b0:	e098      	b.n	80028e4 <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027b2:	684a      	ldr	r2, [r1, #4]
 80027b4:	005f      	lsls	r7, r3, #1
 80027b6:	4694      	mov	ip, r2
 80027b8:	2203      	movs	r2, #3
 80027ba:	4664      	mov	r4, ip
 80027bc:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027be:	2403      	movs	r4, #3
 80027c0:	40bc      	lsls	r4, r7
 80027c2:	43e4      	mvns	r4, r4
 80027c4:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027c6:	1e54      	subs	r4, r2, #1
 80027c8:	2c01      	cmp	r4, #1
 80027ca:	d82e      	bhi.n	800282a <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 80027cc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027ce:	9c01      	ldr	r4, [sp, #4]
 80027d0:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027d2:	68cc      	ldr	r4, [r1, #12]
 80027d4:	40bc      	lsls	r4, r7
 80027d6:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80027d8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80027da:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027dc:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027de:	43ac      	bics	r4, r5
 80027e0:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e2:	4664      	mov	r4, ip
 80027e4:	0924      	lsrs	r4, r4, #4
 80027e6:	4034      	ands	r4, r6
 80027e8:	409c      	lsls	r4, r3
 80027ea:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80027ec:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80027ee:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027f0:	9c01      	ldr	r4, [sp, #4]
 80027f2:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027f4:	688c      	ldr	r4, [r1, #8]
 80027f6:	40bc      	lsls	r4, r7
 80027f8:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80027fa:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fc:	2a02      	cmp	r2, #2
 80027fe:	d116      	bne.n	800282e <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002800:	2507      	movs	r5, #7
 8002802:	260f      	movs	r6, #15
 8002804:	401d      	ands	r5, r3
 8002806:	00ad      	lsls	r5, r5, #2
 8002808:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 800280a:	08dc      	lsrs	r4, r3, #3
 800280c:	00a4      	lsls	r4, r4, #2
 800280e:	1904      	adds	r4, r0, r4
 8002810:	9402      	str	r4, [sp, #8]
 8002812:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002814:	9603      	str	r6, [sp, #12]
 8002816:	0026      	movs	r6, r4
 8002818:	9c03      	ldr	r4, [sp, #12]
 800281a:	43a6      	bics	r6, r4
 800281c:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800281e:	690e      	ldr	r6, [r1, #16]
 8002820:	40ae      	lsls	r6, r5
 8002822:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8002824:	9c02      	ldr	r4, [sp, #8]
 8002826:	6226      	str	r6, [r4, #32]
 8002828:	e001      	b.n	800282e <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800282a:	2a03      	cmp	r2, #3
 800282c:	d1df      	bne.n	80027ee <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800282e:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8002830:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002832:	9d01      	ldr	r5, [sp, #4]
 8002834:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002836:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002838:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 800283a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800283c:	4662      	mov	r2, ip
 800283e:	02a4      	lsls	r4, r4, #10
 8002840:	4222      	tst	r2, r4
 8002842:	d04f      	beq.n	80028e4 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002844:	2501      	movs	r5, #1
 8002846:	4a28      	ldr	r2, [pc, #160]	@ (80028e8 <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002848:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284a:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800284c:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284e:	432c      	orrs	r4, r5
 8002850:	6194      	str	r4, [r2, #24]
 8002852:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002854:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002856:	402a      	ands	r2, r5
 8002858:	9205      	str	r2, [sp, #20]
 800285a:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 800285c:	4a23      	ldr	r2, [pc, #140]	@ (80028ec <HAL_GPIO_Init+0x15c>)
 800285e:	00a4      	lsls	r4, r4, #2
 8002860:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002862:	220f      	movs	r2, #15
 8002864:	3502      	adds	r5, #2
 8002866:	401d      	ands	r5, r3
 8002868:	00ad      	lsls	r5, r5, #2
 800286a:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 800286c:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800286e:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002870:	2200      	movs	r2, #0
 8002872:	42b8      	cmp	r0, r7
 8002874:	d00c      	beq.n	8002890 <HAL_GPIO_Init+0x100>
 8002876:	4f1e      	ldr	r7, [pc, #120]	@ (80028f0 <HAL_GPIO_Init+0x160>)
 8002878:	3201      	adds	r2, #1
 800287a:	42b8      	cmp	r0, r7
 800287c:	d008      	beq.n	8002890 <HAL_GPIO_Init+0x100>
 800287e:	4f1d      	ldr	r7, [pc, #116]	@ (80028f4 <HAL_GPIO_Init+0x164>)
 8002880:	3201      	adds	r2, #1
 8002882:	42b8      	cmp	r0, r7
 8002884:	d004      	beq.n	8002890 <HAL_GPIO_Init+0x100>
 8002886:	4f1c      	ldr	r7, [pc, #112]	@ (80028f8 <HAL_GPIO_Init+0x168>)
 8002888:	3203      	adds	r2, #3
 800288a:	42b8      	cmp	r0, r7
 800288c:	d100      	bne.n	8002890 <HAL_GPIO_Init+0x100>
 800288e:	3a02      	subs	r2, #2
 8002890:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002892:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002894:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002896:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8002898:	4a18      	ldr	r2, [pc, #96]	@ (80028fc <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 800289a:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 800289c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800289e:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 80028a0:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80028a2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028a4:	02ff      	lsls	r7, r7, #11
 80028a6:	d401      	bmi.n	80028ac <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 80028a8:	0035      	movs	r5, r6
 80028aa:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028ac:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80028ae:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80028b0:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80028b2:	9d00      	ldr	r5, [sp, #0]
 80028b4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028b6:	02bf      	lsls	r7, r7, #10
 80028b8:	d401      	bmi.n	80028be <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 80028ba:	0035      	movs	r5, r6
 80028bc:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028be:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80028c0:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80028c2:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80028c4:	9d00      	ldr	r5, [sp, #0]
 80028c6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028c8:	03bf      	lsls	r7, r7, #14
 80028ca:	d401      	bmi.n	80028d0 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 80028cc:	0035      	movs	r5, r6
 80028ce:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028d0:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80028d2:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80028d4:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80028d6:	9e00      	ldr	r6, [sp, #0]
 80028d8:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028da:	03ff      	lsls	r7, r7, #15
 80028dc:	d401      	bmi.n	80028e2 <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 80028de:	4025      	ands	r5, r4
 80028e0:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80028e2:	6016      	str	r6, [r2, #0]
    position++;
 80028e4:	3301      	adds	r3, #1
 80028e6:	e756      	b.n	8002796 <HAL_GPIO_Init+0x6>
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40010000 	.word	0x40010000
 80028f0:	48000400 	.word	0x48000400
 80028f4:	48000800 	.word	0x48000800
 80028f8:	48000c00 	.word	0x48000c00
 80028fc:	40010400 	.word	0x40010400

08002900 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002900:	6900      	ldr	r0, [r0, #16]
 8002902:	4008      	ands	r0, r1
 8002904:	1e43      	subs	r3, r0, #1
 8002906:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002908:	b2c0      	uxtb	r0, r0
  }
 800290a:	4770      	bx	lr

0800290c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800290c:	2a00      	cmp	r2, #0
 800290e:	d001      	beq.n	8002914 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002910:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002912:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002914:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8002916:	e7fc      	b.n	8002912 <HAL_GPIO_WritePin+0x6>

08002918 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002918:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800291a:	0013      	movs	r3, r2
 800291c:	400b      	ands	r3, r1
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	4391      	bics	r1, r2
 8002922:	430b      	orrs	r3, r1
 8002924:	6183      	str	r3, [r0, #24]
}
 8002926:	4770      	bx	lr

08002928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292a:	0004      	movs	r4, r0
 800292c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800292e:	2800      	cmp	r0, #0
 8002930:	d045      	beq.n	80029be <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002932:	6803      	ldr	r3, [r0, #0]
 8002934:	07db      	lsls	r3, r3, #31
 8002936:	d42f      	bmi.n	8002998 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	079b      	lsls	r3, r3, #30
 800293c:	d500      	bpl.n	8002940 <HAL_RCC_OscConfig+0x18>
 800293e:	e081      	b.n	8002a44 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	071b      	lsls	r3, r3, #28
 8002944:	d500      	bpl.n	8002948 <HAL_RCC_OscConfig+0x20>
 8002946:	e0bc      	b.n	8002ac2 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	075b      	lsls	r3, r3, #29
 800294c:	d500      	bpl.n	8002950 <HAL_RCC_OscConfig+0x28>
 800294e:	e0df      	b.n	8002b10 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	06db      	lsls	r3, r3, #27
 8002954:	d51a      	bpl.n	800298c <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002956:	6962      	ldr	r2, [r4, #20]
 8002958:	2304      	movs	r3, #4
 800295a:	4db4      	ldr	r5, [pc, #720]	@ (8002c2c <HAL_RCC_OscConfig+0x304>)
 800295c:	2a01      	cmp	r2, #1
 800295e:	d000      	beq.n	8002962 <HAL_RCC_OscConfig+0x3a>
 8002960:	e148      	b.n	8002bf4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002962:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002964:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002966:	430b      	orrs	r3, r1
 8002968:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 800296a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800296c:	431a      	orrs	r2, r3
 800296e:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8002970:	f7ff fcb0 	bl	80022d4 <HAL_GetTick>
 8002974:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002976:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002978:	423b      	tst	r3, r7
 800297a:	d100      	bne.n	800297e <HAL_RCC_OscConfig+0x56>
 800297c:	e133      	b.n	8002be6 <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800297e:	21f8      	movs	r1, #248	@ 0xf8
 8002980:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002982:	69a3      	ldr	r3, [r4, #24]
 8002984:	438a      	bics	r2, r1
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4313      	orrs	r3, r2
 800298a:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298c:	6a23      	ldr	r3, [r4, #32]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d000      	beq.n	8002994 <HAL_RCC_OscConfig+0x6c>
 8002992:	e157      	b.n	8002c44 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8002994:	2000      	movs	r0, #0
 8002996:	e02a      	b.n	80029ee <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002998:	220c      	movs	r2, #12
 800299a:	4da4      	ldr	r5, [pc, #656]	@ (8002c2c <HAL_RCC_OscConfig+0x304>)
 800299c:	686b      	ldr	r3, [r5, #4]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d006      	beq.n	80029b2 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029a4:	686b      	ldr	r3, [r5, #4]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d10a      	bne.n	80029c2 <HAL_RCC_OscConfig+0x9a>
 80029ac:	686b      	ldr	r3, [r5, #4]
 80029ae:	03db      	lsls	r3, r3, #15
 80029b0:	d507      	bpl.n	80029c2 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b2:	682b      	ldr	r3, [r5, #0]
 80029b4:	039b      	lsls	r3, r3, #14
 80029b6:	d5bf      	bpl.n	8002938 <HAL_RCC_OscConfig+0x10>
 80029b8:	6863      	ldr	r3, [r4, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1bc      	bne.n	8002938 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80029be:	2001      	movs	r0, #1
 80029c0:	e015      	b.n	80029ee <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c2:	6863      	ldr	r3, [r4, #4]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d114      	bne.n	80029f2 <HAL_RCC_OscConfig+0xca>
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	682a      	ldr	r2, [r5, #0]
 80029cc:	025b      	lsls	r3, r3, #9
 80029ce:	4313      	orrs	r3, r2
 80029d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80029d2:	f7ff fc7f 	bl	80022d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80029d8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	02bf      	lsls	r7, r7, #10
 80029dc:	682b      	ldr	r3, [r5, #0]
 80029de:	423b      	tst	r3, r7
 80029e0:	d1aa      	bne.n	8002938 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e2:	f7ff fc77 	bl	80022d4 <HAL_GetTick>
 80029e6:	1b80      	subs	r0, r0, r6
 80029e8:	2864      	cmp	r0, #100	@ 0x64
 80029ea:	d9f7      	bls.n	80029dc <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 80029ec:	2003      	movs	r0, #3
}
 80029ee:	b005      	add	sp, #20
 80029f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d116      	bne.n	8002a24 <HAL_RCC_OscConfig+0xfc>
 80029f6:	682b      	ldr	r3, [r5, #0]
 80029f8:	4a8d      	ldr	r2, [pc, #564]	@ (8002c30 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fc:	4013      	ands	r3, r2
 80029fe:	602b      	str	r3, [r5, #0]
 8002a00:	682b      	ldr	r3, [r5, #0]
 8002a02:	4a8c      	ldr	r2, [pc, #560]	@ (8002c34 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a04:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a06:	4013      	ands	r3, r2
 8002a08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a0a:	f7ff fc63 	bl	80022d4 <HAL_GetTick>
 8002a0e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	423b      	tst	r3, r7
 8002a14:	d100      	bne.n	8002a18 <HAL_RCC_OscConfig+0xf0>
 8002a16:	e78f      	b.n	8002938 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a18:	f7ff fc5c 	bl	80022d4 <HAL_GetTick>
 8002a1c:	1b80      	subs	r0, r0, r6
 8002a1e:	2864      	cmp	r0, #100	@ 0x64
 8002a20:	d9f6      	bls.n	8002a10 <HAL_RCC_OscConfig+0xe8>
 8002a22:	e7e3      	b.n	80029ec <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a24:	2b05      	cmp	r3, #5
 8002a26:	d105      	bne.n	8002a34 <HAL_RCC_OscConfig+0x10c>
 8002a28:	2380      	movs	r3, #128	@ 0x80
 8002a2a:	682a      	ldr	r2, [r5, #0]
 8002a2c:	02db      	lsls	r3, r3, #11
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	602b      	str	r3, [r5, #0]
 8002a32:	e7c9      	b.n	80029c8 <HAL_RCC_OscConfig+0xa0>
 8002a34:	682b      	ldr	r3, [r5, #0]
 8002a36:	4a7e      	ldr	r2, [pc, #504]	@ (8002c30 <HAL_RCC_OscConfig+0x308>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	602b      	str	r3, [r5, #0]
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c34 <HAL_RCC_OscConfig+0x30c>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	e7c5      	b.n	80029d0 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a44:	220c      	movs	r2, #12
 8002a46:	4d79      	ldr	r5, [pc, #484]	@ (8002c2c <HAL_RCC_OscConfig+0x304>)
 8002a48:	686b      	ldr	r3, [r5, #4]
 8002a4a:	4213      	tst	r3, r2
 8002a4c:	d006      	beq.n	8002a5c <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a4e:	686b      	ldr	r3, [r5, #4]
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d110      	bne.n	8002a78 <HAL_RCC_OscConfig+0x150>
 8002a56:	686b      	ldr	r3, [r5, #4]
 8002a58:	03db      	lsls	r3, r3, #15
 8002a5a:	d40d      	bmi.n	8002a78 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	079b      	lsls	r3, r3, #30
 8002a60:	d502      	bpl.n	8002a68 <HAL_RCC_OscConfig+0x140>
 8002a62:	68e3      	ldr	r3, [r4, #12]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d1aa      	bne.n	80029be <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a68:	21f8      	movs	r1, #248	@ 0xf8
 8002a6a:	682a      	ldr	r2, [r5, #0]
 8002a6c:	6923      	ldr	r3, [r4, #16]
 8002a6e:	438a      	bics	r2, r1
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4313      	orrs	r3, r2
 8002a74:	602b      	str	r3, [r5, #0]
 8002a76:	e763      	b.n	8002940 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a78:	68e2      	ldr	r2, [r4, #12]
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	2a00      	cmp	r2, #0
 8002a7e:	d00f      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8002a80:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a82:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8002a84:	4313      	orrs	r3, r2
 8002a86:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a88:	f7ff fc24 	bl	80022d4 <HAL_GetTick>
 8002a8c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	682b      	ldr	r3, [r5, #0]
 8002a90:	423b      	tst	r3, r7
 8002a92:	d1e9      	bne.n	8002a68 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a94:	f7ff fc1e 	bl	80022d4 <HAL_GetTick>
 8002a98:	1b80      	subs	r0, r0, r6
 8002a9a:	2802      	cmp	r0, #2
 8002a9c:	d9f7      	bls.n	8002a8e <HAL_RCC_OscConfig+0x166>
 8002a9e:	e7a5      	b.n	80029ec <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8002aa0:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa2:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8002aa4:	439a      	bics	r2, r3
 8002aa6:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8002aa8:	f7ff fc14 	bl	80022d4 <HAL_GetTick>
 8002aac:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	682b      	ldr	r3, [r5, #0]
 8002ab0:	423b      	tst	r3, r7
 8002ab2:	d100      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x18e>
 8002ab4:	e744      	b.n	8002940 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab6:	f7ff fc0d 	bl	80022d4 <HAL_GetTick>
 8002aba:	1b80      	subs	r0, r0, r6
 8002abc:	2802      	cmp	r0, #2
 8002abe:	d9f6      	bls.n	8002aae <HAL_RCC_OscConfig+0x186>
 8002ac0:	e794      	b.n	80029ec <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ac2:	69e2      	ldr	r2, [r4, #28]
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	4d59      	ldr	r5, [pc, #356]	@ (8002c2c <HAL_RCC_OscConfig+0x304>)
 8002ac8:	2a00      	cmp	r2, #0
 8002aca:	d010      	beq.n	8002aee <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8002acc:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ace:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8002ad4:	f7ff fbfe 	bl	80022d4 <HAL_GetTick>
 8002ad8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002adc:	423b      	tst	r3, r7
 8002ade:	d000      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x1ba>
 8002ae0:	e732      	b.n	8002948 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae2:	f7ff fbf7 	bl	80022d4 <HAL_GetTick>
 8002ae6:	1b80      	subs	r0, r0, r6
 8002ae8:	2802      	cmp	r0, #2
 8002aea:	d9f6      	bls.n	8002ada <HAL_RCC_OscConfig+0x1b2>
 8002aec:	e77e      	b.n	80029ec <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8002aee:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8002af2:	439a      	bics	r2, r3
 8002af4:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8002af6:	f7ff fbed 	bl	80022d4 <HAL_GetTick>
 8002afa:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002afe:	423b      	tst	r3, r7
 8002b00:	d100      	bne.n	8002b04 <HAL_RCC_OscConfig+0x1dc>
 8002b02:	e721      	b.n	8002948 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b04:	f7ff fbe6 	bl	80022d4 <HAL_GetTick>
 8002b08:	1b80      	subs	r0, r0, r6
 8002b0a:	2802      	cmp	r0, #2
 8002b0c:	d9f6      	bls.n	8002afc <HAL_RCC_OscConfig+0x1d4>
 8002b0e:	e76d      	b.n	80029ec <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b10:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002b12:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b14:	4d45      	ldr	r5, [pc, #276]	@ (8002c2c <HAL_RCC_OscConfig+0x304>)
 8002b16:	0552      	lsls	r2, r2, #21
 8002b18:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002b1a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b1c:	4213      	tst	r3, r2
 8002b1e:	d108      	bne.n	8002b32 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b20:	69eb      	ldr	r3, [r5, #28]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61eb      	str	r3, [r5, #28]
 8002b26:	69eb      	ldr	r3, [r5, #28]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	9303      	str	r3, [sp, #12]
 8002b2c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b32:	2780      	movs	r7, #128	@ 0x80
 8002b34:	4e40      	ldr	r6, [pc, #256]	@ (8002c38 <HAL_RCC_OscConfig+0x310>)
 8002b36:	007f      	lsls	r7, r7, #1
 8002b38:	6833      	ldr	r3, [r6, #0]
 8002b3a:	423b      	tst	r3, r7
 8002b3c:	d015      	beq.n	8002b6a <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3e:	68a3      	ldr	r3, [r4, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d122      	bne.n	8002b8a <HAL_RCC_OscConfig+0x262>
 8002b44:	6a2a      	ldr	r2, [r5, #32]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002b4a:	f7ff fbc3 	bl	80022d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8002b50:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	6a2b      	ldr	r3, [r5, #32]
 8002b54:	423b      	tst	r3, r7
 8002b56:	d03f      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8002b58:	9b00      	ldr	r3, [sp, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d000      	beq.n	8002b60 <HAL_RCC_OscConfig+0x238>
 8002b5e:	e6f7      	b.n	8002950 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b60:	69eb      	ldr	r3, [r5, #28]
 8002b62:	4a36      	ldr	r2, [pc, #216]	@ (8002c3c <HAL_RCC_OscConfig+0x314>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	61eb      	str	r3, [r5, #28]
 8002b68:	e6f2      	b.n	8002950 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	6833      	ldr	r3, [r6, #0]
 8002b6c:	433b      	orrs	r3, r7
 8002b6e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002b70:	f7ff fbb0 	bl	80022d4 <HAL_GetTick>
 8002b74:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b76:	6833      	ldr	r3, [r6, #0]
 8002b78:	423b      	tst	r3, r7
 8002b7a:	d1e0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7c:	f7ff fbaa 	bl	80022d4 <HAL_GetTick>
 8002b80:	9b01      	ldr	r3, [sp, #4]
 8002b82:	1ac0      	subs	r0, r0, r3
 8002b84:	2864      	cmp	r0, #100	@ 0x64
 8002b86:	d9f6      	bls.n	8002b76 <HAL_RCC_OscConfig+0x24e>
 8002b88:	e730      	b.n	80029ec <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d114      	bne.n	8002bba <HAL_RCC_OscConfig+0x292>
 8002b90:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b92:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b94:	4393      	bics	r3, r2
 8002b96:	622b      	str	r3, [r5, #32]
 8002b98:	6a2b      	ldr	r3, [r5, #32]
 8002b9a:	3203      	adds	r2, #3
 8002b9c:	4393      	bics	r3, r2
 8002b9e:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002ba0:	f7ff fb98 	bl	80022d4 <HAL_GetTick>
 8002ba4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba6:	6a2b      	ldr	r3, [r5, #32]
 8002ba8:	423b      	tst	r3, r7
 8002baa:	d0d5      	beq.n	8002b58 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7ff fb92 	bl	80022d4 <HAL_GetTick>
 8002bb0:	4b23      	ldr	r3, [pc, #140]	@ (8002c40 <HAL_RCC_OscConfig+0x318>)
 8002bb2:	1b80      	subs	r0, r0, r6
 8002bb4:	4298      	cmp	r0, r3
 8002bb6:	d9f6      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x27e>
 8002bb8:	e718      	b.n	80029ec <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d105      	bne.n	8002bca <HAL_RCC_OscConfig+0x2a2>
 8002bbe:	6a29      	ldr	r1, [r5, #32]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	622b      	str	r3, [r5, #32]
 8002bc6:	6a2b      	ldr	r3, [r5, #32]
 8002bc8:	e7bd      	b.n	8002b46 <HAL_RCC_OscConfig+0x21e>
 8002bca:	6a2b      	ldr	r3, [r5, #32]
 8002bcc:	4393      	bics	r3, r2
 8002bce:	2204      	movs	r2, #4
 8002bd0:	622b      	str	r3, [r5, #32]
 8002bd2:	6a2b      	ldr	r3, [r5, #32]
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	e7b7      	b.n	8002b48 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7ff fb7c 	bl	80022d4 <HAL_GetTick>
 8002bdc:	4b18      	ldr	r3, [pc, #96]	@ (8002c40 <HAL_RCC_OscConfig+0x318>)
 8002bde:	1b80      	subs	r0, r0, r6
 8002be0:	4298      	cmp	r0, r3
 8002be2:	d9b6      	bls.n	8002b52 <HAL_RCC_OscConfig+0x22a>
 8002be4:	e702      	b.n	80029ec <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002be6:	f7ff fb75 	bl	80022d4 <HAL_GetTick>
 8002bea:	1b80      	subs	r0, r0, r6
 8002bec:	2802      	cmp	r0, #2
 8002bee:	d800      	bhi.n	8002bf2 <HAL_RCC_OscConfig+0x2ca>
 8002bf0:	e6c1      	b.n	8002976 <HAL_RCC_OscConfig+0x4e>
 8002bf2:	e6fb      	b.n	80029ec <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002bf4:	3205      	adds	r2, #5
 8002bf6:	d103      	bne.n	8002c00 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8002bf8:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002bfa:	439a      	bics	r2, r3
 8002bfc:	636a      	str	r2, [r5, #52]	@ 0x34
 8002bfe:	e6be      	b.n	800297e <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c00:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c02:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c04:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8002c06:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c08:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002c0a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8002c10:	f7ff fb60 	bl	80022d4 <HAL_GetTick>
 8002c14:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c16:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002c18:	423b      	tst	r3, r7
 8002c1a:	d100      	bne.n	8002c1e <HAL_RCC_OscConfig+0x2f6>
 8002c1c:	e6b6      	b.n	800298c <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c1e:	f7ff fb59 	bl	80022d4 <HAL_GetTick>
 8002c22:	1b80      	subs	r0, r0, r6
 8002c24:	2802      	cmp	r0, #2
 8002c26:	d9f6      	bls.n	8002c16 <HAL_RCC_OscConfig+0x2ee>
 8002c28:	e6e0      	b.n	80029ec <HAL_RCC_OscConfig+0xc4>
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	fffeffff 	.word	0xfffeffff
 8002c34:	fffbffff 	.word	0xfffbffff
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	efffffff 	.word	0xefffffff
 8002c40:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c44:	210c      	movs	r1, #12
 8002c46:	4d34      	ldr	r5, [pc, #208]	@ (8002d18 <HAL_RCC_OscConfig+0x3f0>)
 8002c48:	686a      	ldr	r2, [r5, #4]
 8002c4a:	400a      	ands	r2, r1
 8002c4c:	2a08      	cmp	r2, #8
 8002c4e:	d047      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c50:	4a32      	ldr	r2, [pc, #200]	@ (8002d1c <HAL_RCC_OscConfig+0x3f4>)
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d132      	bne.n	8002cbc <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 8002c56:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c58:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c5e:	f7ff fb39 	bl	80022d4 <HAL_GetTick>
 8002c62:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c64:	04bf      	lsls	r7, r7, #18
 8002c66:	682b      	ldr	r3, [r5, #0]
 8002c68:	423b      	tst	r3, r7
 8002c6a:	d121      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6c:	220f      	movs	r2, #15
 8002c6e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c70:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c72:	4393      	bics	r3, r2
 8002c74:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c76:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8002c7c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002c7e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002c80:	686a      	ldr	r2, [r5, #4]
 8002c82:	430b      	orrs	r3, r1
 8002c84:	4926      	ldr	r1, [pc, #152]	@ (8002d20 <HAL_RCC_OscConfig+0x3f8>)
 8002c86:	400a      	ands	r2, r1
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c8c:	2380      	movs	r3, #128	@ 0x80
 8002c8e:	682a      	ldr	r2, [r5, #0]
 8002c90:	045b      	lsls	r3, r3, #17
 8002c92:	4313      	orrs	r3, r2
 8002c94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c96:	f7ff fb1d 	bl	80022d4 <HAL_GetTick>
 8002c9a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	4233      	tst	r3, r6
 8002ca0:	d000      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x37c>
 8002ca2:	e677      	b.n	8002994 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7ff fb16 	bl	80022d4 <HAL_GetTick>
 8002ca8:	1b00      	subs	r0, r0, r4
 8002caa:	2802      	cmp	r0, #2
 8002cac:	d9f6      	bls.n	8002c9c <HAL_RCC_OscConfig+0x374>
 8002cae:	e69d      	b.n	80029ec <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7ff fb10 	bl	80022d4 <HAL_GetTick>
 8002cb4:	1b80      	subs	r0, r0, r6
 8002cb6:	2802      	cmp	r0, #2
 8002cb8:	d9d5      	bls.n	8002c66 <HAL_RCC_OscConfig+0x33e>
 8002cba:	e697      	b.n	80029ec <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8002cbc:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbe:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002cc4:	f7ff fb06 	bl	80022d4 <HAL_GetTick>
 8002cc8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cca:	04b6      	lsls	r6, r6, #18
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	4233      	tst	r3, r6
 8002cd0:	d100      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x3ac>
 8002cd2:	e65f      	b.n	8002994 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7ff fafe 	bl	80022d4 <HAL_GetTick>
 8002cd8:	1b00      	subs	r0, r0, r4
 8002cda:	2802      	cmp	r0, #2
 8002cdc:	d9f6      	bls.n	8002ccc <HAL_RCC_OscConfig+0x3a4>
 8002cde:	e685      	b.n	80029ec <HAL_RCC_OscConfig+0xc4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d100      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x3be>
 8002ce4:	e66b      	b.n	80029be <HAL_RCC_OscConfig+0x96>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 8002ce8:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002cec:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8002cee:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf0:	4002      	ands	r2, r0
 8002cf2:	428a      	cmp	r2, r1
 8002cf4:	d000      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x3d0>
 8002cf6:	e662      	b.n	80029be <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cf8:	220f      	movs	r2, #15
 8002cfa:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d000      	beq.n	8002d04 <HAL_RCC_OscConfig+0x3dc>
 8002d02:	e65c      	b.n	80029be <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d04:	23f0      	movs	r3, #240	@ 0xf0
 8002d06:	039b      	lsls	r3, r3, #14
 8002d08:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d0a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002d0c:	1ac0      	subs	r0, r0, r3
 8002d0e:	1e43      	subs	r3, r0, #1
 8002d10:	4198      	sbcs	r0, r3
 8002d12:	b2c0      	uxtb	r0, r0
 8002d14:	e66b      	b.n	80029ee <HAL_RCC_OscConfig+0xc6>
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	feffffff 	.word	0xfeffffff
 8002d20:	ffc2ffff 	.word	0xffc2ffff

08002d24 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d24:	220c      	movs	r2, #12
{
 8002d26:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8002d28:	4d0c      	ldr	r5, [pc, #48]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x38>)
 8002d2a:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	2a08      	cmp	r2, #8
 8002d30:	d111      	bne.n	8002d56 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d32:	200f      	movs	r0, #15
 8002d34:	490a      	ldr	r1, [pc, #40]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d36:	0c9a      	lsrs	r2, r3, #18
 8002d38:	4002      	ands	r2, r0
 8002d3a:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d3c:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d3e:	03db      	lsls	r3, r3, #15
 8002d40:	d507      	bpl.n	8002d52 <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d42:	4908      	ldr	r1, [pc, #32]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x40>)
 8002d44:	4002      	ands	r2, r0
 8002d46:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d48:	4807      	ldr	r0, [pc, #28]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x44>)
 8002d4a:	f7fd f9e7 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d4e:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002d50:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d52:	4806      	ldr	r0, [pc, #24]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x48>)
 8002d54:	e7fb      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 8002d56:	4804      	ldr	r0, [pc, #16]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 8002d58:	e7fa      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x2c>
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	08003ede 	.word	0x08003ede
 8002d64:	08003ece 	.word	0x08003ece
 8002d68:	007a1200 	.word	0x007a1200
 8002d6c:	003d0900 	.word	0x003d0900

08002d70 <HAL_RCC_ClockConfig>:
{
 8002d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d72:	0004      	movs	r4, r0
 8002d74:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002d76:	2800      	cmp	r0, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002d7a:	2001      	movs	r0, #1
}
 8002d7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4d37      	ldr	r5, [pc, #220]	@ (8002e60 <HAL_RCC_ClockConfig+0xf0>)
 8002d82:	682b      	ldr	r3, [r5, #0]
 8002d84:	4013      	ands	r3, r2
 8002d86:	428b      	cmp	r3, r1
 8002d88:	d31c      	bcc.n	8002dc4 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8a:	6822      	ldr	r2, [r4, #0]
 8002d8c:	0793      	lsls	r3, r2, #30
 8002d8e:	d422      	bmi.n	8002dd6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d90:	07d2      	lsls	r2, r2, #31
 8002d92:	d42f      	bmi.n	8002df4 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d94:	2301      	movs	r3, #1
 8002d96:	682a      	ldr	r2, [r5, #0]
 8002d98:	401a      	ands	r2, r3
 8002d9a:	42b2      	cmp	r2, r6
 8002d9c:	d851      	bhi.n	8002e42 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	4d30      	ldr	r5, [pc, #192]	@ (8002e64 <HAL_RCC_ClockConfig+0xf4>)
 8002da2:	075b      	lsls	r3, r3, #29
 8002da4:	d454      	bmi.n	8002e50 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002da6:	f7ff ffbd 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002daa:	686b      	ldr	r3, [r5, #4]
 8002dac:	4a2e      	ldr	r2, [pc, #184]	@ (8002e68 <HAL_RCC_ClockConfig+0xf8>)
 8002dae:	061b      	lsls	r3, r3, #24
 8002db0:	0f1b      	lsrs	r3, r3, #28
 8002db2:	5cd3      	ldrb	r3, [r2, r3]
 8002db4:	492d      	ldr	r1, [pc, #180]	@ (8002e6c <HAL_RCC_ClockConfig+0xfc>)
 8002db6:	40d8      	lsrs	r0, r3
 8002db8:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002dba:	2003      	movs	r0, #3
 8002dbc:	f7ff fa4a 	bl	8002254 <HAL_InitTick>
  return HAL_OK;
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	e7db      	b.n	8002d7c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc4:	682b      	ldr	r3, [r5, #0]
 8002dc6:	4393      	bics	r3, r2
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	d1d2      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xa>
 8002dd4:	e7d9      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd6:	4923      	ldr	r1, [pc, #140]	@ (8002e64 <HAL_RCC_ClockConfig+0xf4>)
 8002dd8:	0753      	lsls	r3, r2, #29
 8002dda:	d504      	bpl.n	8002de6 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ddc:	23e0      	movs	r3, #224	@ 0xe0
 8002dde:	6848      	ldr	r0, [r1, #4]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4303      	orrs	r3, r0
 8002de4:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de6:	20f0      	movs	r0, #240	@ 0xf0
 8002de8:	684b      	ldr	r3, [r1, #4]
 8002dea:	4383      	bics	r3, r0
 8002dec:	68a0      	ldr	r0, [r4, #8]
 8002dee:	4303      	orrs	r3, r0
 8002df0:	604b      	str	r3, [r1, #4]
 8002df2:	e7cd      	b.n	8002d90 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df4:	4f1b      	ldr	r7, [pc, #108]	@ (8002e64 <HAL_RCC_ClockConfig+0xf4>)
 8002df6:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df8:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfa:	2a01      	cmp	r2, #1
 8002dfc:	d119      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	039b      	lsls	r3, r3, #14
 8002e00:	d5bb      	bpl.n	8002d7a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e02:	2103      	movs	r1, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	438b      	bics	r3, r1
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8002e0c:	f7ff fa62 	bl	80022d4 <HAL_GetTick>
 8002e10:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	230c      	movs	r3, #12
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	401a      	ands	r2, r3
 8002e18:	6863      	ldr	r3, [r4, #4]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d0b9      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e20:	f7ff fa58 	bl	80022d4 <HAL_GetTick>
 8002e24:	9b01      	ldr	r3, [sp, #4]
 8002e26:	1ac0      	subs	r0, r0, r3
 8002e28:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <HAL_RCC_ClockConfig+0x100>)
 8002e2a:	4298      	cmp	r0, r3
 8002e2c:	d9f1      	bls.n	8002e12 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8002e2e:	2003      	movs	r0, #3
 8002e30:	e7a4      	b.n	8002d7c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e32:	2a02      	cmp	r2, #2
 8002e34:	d102      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e36:	019b      	lsls	r3, r3, #6
 8002e38:	d4e3      	bmi.n	8002e02 <HAL_RCC_ClockConfig+0x92>
 8002e3a:	e79e      	b.n	8002d7a <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	079b      	lsls	r3, r3, #30
 8002e3e:	d4e0      	bmi.n	8002e02 <HAL_RCC_ClockConfig+0x92>
 8002e40:	e79b      	b.n	8002d7a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	682a      	ldr	r2, [r5, #0]
 8002e44:	439a      	bics	r2, r3
 8002e46:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e48:	682a      	ldr	r2, [r5, #0]
 8002e4a:	421a      	tst	r2, r3
 8002e4c:	d0a7      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x2e>
 8002e4e:	e794      	b.n	8002d7a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e50:	686b      	ldr	r3, [r5, #4]
 8002e52:	4a08      	ldr	r2, [pc, #32]	@ (8002e74 <HAL_RCC_ClockConfig+0x104>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	68e2      	ldr	r2, [r4, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	606b      	str	r3, [r5, #4]
 8002e5c:	e7a3      	b.n	8002da6 <HAL_RCC_ClockConfig+0x36>
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	40022000 	.word	0x40022000
 8002e64:	40021000 	.word	0x40021000
 8002e68:	08003ebe 	.word	0x08003ebe
 8002e6c:	20000090 	.word	0x20000090
 8002e70:	00001388 	.word	0x00001388
 8002e74:	fffff8ff 	.word	0xfffff8ff

08002e78 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e7a:	000e      	movs	r6, r1
 8002e7c:	b085      	sub	sp, #20
 8002e7e:	0015      	movs	r5, r2
 8002e80:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e82:	f7ff fa27 	bl	80022d4 <HAL_GetTick>
 8002e86:	19ad      	adds	r5, r5, r6
 8002e88:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8002e8a:	f7ff fa23 	bl	80022d4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e8e:	2780      	movs	r7, #128	@ 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e90:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8002e92:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	015b      	lsls	r3, r3, #5
 8002e98:	0d1b      	lsrs	r3, r3, #20
 8002e9a:	436b      	muls	r3, r5
 8002e9c:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e9e:	6822      	ldr	r2, [r4, #0]
 8002ea0:	6893      	ldr	r3, [r2, #8]
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	4038      	ands	r0, r7
 8002ea6:	423b      	tst	r3, r7
 8002ea8:	d032      	beq.n	8002f10 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002eaa:	1c73      	adds	r3, r6, #1
 8002eac:	d0f8      	beq.n	8002ea0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002eae:	f7ff fa11 	bl	80022d4 <HAL_GetTick>
 8002eb2:	9b01      	ldr	r3, [sp, #4]
 8002eb4:	1ac0      	subs	r0, r0, r3
 8002eb6:	42a8      	cmp	r0, r5
 8002eb8:	d32c      	bcc.n	8002f14 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eba:	21e0      	movs	r1, #224	@ 0xe0
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	438a      	bics	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec4:	2282      	movs	r2, #130	@ 0x82
 8002ec6:	6861      	ldr	r1, [r4, #4]
 8002ec8:	0052      	lsls	r2, r2, #1
 8002eca:	4291      	cmp	r1, r2
 8002ecc:	d10c      	bne.n	8002ee8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 8002ece:	2180      	movs	r1, #128	@ 0x80
 8002ed0:	68a2      	ldr	r2, [r4, #8]
 8002ed2:	0209      	lsls	r1, r1, #8
 8002ed4:	428a      	cmp	r2, r1
 8002ed6:	d003      	beq.n	8002ee0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ed8:	2180      	movs	r1, #128	@ 0x80
 8002eda:	00c9      	lsls	r1, r1, #3
 8002edc:	428a      	cmp	r2, r1
 8002ede:	d103      	bne.n	8002ee8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ee0:	2140      	movs	r1, #64	@ 0x40
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ee8:	2180      	movs	r1, #128	@ 0x80
 8002eea:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002eec:	0189      	lsls	r1, r1, #6
 8002eee:	428a      	cmp	r2, r1
 8002ef0:	d106      	bne.n	8002f00 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 8002ef2:	6819      	ldr	r1, [r3, #0]
 8002ef4:	480d      	ldr	r0, [pc, #52]	@ (8002f2c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8002ef6:	4001      	ands	r1, r0
 8002ef8:	6019      	str	r1, [r3, #0]
 8002efa:	6819      	ldr	r1, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f00:	0023      	movs	r3, r4
 8002f02:	2201      	movs	r2, #1
 8002f04:	335d      	adds	r3, #93	@ 0x5d
 8002f06:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f08:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8002f0a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002f0c:	345c      	adds	r4, #92	@ 0x5c
 8002f0e:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8002f10:	b005      	add	sp, #20
 8002f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8002f14:	9b03      	ldr	r3, [sp, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
 8002f1a:	002b      	movs	r3, r5
      count--;
 8002f1c:	9a03      	ldr	r2, [sp, #12]
 8002f1e:	001d      	movs	r5, r3
 8002f20:	3a01      	subs	r2, #1
 8002f22:	9203      	str	r2, [sp, #12]
 8002f24:	e7bb      	b.n	8002e9e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	20000090 	.word	0x20000090
 8002f2c:	ffffdfff 	.word	0xffffdfff

08002f30 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f32:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f34:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002f36:	b085      	sub	sp, #20
 8002f38:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 8002f3a:	ab02      	add	r3, sp, #8
 8002f3c:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002f3e:	0004      	movs	r4, r0
 8002f40:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f42:	f7ff f9c7 	bl	80022d4 <HAL_GetTick>
 8002f46:	19ed      	adds	r5, r5, r7
 8002f48:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8002f4a:	f7ff f9c3 	bl	80022d4 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f4e:	2223      	movs	r2, #35	@ 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f50:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8002f52:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f54:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f56:	4b2a      	ldr	r3, [pc, #168]	@ (8003000 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4353      	muls	r3, r2
 8002f5c:	0d1b      	lsrs	r3, r3, #20
 8002f5e:	436b      	muls	r3, r5
 8002f60:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f62:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8002f64:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8002f66:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8002f68:	688b      	ldr	r3, [r1, #8]
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	4030      	ands	r0, r6
 8002f6e:	4233      	tst	r3, r6
 8002f70:	d03b      	beq.n	8002fea <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f72:	23c0      	movs	r3, #192	@ 0xc0
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	429e      	cmp	r6, r3
 8002f78:	d104      	bne.n	8002f84 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 8002f7a:	9b01      	ldr	r3, [sp, #4]
 8002f7c:	7b1b      	ldrb	r3, [r3, #12]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	7013      	strb	r3, [r2, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f82:	7813      	ldrb	r3, [r2, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f84:	1c7b      	adds	r3, r7, #1
 8002f86:	d0ef      	beq.n	8002f68 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f88:	f7ff f9a4 	bl	80022d4 <HAL_GetTick>
 8002f8c:	9b00      	ldr	r3, [sp, #0]
 8002f8e:	1ac0      	subs	r0, r0, r3
 8002f90:	42a8      	cmp	r0, r5
 8002f92:	d32c      	bcc.n	8002fee <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f94:	21e0      	movs	r1, #224	@ 0xe0
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	438a      	bics	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f9e:	2282      	movs	r2, #130	@ 0x82
 8002fa0:	6861      	ldr	r1, [r4, #4]
 8002fa2:	0052      	lsls	r2, r2, #1
 8002fa4:	4291      	cmp	r1, r2
 8002fa6:	d10c      	bne.n	8002fc2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8002fa8:	2180      	movs	r1, #128	@ 0x80
 8002faa:	68a2      	ldr	r2, [r4, #8]
 8002fac:	0209      	lsls	r1, r1, #8
 8002fae:	428a      	cmp	r2, r1
 8002fb0:	d003      	beq.n	8002fba <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fb2:	2180      	movs	r1, #128	@ 0x80
 8002fb4:	00c9      	lsls	r1, r1, #3
 8002fb6:	428a      	cmp	r2, r1
 8002fb8:	d103      	bne.n	8002fc2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fba:	2140      	movs	r1, #64	@ 0x40
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	438a      	bics	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fc2:	2180      	movs	r1, #128	@ 0x80
 8002fc4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002fc6:	0189      	lsls	r1, r1, #6
 8002fc8:	428a      	cmp	r2, r1
 8002fca:	d106      	bne.n	8002fda <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
        {
          SPI_RESET_CRC(hspi);
 8002fcc:	6819      	ldr	r1, [r3, #0]
 8002fce:	480d      	ldr	r0, [pc, #52]	@ (8003004 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 8002fd0:	4001      	ands	r1, r0
 8002fd2:	6019      	str	r1, [r3, #0]
 8002fd4:	6819      	ldr	r1, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fda:	0023      	movs	r3, r4
 8002fdc:	2201      	movs	r2, #1
 8002fde:	335d      	adds	r3, #93	@ 0x5d
 8002fe0:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fe2:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8002fe4:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002fe6:	345c      	adds	r4, #92	@ 0x5c
 8002fe8:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8002fea:	b005      	add	sp, #20
 8002fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8002fee:	9b03      	ldr	r3, [sp, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d000      	beq.n	8002ff6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
 8002ff4:	002b      	movs	r3, r5
      count--;
 8002ff6:	9a03      	ldr	r2, [sp, #12]
 8002ff8:	001d      	movs	r5, r3
 8002ffa:	3a01      	subs	r2, #1
 8002ffc:	9203      	str	r2, [sp, #12]
 8002ffe:	e7b0      	b.n	8002f62 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8003000:	20000090 	.word	0x20000090
 8003004:	ffffdfff 	.word	0xffffdfff

08003008 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800300a:	0013      	movs	r3, r2
{
 800300c:	000d      	movs	r5, r1
 800300e:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003010:	000a      	movs	r2, r1
 8003012:	21c0      	movs	r1, #192	@ 0xc0
 8003014:	0149      	lsls	r1, r1, #5
{
 8003016:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003018:	f7ff ff8a 	bl	8002f30 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800301c:	2800      	cmp	r0, #0
 800301e:	d005      	beq.n	800302c <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003020:	2320      	movs	r3, #32
    return HAL_TIMEOUT;
 8003022:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003024:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8003026:	4313      	orrs	r3, r2
 8003028:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800302a:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800302c:	0032      	movs	r2, r6
 800302e:	0029      	movs	r1, r5
 8003030:	0020      	movs	r0, r4
 8003032:	f7ff ff21 	bl	8002e78 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003036:	2800      	cmp	r0, #0
 8003038:	d1f2      	bne.n	8003020 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800303a:	21c0      	movs	r1, #192	@ 0xc0
 800303c:	0033      	movs	r3, r6
 800303e:	002a      	movs	r2, r5
 8003040:	0020      	movs	r0, r4
 8003042:	00c9      	lsls	r1, r1, #3
 8003044:	f7ff ff74 	bl	8002f30 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003048:	2800      	cmp	r0, #0
 800304a:	d0ee      	beq.n	800302a <SPI_EndRxTxTransaction+0x22>
 800304c:	e7e8      	b.n	8003020 <SPI_EndRxTxTransaction+0x18>
	...

08003050 <HAL_SPI_Init>:
{
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003054:	2001      	movs	r0, #1
  if (hspi == NULL)
 8003056:	2c00      	cmp	r4, #0
 8003058:	d067      	beq.n	800312a <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800305a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800305c:	2b00      	cmp	r3, #0
 800305e:	d165      	bne.n	800312c <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003060:	2282      	movs	r2, #130	@ 0x82
 8003062:	6861      	ldr	r1, [r4, #4]
 8003064:	0052      	lsls	r2, r2, #1
 8003066:	4291      	cmp	r1, r2
 8003068:	d000      	beq.n	800306c <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800306a:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800306c:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800306e:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003070:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003072:	355d      	adds	r5, #93	@ 0x5d
 8003074:	782b      	ldrb	r3, [r5, #0]
 8003076:	b2da      	uxtb	r2, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 800307c:	0023      	movs	r3, r4
 800307e:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8003080:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003082:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8003084:	f7fe ff8a 	bl	8001f9c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003088:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800308a:	2240      	movs	r2, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 800308c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800308e:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003090:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8003092:	680b      	ldr	r3, [r1, #0]
 8003094:	4393      	bics	r3, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003096:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_SPI_DISABLE(hspi);
 8003098:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800309a:	00d2      	lsls	r2, r2, #3
 800309c:	2300      	movs	r3, #0
 800309e:	4296      	cmp	r6, r2
 80030a0:	d948      	bls.n	8003134 <HAL_SPI_Init+0xe4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030a2:	22f0      	movs	r2, #240	@ 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030a4:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	4296      	cmp	r6, r2
 80030aa:	d000      	beq.n	80030ae <HAL_SPI_Init+0x5e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ac:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030ae:	2282      	movs	r2, #130	@ 0x82
 80030b0:	2784      	movs	r7, #132	@ 0x84
 80030b2:	6863      	ldr	r3, [r4, #4]
 80030b4:	0052      	lsls	r2, r2, #1
 80030b6:	4013      	ands	r3, r2
 80030b8:	68a2      	ldr	r2, [r4, #8]
 80030ba:	023f      	lsls	r7, r7, #8
 80030bc:	403a      	ands	r2, r7
 80030be:	2702      	movs	r7, #2
 80030c0:	4313      	orrs	r3, r2
 80030c2:	6922      	ldr	r2, [r4, #16]
 80030c4:	69a5      	ldr	r5, [r4, #24]
 80030c6:	403a      	ands	r2, r7
 80030c8:	4313      	orrs	r3, r2
 80030ca:	2201      	movs	r2, #1
 80030cc:	6967      	ldr	r7, [r4, #20]
 80030ce:	4017      	ands	r7, r2
 80030d0:	433b      	orrs	r3, r7
 80030d2:	2780      	movs	r7, #128	@ 0x80
 80030d4:	00bf      	lsls	r7, r7, #2
 80030d6:	402f      	ands	r7, r5
 80030d8:	433b      	orrs	r3, r7
 80030da:	69e7      	ldr	r7, [r4, #28]
 80030dc:	3237      	adds	r2, #55	@ 0x37
 80030de:	4017      	ands	r7, r2
 80030e0:	433b      	orrs	r3, r7
 80030e2:	6a27      	ldr	r7, [r4, #32]
 80030e4:	3248      	adds	r2, #72	@ 0x48
 80030e6:	4017      	ands	r7, r2
 80030e8:	2280      	movs	r2, #128	@ 0x80
 80030ea:	433b      	orrs	r3, r7
 80030ec:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 80030ee:	0192      	lsls	r2, r2, #6
 80030f0:	4017      	ands	r7, r2
 80030f2:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030f4:	2710      	movs	r7, #16
 80030f6:	2208      	movs	r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030f8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030fc:	0c2d      	lsrs	r5, r5, #16
 80030fe:	403b      	ands	r3, r7
 8003100:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8003102:	4017      	ands	r7, r2
 8003104:	433b      	orrs	r3, r7
 8003106:	27f0      	movs	r7, #240	@ 0xf0
 8003108:	013f      	lsls	r7, r7, #4
 800310a:	403e      	ands	r6, r7
 800310c:	4333      	orrs	r3, r6
 800310e:	2604      	movs	r6, #4
 8003110:	4035      	ands	r5, r6
 8003112:	432b      	orrs	r3, r5
 8003114:	4303      	orrs	r3, r0
 8003116:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003118:	69cb      	ldr	r3, [r1, #28]
 800311a:	4808      	ldr	r0, [pc, #32]	@ (800313c <HAL_SPI_Init+0xec>)
 800311c:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800311e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003120:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8003122:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003124:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003126:	345d      	adds	r4, #93	@ 0x5d
 8003128:	7023      	strb	r3, [r4, #0]
}
 800312a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800312c:	2300      	movs	r3, #0
 800312e:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003130:	6163      	str	r3, [r4, #20]
 8003132:	e79b      	b.n	800306c <HAL_SPI_Init+0x1c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003134:	2080      	movs	r0, #128	@ 0x80
 8003136:	0140      	lsls	r0, r0, #5
 8003138:	e7b6      	b.n	80030a8 <HAL_SPI_Init+0x58>
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	fffff7ff 	.word	0xfffff7ff

08003140 <HAL_SPI_Transmit>:
{
 8003140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003142:	b085      	sub	sp, #20
 8003144:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hspi);
 8003146:	0003      	movs	r3, r0
 8003148:	335c      	adds	r3, #92	@ 0x5c
{
 800314a:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 800314c:	781a      	ldrb	r2, [r3, #0]
{
 800314e:	0004      	movs	r4, r0
 8003150:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8003152:	2702      	movs	r7, #2
 8003154:	2a01      	cmp	r2, #1
 8003156:	d100      	bne.n	800315a <HAL_SPI_Transmit+0x1a>
 8003158:	e082      	b.n	8003260 <HAL_SPI_Transmit+0x120>
 800315a:	2201      	movs	r2, #1
 800315c:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800315e:	f7ff f8b9 	bl	80022d4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003162:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8003164:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8003166:	335d      	adds	r3, #93	@ 0x5d
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	b2d7      	uxtb	r7, r2
 800316c:	2a01      	cmp	r2, #1
 800316e:	d000      	beq.n	8003172 <HAL_SPI_Transmit+0x32>
 8003170:	e0a6      	b.n	80032c0 <HAL_SPI_Transmit+0x180>
  if ((pData == NULL) || (Size == 0U))
 8003172:	2d00      	cmp	r5, #0
 8003174:	d071      	beq.n	800325a <HAL_SPI_Transmit+0x11a>
 8003176:	2e00      	cmp	r6, #0
 8003178:	d06f      	beq.n	800325a <HAL_SPI_Transmit+0x11a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800317a:	3202      	adds	r2, #2
 800317c:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800317e:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8003180:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003182:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003184:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003186:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003188:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800318a:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxXferCount = 0U;
 800318c:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 800318e:	8793      	strh	r3, [r2, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003190:	87d3      	strh	r3, [r2, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003192:	2280      	movs	r2, #128	@ 0x80
 8003194:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 8003196:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003198:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800319a:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 800319c:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800319e:	4291      	cmp	r1, r2
 80031a0:	d108      	bne.n	80031b4 <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 80031a2:	2140      	movs	r1, #64	@ 0x40
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	438a      	bics	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031aa:	2280      	movs	r2, #128	@ 0x80
 80031ac:	6819      	ldr	r1, [r3, #0]
 80031ae:	01d2      	lsls	r2, r2, #7
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031b4:	2240      	movs	r2, #64	@ 0x40
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	4211      	tst	r1, r2
 80031ba:	d102      	bne.n	80031c2 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 80031bc:	6819      	ldr	r1, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c2:	21e0      	movs	r1, #224	@ 0xe0
 80031c4:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031c6:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c8:	00c9      	lsls	r1, r1, #3
 80031ca:	4288      	cmp	r0, r1
 80031cc:	d94b      	bls.n	8003266 <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ce:	2a00      	cmp	r2, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_SPI_Transmit+0x96>
 80031d2:	2e01      	cmp	r6, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031d6:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d8:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031da:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80031dc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031de:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031e6:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80031e8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d119      	bne.n	8003222 <HAL_SPI_Transmit+0xe2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ee:	0020      	movs	r0, r4
 80031f0:	9a01      	ldr	r2, [sp, #4]
 80031f2:	9900      	ldr	r1, [sp, #0]
 80031f4:	f7ff ff08 	bl	8003008 <SPI_EndRxTxTransaction>
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d15e      	bne.n	80032ba <HAL_SPI_Transmit+0x17a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031fc:	68a3      	ldr	r3, [r4, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003202:	9303      	str	r3, [sp, #12]
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	9203      	str	r2, [sp, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	9303      	str	r3, [sp, #12]
 800320e:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003210:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8003212:	2a00      	cmp	r2, #0
 8003214:	d121      	bne.n	800325a <HAL_SPI_Transmit+0x11a>
    hspi->State = HAL_SPI_STATE_READY;
 8003216:	0023      	movs	r3, r4
 8003218:	2101      	movs	r1, #1
 800321a:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 800321c:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 800321e:	7019      	strb	r1, [r3, #0]
 8003220:	e01b      	b.n	800325a <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003222:	6822      	ldr	r2, [r4, #0]
 8003224:	6893      	ldr	r3, [r2, #8]
 8003226:	422b      	tst	r3, r5
 8003228:	d009      	beq.n	800323e <HAL_SPI_Transmit+0xfe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800322a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800322c:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800322e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003230:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003232:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8003234:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003236:	3b01      	subs	r3, #1
 8003238:	b29b      	uxth	r3, r3
 800323a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800323c:	e7d4      	b.n	80031e8 <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800323e:	f7ff f849 	bl	80022d4 <HAL_GetTick>
 8003242:	9b01      	ldr	r3, [sp, #4]
 8003244:	1ac0      	subs	r0, r0, r3
 8003246:	9b00      	ldr	r3, [sp, #0]
 8003248:	4298      	cmp	r0, r3
 800324a:	d3cd      	bcc.n	80031e8 <HAL_SPI_Transmit+0xa8>
 800324c:	3301      	adds	r3, #1
 800324e:	d0cb      	beq.n	80031e8 <HAL_SPI_Transmit+0xa8>
          hspi->State = HAL_SPI_STATE_READY;
 8003250:	0023      	movs	r3, r4
 8003252:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8003254:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8003256:	335d      	adds	r3, #93	@ 0x5d
 8003258:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800325a:	2300      	movs	r3, #0
 800325c:	345c      	adds	r4, #92	@ 0x5c
 800325e:	7023      	strb	r3, [r4, #0]
}
 8003260:	0038      	movs	r0, r7
 8003262:	b005      	add	sp, #20
 8003264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003266:	2a00      	cmp	r2, #0
 8003268:	d001      	beq.n	800326e <HAL_SPI_Transmit+0x12e>
 800326a:	2e01      	cmp	r6, #1
 800326c:	d108      	bne.n	8003280 <HAL_SPI_Transmit+0x140>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800326e:	782a      	ldrb	r2, [r5, #0]
 8003270:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003272:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003274:	3301      	adds	r3, #1
 8003276:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8003278:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800327a:	3b01      	subs	r3, #1
 800327c:	b29b      	uxth	r3, r3
 800327e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003280:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8003282:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0b2      	beq.n	80031ee <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	422a      	tst	r2, r5
 800328e:	d00a      	beq.n	80032a6 <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003290:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003292:	7812      	ldrb	r2, [r2, #0]
 8003294:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003296:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003298:	3301      	adds	r3, #1
 800329a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800329c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80032a4:	e7ed      	b.n	8003282 <HAL_SPI_Transmit+0x142>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032a6:	f7ff f815 	bl	80022d4 <HAL_GetTick>
 80032aa:	9b01      	ldr	r3, [sp, #4]
 80032ac:	1ac0      	subs	r0, r0, r3
 80032ae:	9b00      	ldr	r3, [sp, #0]
 80032b0:	4298      	cmp	r0, r3
 80032b2:	d3e6      	bcc.n	8003282 <HAL_SPI_Transmit+0x142>
 80032b4:	3301      	adds	r3, #1
 80032b6:	d0e4      	beq.n	8003282 <HAL_SPI_Transmit+0x142>
 80032b8:	e7ca      	b.n	8003250 <HAL_SPI_Transmit+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032ba:	2320      	movs	r3, #32
 80032bc:	6623      	str	r3, [r4, #96]	@ 0x60
 80032be:	e79d      	b.n	80031fc <HAL_SPI_Transmit+0xbc>
    errorcode = HAL_BUSY;
 80032c0:	2702      	movs	r7, #2
 80032c2:	e7ca      	b.n	800325a <HAL_SPI_Transmit+0x11a>

080032c4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c4:	2201      	movs	r2, #1
 80032c6:	6a03      	ldr	r3, [r0, #32]
{
 80032c8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ca:	4393      	bics	r3, r2
 80032cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032d2:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032d4:	3272      	adds	r2, #114	@ 0x72
 80032d6:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032d8:	680a      	ldr	r2, [r1, #0]
 80032da:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032dc:	2202      	movs	r2, #2
 80032de:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032e0:	688a      	ldr	r2, [r1, #8]
 80032e2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e4:	4a11      	ldr	r2, [pc, #68]	@ (800332c <TIM_OC1_SetConfig+0x68>)
 80032e6:	4290      	cmp	r0, r2
 80032e8:	d005      	beq.n	80032f6 <TIM_OC1_SetConfig+0x32>
 80032ea:	4e11      	ldr	r6, [pc, #68]	@ (8003330 <TIM_OC1_SetConfig+0x6c>)
 80032ec:	42b0      	cmp	r0, r6
 80032ee:	d002      	beq.n	80032f6 <TIM_OC1_SetConfig+0x32>
 80032f0:	4e10      	ldr	r6, [pc, #64]	@ (8003334 <TIM_OC1_SetConfig+0x70>)
 80032f2:	42b0      	cmp	r0, r6
 80032f4:	d113      	bne.n	800331e <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032f6:	2608      	movs	r6, #8
 80032f8:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032fa:	68ce      	ldr	r6, [r1, #12]
 80032fc:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032fe:	2604      	movs	r6, #4
 8003300:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003302:	4290      	cmp	r0, r2
 8003304:	d005      	beq.n	8003312 <TIM_OC1_SetConfig+0x4e>
 8003306:	4a0a      	ldr	r2, [pc, #40]	@ (8003330 <TIM_OC1_SetConfig+0x6c>)
 8003308:	4290      	cmp	r0, r2
 800330a:	d002      	beq.n	8003312 <TIM_OC1_SetConfig+0x4e>
 800330c:	4a09      	ldr	r2, [pc, #36]	@ (8003334 <TIM_OC1_SetConfig+0x70>)
 800330e:	4290      	cmp	r0, r2
 8003310:	d105      	bne.n	800331e <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003312:	4a09      	ldr	r2, [pc, #36]	@ (8003338 <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003314:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003316:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003318:	694c      	ldr	r4, [r1, #20]
 800331a:	4334      	orrs	r4, r6
 800331c:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800331e:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003320:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003322:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003324:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003326:	6203      	str	r3, [r0, #32]
}
 8003328:	bd70      	pop	{r4, r5, r6, pc}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	40012c00 	.word	0x40012c00
 8003330:	40014400 	.word	0x40014400
 8003334:	40014800 	.word	0x40014800
 8003338:	fffffcff 	.word	0xfffffcff

0800333c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800333c:	6a03      	ldr	r3, [r0, #32]
 800333e:	4a17      	ldr	r2, [pc, #92]	@ (800339c <TIM_OC3_SetConfig+0x60>)
{
 8003340:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003342:	4013      	ands	r3, r2
 8003344:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003346:	2373      	movs	r3, #115	@ 0x73
  tmpccer = TIMx->CCER;
 8003348:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800334a:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800334c:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800334e:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003350:	680b      	ldr	r3, [r1, #0]
 8003352:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003354:	4b12      	ldr	r3, [pc, #72]	@ (80033a0 <TIM_OC3_SetConfig+0x64>)
 8003356:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003358:	688b      	ldr	r3, [r1, #8]
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800335e:	4d11      	ldr	r5, [pc, #68]	@ (80033a4 <TIM_OC3_SetConfig+0x68>)
 8003360:	42a8      	cmp	r0, r5
 8003362:	d10e      	bne.n	8003382 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003364:	4d10      	ldr	r5, [pc, #64]	@ (80033a8 <TIM_OC3_SetConfig+0x6c>)
 8003366:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003368:	68cb      	ldr	r3, [r1, #12]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800336e:	4d0f      	ldr	r5, [pc, #60]	@ (80033ac <TIM_OC3_SetConfig+0x70>)
 8003370:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003372:	4d0f      	ldr	r5, [pc, #60]	@ (80033b0 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003374:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003376:	4015      	ands	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003378:	698a      	ldr	r2, [r1, #24]
 800337a:	4332      	orrs	r2, r6
 800337c:	0112      	lsls	r2, r2, #4
 800337e:	432a      	orrs	r2, r5
 8003380:	e005      	b.n	800338e <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003382:	4d0c      	ldr	r5, [pc, #48]	@ (80033b4 <TIM_OC3_SetConfig+0x78>)
 8003384:	42a8      	cmp	r0, r5
 8003386:	d0f4      	beq.n	8003372 <TIM_OC3_SetConfig+0x36>
 8003388:	4d0b      	ldr	r5, [pc, #44]	@ (80033b8 <TIM_OC3_SetConfig+0x7c>)
 800338a:	42a8      	cmp	r0, r5
 800338c:	d0f1      	beq.n	8003372 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003390:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003392:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003394:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003396:	6203      	str	r3, [r0, #32]
}
 8003398:	bd70      	pop	{r4, r5, r6, pc}
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	fffffeff 	.word	0xfffffeff
 80033a0:	fffffdff 	.word	0xfffffdff
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	fffff7ff 	.word	0xfffff7ff
 80033ac:	fffffbff 	.word	0xfffffbff
 80033b0:	ffffcfff 	.word	0xffffcfff
 80033b4:	40014400 	.word	0x40014400
 80033b8:	40014800 	.word	0x40014800

080033bc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033bc:	6a03      	ldr	r3, [r0, #32]
 80033be:	4a12      	ldr	r2, [pc, #72]	@ (8003408 <TIM_OC4_SetConfig+0x4c>)
{
 80033c0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033c2:	4013      	ands	r3, r2
 80033c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033c8:	4d10      	ldr	r5, [pc, #64]	@ (800340c <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 80033ca:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80033cc:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033ce:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d0:	680d      	ldr	r5, [r1, #0]
 80033d2:	022d      	lsls	r5, r5, #8
 80033d4:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003410 <TIM_OC4_SetConfig+0x54>)
 80033d8:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033da:	688a      	ldr	r2, [r1, #8]
 80033dc:	0312      	lsls	r2, r2, #12
 80033de:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e0:	4c0c      	ldr	r4, [pc, #48]	@ (8003414 <TIM_OC4_SetConfig+0x58>)
 80033e2:	42a0      	cmp	r0, r4
 80033e4:	d005      	beq.n	80033f2 <TIM_OC4_SetConfig+0x36>
 80033e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003418 <TIM_OC4_SetConfig+0x5c>)
 80033e8:	42a0      	cmp	r0, r4
 80033ea:	d002      	beq.n	80033f2 <TIM_OC4_SetConfig+0x36>
 80033ec:	4c0b      	ldr	r4, [pc, #44]	@ (800341c <TIM_OC4_SetConfig+0x60>)
 80033ee:	42a0      	cmp	r0, r4
 80033f0:	d104      	bne.n	80033fc <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033f2:	4c0b      	ldr	r4, [pc, #44]	@ (8003420 <TIM_OC4_SetConfig+0x64>)
 80033f4:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033f6:	694b      	ldr	r3, [r1, #20]
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fc:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033fe:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003400:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003402:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003404:	6202      	str	r2, [r0, #32]
}
 8003406:	bd30      	pop	{r4, r5, pc}
 8003408:	ffffefff 	.word	0xffffefff
 800340c:	ffff8cff 	.word	0xffff8cff
 8003410:	ffffdfff 	.word	0xffffdfff
 8003414:	40012c00 	.word	0x40012c00
 8003418:	40014400 	.word	0x40014400
 800341c:	40014800 	.word	0x40014800
 8003420:	ffffbfff 	.word	0xffffbfff

08003424 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003424:	0001      	movs	r1, r0
{
 8003426:	0003      	movs	r3, r0
    return HAL_ERROR;
 8003428:	2001      	movs	r0, #1
{
 800342a:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 800342c:	313d      	adds	r1, #61	@ 0x3d
 800342e:	780c      	ldrb	r4, [r1, #0]
 8003430:	b2e2      	uxtb	r2, r4
 8003432:	4284      	cmp	r4, r0
 8003434:	d115      	bne.n	8003462 <HAL_TIM_Base_Start_IT+0x3e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003436:	1800      	adds	r0, r0, r0
 8003438:	7008      	strb	r0, [r1, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68d9      	ldr	r1, [r3, #12]
 800343e:	4311      	orrs	r1, r2
 8003440:	60d9      	str	r1, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003442:	4909      	ldr	r1, [pc, #36]	@ (8003468 <HAL_TIM_Base_Start_IT+0x44>)
 8003444:	428b      	cmp	r3, r1
 8003446:	d002      	beq.n	800344e <HAL_TIM_Base_Start_IT+0x2a>
 8003448:	4908      	ldr	r1, [pc, #32]	@ (800346c <HAL_TIM_Base_Start_IT+0x48>)
 800344a:	428b      	cmp	r3, r1
 800344c:	d10a      	bne.n	8003464 <HAL_TIM_Base_Start_IT+0x40>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344e:	2107      	movs	r1, #7
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003454:	2a06      	cmp	r2, #6
 8003456:	d003      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0x3c>
      __HAL_TIM_ENABLE(htim);
 8003458:	2201      	movs	r2, #1
 800345a:	6819      	ldr	r1, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003460:	2000      	movs	r0, #0
}
 8003462:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 8003464:	6819      	ldr	r1, [r3, #0]
 8003466:	e7f9      	b.n	800345c <HAL_TIM_Base_Start_IT+0x38>
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40000400 	.word	0x40000400

08003470 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003470:	2101      	movs	r1, #1
 8003472:	6803      	ldr	r3, [r0, #0]
{
 8003474:	b510      	push	{r4, lr}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	438a      	bics	r2, r1
 800347a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800347c:	6a1c      	ldr	r4, [r3, #32]
 800347e:	4a07      	ldr	r2, [pc, #28]	@ (800349c <HAL_TIM_Base_Stop_IT+0x2c>)
 8003480:	4214      	tst	r4, r2
 8003482:	d106      	bne.n	8003492 <HAL_TIM_Base_Stop_IT+0x22>
 8003484:	6a1c      	ldr	r4, [r3, #32]
 8003486:	4a06      	ldr	r2, [pc, #24]	@ (80034a0 <HAL_TIM_Base_Stop_IT+0x30>)
 8003488:	4214      	tst	r4, r2
 800348a:	d102      	bne.n	8003492 <HAL_TIM_Base_Stop_IT+0x22>
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	438a      	bics	r2, r1
 8003490:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003492:	2301      	movs	r3, #1
 8003494:	303d      	adds	r0, #61	@ 0x3d
 8003496:	7003      	strb	r3, [r0, #0]
}
 8003498:	2000      	movs	r0, #0
 800349a:	bd10      	pop	{r4, pc}
 800349c:	00001111 	.word	0x00001111
 80034a0:	00000444 	.word	0x00000444

080034a4 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80034a8:	4770      	bx	lr

080034aa <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80034aa:	4770      	bx	lr

080034ac <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80034ac:	4770      	bx	lr

080034ae <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80034ae:	4770      	bx	lr

080034b0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034b0:	2202      	movs	r2, #2
 80034b2:	6803      	ldr	r3, [r0, #0]
{
 80034b4:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034b6:	6919      	ldr	r1, [r3, #16]
{
 80034b8:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034ba:	4211      	tst	r1, r2
 80034bc:	d00e      	beq.n	80034dc <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034be:	68d9      	ldr	r1, [r3, #12]
 80034c0:	4211      	tst	r1, r2
 80034c2:	d00b      	beq.n	80034dc <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034c4:	3a05      	subs	r2, #5
 80034c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034c8:	3204      	adds	r2, #4
 80034ca:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	079b      	lsls	r3, r3, #30
 80034d0:	d100      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x24>
 80034d2:	e079      	b.n	80035c8 <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 80034d4:	f7ff ffe9 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d8:	2300      	movs	r3, #0
 80034da:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034dc:	2204      	movs	r2, #4
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	6919      	ldr	r1, [r3, #16]
 80034e2:	4211      	tst	r1, r2
 80034e4:	d010      	beq.n	8003508 <HAL_TIM_IRQHandler+0x58>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034e6:	68d9      	ldr	r1, [r3, #12]
 80034e8:	4211      	tst	r1, r2
 80034ea:	d00d      	beq.n	8003508 <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034ec:	3a09      	subs	r2, #9
 80034ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034f0:	3207      	adds	r2, #7
 80034f2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	23c0      	movs	r3, #192	@ 0xc0
 80034f8:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034fc:	421a      	tst	r2, r3
 80034fe:	d069      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8003500:	f7ff ffd3 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003504:	2300      	movs	r3, #0
 8003506:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003508:	2208      	movs	r2, #8
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	6919      	ldr	r1, [r3, #16]
 800350e:	4211      	tst	r1, r2
 8003510:	d00e      	beq.n	8003530 <HAL_TIM_IRQHandler+0x80>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003512:	68d9      	ldr	r1, [r3, #12]
 8003514:	4211      	tst	r1, r2
 8003516:	d00b      	beq.n	8003530 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003518:	3a11      	subs	r2, #17
 800351a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800351c:	320d      	adds	r2, #13
 800351e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003520:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003524:	079b      	lsls	r3, r3, #30
 8003526:	d05b      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8003528:	f7ff ffbf 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352c:	2300      	movs	r3, #0
 800352e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003530:	2210      	movs	r2, #16
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	6919      	ldr	r1, [r3, #16]
 8003536:	4211      	tst	r1, r2
 8003538:	d010      	beq.n	800355c <HAL_TIM_IRQHandler+0xac>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800353a:	68d9      	ldr	r1, [r3, #12]
 800353c:	4211      	tst	r1, r2
 800353e:	d00d      	beq.n	800355c <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003540:	3a21      	subs	r2, #33	@ 0x21
 8003542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003544:	3219      	adds	r2, #25
 8003546:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003548:	69da      	ldr	r2, [r3, #28]
 800354a:	23c0      	movs	r3, #192	@ 0xc0
 800354c:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800354e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003550:	421a      	tst	r2, r3
 8003552:	d04b      	beq.n	80035ec <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8003554:	f7ff ffa9 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003558:	2300      	movs	r3, #0
 800355a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800355c:	2201      	movs	r2, #1
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	6919      	ldr	r1, [r3, #16]
 8003562:	4211      	tst	r1, r2
 8003564:	d007      	beq.n	8003576 <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003566:	68d9      	ldr	r1, [r3, #12]
 8003568:	4211      	tst	r1, r2
 800356a:	d004      	beq.n	8003576 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800356c:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 800356e:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003570:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003572:	f7ff ff98 	bl	80034a6 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003576:	2280      	movs	r2, #128	@ 0x80
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	6919      	ldr	r1, [r3, #16]
 800357c:	4211      	tst	r1, r2
 800357e:	d008      	beq.n	8003592 <HAL_TIM_IRQHandler+0xe2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003580:	68d9      	ldr	r1, [r3, #12]
 8003582:	4211      	tst	r1, r2
 8003584:	d005      	beq.n	8003592 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003586:	3a02      	subs	r2, #2
 8003588:	3aff      	subs	r2, #255	@ 0xff
      HAL_TIMEx_BreakCallback(htim);
 800358a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800358c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800358e:	f000 fb0e 	bl	8003bae <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003592:	2240      	movs	r2, #64	@ 0x40
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	6919      	ldr	r1, [r3, #16]
 8003598:	4211      	tst	r1, r2
 800359a:	d007      	beq.n	80035ac <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800359c:	68d9      	ldr	r1, [r3, #12]
 800359e:	4211      	tst	r1, r2
 80035a0:	d004      	beq.n	80035ac <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035a2:	3a81      	subs	r2, #129	@ 0x81
      HAL_TIM_TriggerCallback(htim);
 80035a4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80035a8:	f7ff ff81 	bl	80034ae <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035ac:	2220      	movs	r2, #32
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	6919      	ldr	r1, [r3, #16]
 80035b2:	4211      	tst	r1, r2
 80035b4:	d007      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035b6:	68d9      	ldr	r1, [r3, #12]
 80035b8:	4211      	tst	r1, r2
 80035ba:	d004      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035bc:	3a41      	subs	r2, #65	@ 0x41
      HAL_TIMEx_CommutCallback(htim);
 80035be:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80035c2:	f000 faf3 	bl	8003bac <HAL_TIMEx_CommutCallback>
}
 80035c6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c8:	f7ff ff6e 	bl	80034a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	0020      	movs	r0, r4
 80035ce:	f7ff ff6d 	bl	80034ac <HAL_TIM_PWM_PulseFinishedCallback>
 80035d2:	e781      	b.n	80034d8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d4:	f7ff ff68 	bl	80034a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	0020      	movs	r0, r4
 80035da:	f7ff ff67 	bl	80034ac <HAL_TIM_PWM_PulseFinishedCallback>
 80035de:	e791      	b.n	8003504 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e0:	f7ff ff62 	bl	80034a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	0020      	movs	r0, r4
 80035e6:	f7ff ff61 	bl	80034ac <HAL_TIM_PWM_PulseFinishedCallback>
 80035ea:	e79f      	b.n	800352c <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ec:	f7ff ff5c 	bl	80034a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f0:	0020      	movs	r0, r4
 80035f2:	f7ff ff5b 	bl	80034ac <HAL_TIM_PWM_PulseFinishedCallback>
 80035f6:	e7af      	b.n	8003558 <HAL_TIM_IRQHandler+0xa8>

080035f8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f8:	4a19      	ldr	r2, [pc, #100]	@ (8003660 <TIM_Base_SetConfig+0x68>)
{
 80035fa:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80035fc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035fe:	4290      	cmp	r0, r2
 8003600:	d002      	beq.n	8003608 <TIM_Base_SetConfig+0x10>
 8003602:	4c18      	ldr	r4, [pc, #96]	@ (8003664 <TIM_Base_SetConfig+0x6c>)
 8003604:	42a0      	cmp	r0, r4
 8003606:	d108      	bne.n	800361a <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003608:	2470      	movs	r4, #112	@ 0x70
 800360a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800360c:	684c      	ldr	r4, [r1, #4]
 800360e:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003610:	4290      	cmp	r0, r2
 8003612:	d00b      	beq.n	800362c <TIM_Base_SetConfig+0x34>
 8003614:	4c13      	ldr	r4, [pc, #76]	@ (8003664 <TIM_Base_SetConfig+0x6c>)
 8003616:	42a0      	cmp	r0, r4
 8003618:	d008      	beq.n	800362c <TIM_Base_SetConfig+0x34>
 800361a:	4c13      	ldr	r4, [pc, #76]	@ (8003668 <TIM_Base_SetConfig+0x70>)
 800361c:	42a0      	cmp	r0, r4
 800361e:	d005      	beq.n	800362c <TIM_Base_SetConfig+0x34>
 8003620:	4c12      	ldr	r4, [pc, #72]	@ (800366c <TIM_Base_SetConfig+0x74>)
 8003622:	42a0      	cmp	r0, r4
 8003624:	d002      	beq.n	800362c <TIM_Base_SetConfig+0x34>
 8003626:	4c12      	ldr	r4, [pc, #72]	@ (8003670 <TIM_Base_SetConfig+0x78>)
 8003628:	42a0      	cmp	r0, r4
 800362a:	d103      	bne.n	8003634 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800362c:	4c11      	ldr	r4, [pc, #68]	@ (8003674 <TIM_Base_SetConfig+0x7c>)
 800362e:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003630:	68cb      	ldr	r3, [r1, #12]
 8003632:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003634:	2480      	movs	r4, #128	@ 0x80
 8003636:	43a3      	bics	r3, r4
 8003638:	694c      	ldr	r4, [r1, #20]
 800363a:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800363c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800363e:	688b      	ldr	r3, [r1, #8]
 8003640:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003642:	680b      	ldr	r3, [r1, #0]
 8003644:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003646:	4290      	cmp	r0, r2
 8003648:	d005      	beq.n	8003656 <TIM_Base_SetConfig+0x5e>
 800364a:	4b08      	ldr	r3, [pc, #32]	@ (800366c <TIM_Base_SetConfig+0x74>)
 800364c:	4298      	cmp	r0, r3
 800364e:	d002      	beq.n	8003656 <TIM_Base_SetConfig+0x5e>
 8003650:	4b07      	ldr	r3, [pc, #28]	@ (8003670 <TIM_Base_SetConfig+0x78>)
 8003652:	4298      	cmp	r0, r3
 8003654:	d101      	bne.n	800365a <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 8003656:	690b      	ldr	r3, [r1, #16]
 8003658:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800365a:	2301      	movs	r3, #1
 800365c:	6143      	str	r3, [r0, #20]
}
 800365e:	bd10      	pop	{r4, pc}
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40000400 	.word	0x40000400
 8003668:	40002000 	.word	0x40002000
 800366c:	40014400 	.word	0x40014400
 8003670:	40014800 	.word	0x40014800
 8003674:	fffffcff 	.word	0xfffffcff

08003678 <HAL_TIM_Base_Init>:
{
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800367c:	2001      	movs	r0, #1
  if (htim == NULL)
 800367e:	2c00      	cmp	r4, #0
 8003680:	d021      	beq.n	80036c6 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003682:	0025      	movs	r5, r4
 8003684:	353d      	adds	r5, #61	@ 0x3d
 8003686:	782b      	ldrb	r3, [r5, #0]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d105      	bne.n	800369a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800368e:	0023      	movs	r3, r4
 8003690:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003692:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003694:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8003696:	f7fe fcb1 	bl	8001ffc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800369a:	2302      	movs	r3, #2
 800369c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800369e:	6820      	ldr	r0, [r4, #0]
 80036a0:	1d21      	adds	r1, r4, #4
 80036a2:	f7ff ffa9 	bl	80035f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a6:	0022      	movs	r2, r4
 80036a8:	2301      	movs	r3, #1
  return HAL_OK;
 80036aa:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ac:	3246      	adds	r2, #70	@ 0x46
 80036ae:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b0:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b2:	3a08      	subs	r2, #8
 80036b4:	7013      	strb	r3, [r2, #0]
 80036b6:	7053      	strb	r3, [r2, #1]
 80036b8:	7093      	strb	r3, [r2, #2]
 80036ba:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	7113      	strb	r3, [r2, #4]
 80036be:	7153      	strb	r3, [r2, #5]
 80036c0:	7193      	strb	r3, [r2, #6]
 80036c2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	702b      	strb	r3, [r5, #0]
}
 80036c6:	bd70      	pop	{r4, r5, r6, pc}

080036c8 <HAL_TIM_PWM_Init>:
{
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	0004      	movs	r4, r0
    return HAL_ERROR;
 80036cc:	2001      	movs	r0, #1
  if (htim == NULL)
 80036ce:	2c00      	cmp	r4, #0
 80036d0:	d021      	beq.n	8003716 <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80036d2:	0025      	movs	r5, r4
 80036d4:	353d      	adds	r5, #61	@ 0x3d
 80036d6:	782b      	ldrb	r3, [r5, #0]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d105      	bne.n	80036ea <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80036de:	0023      	movs	r3, r4
 80036e0:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80036e2:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80036e4:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 80036e6:	f7ff fedd 	bl	80034a4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80036ea:	2302      	movs	r3, #2
 80036ec:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ee:	6820      	ldr	r0, [r4, #0]
 80036f0:	1d21      	adds	r1, r4, #4
 80036f2:	f7ff ff81 	bl	80035f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f6:	0022      	movs	r2, r4
 80036f8:	2301      	movs	r3, #1
  return HAL_OK;
 80036fa:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fc:	3246      	adds	r2, #70	@ 0x46
 80036fe:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	3a08      	subs	r2, #8
 8003704:	7013      	strb	r3, [r2, #0]
 8003706:	7053      	strb	r3, [r2, #1]
 8003708:	7093      	strb	r3, [r2, #2]
 800370a:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	7113      	strb	r3, [r2, #4]
 800370e:	7153      	strb	r3, [r2, #5]
 8003710:	7193      	strb	r3, [r2, #6]
 8003712:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003714:	702b      	strb	r3, [r5, #0]
}
 8003716:	bd70      	pop	{r4, r5, r6, pc}

08003718 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003718:	2210      	movs	r2, #16
 800371a:	6a03      	ldr	r3, [r0, #32]
{
 800371c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800371e:	4393      	bics	r3, r2
 8003720:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003722:	6a05      	ldr	r5, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003724:	4c15      	ldr	r4, [pc, #84]	@ (800377c <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8003726:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003728:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800372a:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800372c:	680c      	ldr	r4, [r1, #0]
 800372e:	0224      	lsls	r4, r4, #8
 8003730:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8003732:	2320      	movs	r3, #32
 8003734:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003736:	688b      	ldr	r3, [r1, #8]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800373c:	4d10      	ldr	r5, [pc, #64]	@ (8003780 <TIM_OC2_SetConfig+0x68>)
 800373e:	42a8      	cmp	r0, r5
 8003740:	d10f      	bne.n	8003762 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003742:	2580      	movs	r5, #128	@ 0x80
 8003744:	43ab      	bics	r3, r5
 8003746:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003748:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 800374a:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003750:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003752:	4d0c      	ldr	r5, [pc, #48]	@ (8003784 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003754:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003756:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003758:	698a      	ldr	r2, [r1, #24]
 800375a:	4332      	orrs	r2, r6
 800375c:	0092      	lsls	r2, r2, #2
 800375e:	432a      	orrs	r2, r5
 8003760:	e005      	b.n	800376e <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003762:	4d09      	ldr	r5, [pc, #36]	@ (8003788 <TIM_OC2_SetConfig+0x70>)
 8003764:	42a8      	cmp	r0, r5
 8003766:	d0f4      	beq.n	8003752 <TIM_OC2_SetConfig+0x3a>
 8003768:	4d08      	ldr	r5, [pc, #32]	@ (800378c <TIM_OC2_SetConfig+0x74>)
 800376a:	42a8      	cmp	r0, r5
 800376c:	d0f1      	beq.n	8003752 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 800376e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003770:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003772:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003774:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003776:	6203      	str	r3, [r0, #32]
}
 8003778:	bd70      	pop	{r4, r5, r6, pc}
 800377a:	46c0      	nop			@ (mov r8, r8)
 800377c:	ffff8cff 	.word	0xffff8cff
 8003780:	40012c00 	.word	0x40012c00
 8003784:	fffff3ff 	.word	0xfffff3ff
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800

08003790 <HAL_TIM_PWM_ConfigChannel>:
{
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003792:	0006      	movs	r6, r0
 8003794:	363c      	adds	r6, #60	@ 0x3c
{
 8003796:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8003798:	7832      	ldrb	r2, [r6, #0]
{
 800379a:	0003      	movs	r3, r0
 800379c:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 800379e:	2002      	movs	r0, #2
 80037a0:	2a01      	cmp	r2, #1
 80037a2:	d00a      	beq.n	80037ba <HAL_TIM_PWM_ConfigChannel+0x2a>
 80037a4:	3801      	subs	r0, #1
 80037a6:	7030      	strb	r0, [r6, #0]
  switch (Channel)
 80037a8:	2d08      	cmp	r5, #8
 80037aa:	d03f      	beq.n	800382c <HAL_TIM_PWM_ConfigChannel+0x9c>
 80037ac:	d806      	bhi.n	80037bc <HAL_TIM_PWM_ConfigChannel+0x2c>
 80037ae:	2d00      	cmp	r5, #0
 80037b0:	d019      	beq.n	80037e6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80037b2:	2d04      	cmp	r5, #4
 80037b4:	d029      	beq.n	800380a <HAL_TIM_PWM_ConfigChannel+0x7a>
  __HAL_UNLOCK(htim);
 80037b6:	2300      	movs	r3, #0
 80037b8:	7033      	strb	r3, [r6, #0]
}
 80037ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 80037bc:	2d0c      	cmp	r5, #12
 80037be:	d1fa      	bne.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037c0:	681d      	ldr	r5, [r3, #0]
 80037c2:	0028      	movs	r0, r5
 80037c4:	f7ff fdfa 	bl	80033bc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037c8:	2380      	movs	r3, #128	@ 0x80
 80037ca:	69ea      	ldr	r2, [r5, #28]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037d2:	69eb      	ldr	r3, [r5, #28]
 80037d4:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <HAL_TIM_PWM_ConfigChannel+0xbc>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037da:	6923      	ldr	r3, [r4, #16]
 80037dc:	69ea      	ldr	r2, [r5, #28]
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61eb      	str	r3, [r5, #28]
      break;
 80037e4:	e00f      	b.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037e6:	681d      	ldr	r5, [r3, #0]
 80037e8:	0028      	movs	r0, r5
 80037ea:	f7ff fd6b 	bl	80032c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037ee:	2308      	movs	r3, #8
 80037f0:	69aa      	ldr	r2, [r5, #24]
 80037f2:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037f4:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037f6:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037f8:	69ab      	ldr	r3, [r5, #24]
 80037fa:	4393      	bics	r3, r2
 80037fc:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037fe:	69ab      	ldr	r3, [r5, #24]
 8003800:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003802:	4313      	orrs	r3, r2
 8003804:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2000      	movs	r0, #0
 8003808:	e7d5      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800380a:	681d      	ldr	r5, [r3, #0]
 800380c:	0028      	movs	r0, r5
 800380e:	f7ff ff83 	bl	8003718 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003812:	2380      	movs	r3, #128	@ 0x80
 8003814:	69aa      	ldr	r2, [r5, #24]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	4313      	orrs	r3, r2
 800381a:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800381c:	69ab      	ldr	r3, [r5, #24]
 800381e:	4a0b      	ldr	r2, [pc, #44]	@ (800384c <HAL_TIM_PWM_ConfigChannel+0xbc>)
 8003820:	4013      	ands	r3, r2
 8003822:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003824:	6923      	ldr	r3, [r4, #16]
 8003826:	69aa      	ldr	r2, [r5, #24]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	e7ea      	b.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800382c:	681f      	ldr	r7, [r3, #0]
 800382e:	0038      	movs	r0, r7
 8003830:	f7ff fd84 	bl	800333c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003834:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	431d      	orrs	r5, r3
 800383a:	61fd      	str	r5, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	4393      	bics	r3, r2
 8003840:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	6922      	ldr	r2, [r4, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	61fb      	str	r3, [r7, #28]
      break;
 800384a:	e7dc      	b.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x76>
 800384c:	fffffbff 	.word	0xfffffbff

08003850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003850:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003852:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003854:	4d03      	ldr	r5, [pc, #12]	@ (8003864 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003856:	430a      	orrs	r2, r1
 8003858:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800385a:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800385c:	4313      	orrs	r3, r2
 800385e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003860:	6083      	str	r3, [r0, #8]
}
 8003862:	bd30      	pop	{r4, r5, pc}
 8003864:	ffff00ff 	.word	0xffff00ff

08003868 <HAL_TIM_ConfigClockSource>:
{
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800386a:	0005      	movs	r5, r0
 800386c:	2202      	movs	r2, #2
 800386e:	353c      	adds	r5, #60	@ 0x3c
 8003870:	782c      	ldrb	r4, [r5, #0]
{
 8003872:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003874:	0010      	movs	r0, r2
 8003876:	2c01      	cmp	r4, #1
 8003878:	d01b      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800387a:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 800387c:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800387e:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 8003880:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003882:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003884:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003886:	4a41      	ldr	r2, [pc, #260]	@ (800398c <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 8003888:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800388a:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800388c:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800388e:	680b      	ldr	r3, [r1, #0]
 8003890:	2b60      	cmp	r3, #96	@ 0x60
 8003892:	d04e      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xca>
 8003894:	d82d      	bhi.n	80038f2 <HAL_TIM_ConfigClockSource+0x8a>
 8003896:	2b40      	cmp	r3, #64	@ 0x40
 8003898:	d062      	beq.n	8003960 <HAL_TIM_ConfigClockSource+0xf8>
 800389a:	d813      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x5c>
 800389c:	2b20      	cmp	r3, #32
 800389e:	d00b      	beq.n	80038b8 <HAL_TIM_ConfigClockSource+0x50>
 80038a0:	d808      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x4c>
 80038a2:	2210      	movs	r2, #16
 80038a4:	0019      	movs	r1, r3
 80038a6:	4391      	bics	r1, r2
 80038a8:	d006      	beq.n	80038b8 <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 80038aa:	2301      	movs	r3, #1
 80038ac:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80038ae:	2300      	movs	r3, #0
 80038b0:	702b      	strb	r3, [r5, #0]
}
 80038b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80038b4:	2b30      	cmp	r3, #48	@ 0x30
 80038b6:	d1f8      	bne.n	80038aa <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr &= ~TIM_SMCR_TS;
 80038b8:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 80038ba:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038bc:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038be:	4313      	orrs	r3, r2
 80038c0:	2207      	movs	r2, #7
 80038c2:	e028      	b.n	8003916 <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 80038c4:	2b50      	cmp	r3, #80	@ 0x50
 80038c6:	d1f0      	bne.n	80038aa <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 80038c8:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80038ca:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80038cc:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ce:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038d0:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d2:	4387      	bics	r7, r0
 80038d4:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038d6:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80038d8:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038da:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038dc:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038de:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 80038e0:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038e2:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038e4:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 80038e6:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 80038e8:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80038ea:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ec:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ee:	3b19      	subs	r3, #25
 80038f0:	e011      	b.n	8003916 <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 80038f2:	2280      	movs	r2, #128	@ 0x80
 80038f4:	0152      	lsls	r2, r2, #5
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00f      	beq.n	800391a <HAL_TIM_ConfigClockSource+0xb2>
 80038fa:	2280      	movs	r2, #128	@ 0x80
 80038fc:	0192      	lsls	r2, r2, #6
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00d      	beq.n	800391e <HAL_TIM_ConfigClockSource+0xb6>
 8003902:	2b70      	cmp	r3, #112	@ 0x70
 8003904:	d1d1      	bne.n	80038aa <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8003906:	68cb      	ldr	r3, [r1, #12]
 8003908:	684a      	ldr	r2, [r1, #4]
 800390a:	0020      	movs	r0, r4
 800390c:	6889      	ldr	r1, [r1, #8]
 800390e:	f7ff ff9f 	bl	8003850 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003912:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 8003914:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003916:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 8003918:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800391a:	2000      	movs	r0, #0
 800391c:	e7c5      	b.n	80038aa <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 800391e:	68cb      	ldr	r3, [r1, #12]
 8003920:	684a      	ldr	r2, [r1, #4]
 8003922:	0020      	movs	r0, r4
 8003924:	6889      	ldr	r1, [r1, #8]
 8003926:	f7ff ff93 	bl	8003850 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800392a:	2380      	movs	r3, #128	@ 0x80
 800392c:	68a2      	ldr	r2, [r4, #8]
 800392e:	01db      	lsls	r3, r3, #7
 8003930:	e7f1      	b.n	8003916 <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003932:	2010      	movs	r0, #16
                               sClockSourceConfig->ClockPolarity,
 8003934:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003936:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003938:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800393a:	4f15      	ldr	r7, [pc, #84]	@ (8003990 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393c:	4381      	bics	r1, r0
 800393e:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003940:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003942:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003944:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003946:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003948:	20a0      	movs	r0, #160	@ 0xa0
  tmpccer = TIMx->CCER;
 800394a:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 800394c:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800394e:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003950:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8003952:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8003954:	6223      	str	r3, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003956:	2370      	movs	r3, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8003958:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800395a:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800395c:	3b09      	subs	r3, #9
 800395e:	e7da      	b.n	8003916 <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 8003960:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003962:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8003964:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003966:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003968:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800396a:	4387      	bics	r7, r0
 800396c:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800396e:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003970:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003972:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003974:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003976:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8003978:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800397a:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800397c:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 800397e:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 8003980:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003982:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003984:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003986:	3b29      	subs	r3, #41	@ 0x29
 8003988:	e7c5      	b.n	8003916 <HAL_TIM_ConfigClockSource+0xae>
 800398a:	46c0      	nop			@ (mov r8, r8)
 800398c:	ffff0088 	.word	0xffff0088
 8003990:	ffff0fff 	.word	0xffff0fff

08003994 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003994:	231f      	movs	r3, #31
{
 8003996:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003998:	2401      	movs	r4, #1
 800399a:	4019      	ands	r1, r3
 800399c:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800399e:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80039a0:	6a03      	ldr	r3, [r0, #32]
 80039a2:	43a3      	bics	r3, r4
 80039a4:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039a6:	6a03      	ldr	r3, [r0, #32]
 80039a8:	431a      	orrs	r2, r3
 80039aa:	6202      	str	r2, [r0, #32]
}
 80039ac:	bd10      	pop	{r4, pc}
	...

080039b0 <HAL_TIM_OC_Start>:
{
 80039b0:	0002      	movs	r2, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039b2:	0003      	movs	r3, r0
{
 80039b4:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039b6:	2900      	cmp	r1, #0
 80039b8:	d109      	bne.n	80039ce <HAL_TIM_OC_Start+0x1e>
 80039ba:	333e      	adds	r3, #62	@ 0x3e
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	3b01      	subs	r3, #1
 80039c0:	1e58      	subs	r0, r3, #1
 80039c2:	4183      	sbcs	r3, r0
 80039c4:	b2db      	uxtb	r3, r3
    return HAL_ERROR;
 80039c6:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_TIM_OC_Start+0x32>
}
 80039cc:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039ce:	2904      	cmp	r1, #4
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_OC_Start+0x26>
 80039d2:	333f      	adds	r3, #63	@ 0x3f
 80039d4:	e7f2      	b.n	80039bc <HAL_TIM_OC_Start+0xc>
 80039d6:	2908      	cmp	r1, #8
 80039d8:	d101      	bne.n	80039de <HAL_TIM_OC_Start+0x2e>
 80039da:	3340      	adds	r3, #64	@ 0x40
 80039dc:	e7ee      	b.n	80039bc <HAL_TIM_OC_Start+0xc>
 80039de:	3341      	adds	r3, #65	@ 0x41
 80039e0:	e7ec      	b.n	80039bc <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e2:	2302      	movs	r3, #2
 80039e4:	0010      	movs	r0, r2
 80039e6:	2900      	cmp	r1, #0
 80039e8:	d11d      	bne.n	8003a26 <HAL_TIM_OC_Start+0x76>
 80039ea:	303e      	adds	r0, #62	@ 0x3e
 80039ec:	7003      	strb	r3, [r0, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ee:	6814      	ldr	r4, [r2, #0]
 80039f0:	2201      	movs	r2, #1
 80039f2:	0020      	movs	r0, r4
 80039f4:	f7ff ffce 	bl	8003994 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039f8:	4a14      	ldr	r2, [pc, #80]	@ (8003a4c <HAL_TIM_OC_Start+0x9c>)
 80039fa:	4294      	cmp	r4, r2
 80039fc:	d01d      	beq.n	8003a3a <HAL_TIM_OC_Start+0x8a>
 80039fe:	4b14      	ldr	r3, [pc, #80]	@ (8003a50 <HAL_TIM_OC_Start+0xa0>)
 8003a00:	429c      	cmp	r4, r3
 8003a02:	d01a      	beq.n	8003a3a <HAL_TIM_OC_Start+0x8a>
 8003a04:	4b13      	ldr	r3, [pc, #76]	@ (8003a54 <HAL_TIM_OC_Start+0xa4>)
 8003a06:	429c      	cmp	r4, r3
 8003a08:	d017      	beq.n	8003a3a <HAL_TIM_OC_Start+0x8a>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0a:	4b13      	ldr	r3, [pc, #76]	@ (8003a58 <HAL_TIM_OC_Start+0xa8>)
 8003a0c:	429c      	cmp	r4, r3
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_OC_Start+0x6a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a10:	2207      	movs	r2, #7
 8003a12:	68a3      	ldr	r3, [r4, #8]
 8003a14:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_OC_Start+0x72>
      __HAL_TIM_ENABLE(htim);
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	6822      	ldr	r2, [r4, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8003a22:	2000      	movs	r0, #0
 8003a24:	e7d2      	b.n	80039cc <HAL_TIM_OC_Start+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a26:	2904      	cmp	r1, #4
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_OC_Start+0x7e>
 8003a2a:	303f      	adds	r0, #63	@ 0x3f
 8003a2c:	e7de      	b.n	80039ec <HAL_TIM_OC_Start+0x3c>
 8003a2e:	2908      	cmp	r1, #8
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_OC_Start+0x86>
 8003a32:	3040      	adds	r0, #64	@ 0x40
 8003a34:	e7da      	b.n	80039ec <HAL_TIM_OC_Start+0x3c>
 8003a36:	3041      	adds	r0, #65	@ 0x41
 8003a38:	e7d8      	b.n	80039ec <HAL_TIM_OC_Start+0x3c>
    __HAL_TIM_MOE_ENABLE(htim);
 8003a3a:	2380      	movs	r3, #128	@ 0x80
 8003a3c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6463      	str	r3, [r4, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a44:	4294      	cmp	r4, r2
 8003a46:	d0e3      	beq.n	8003a10 <HAL_TIM_OC_Start+0x60>
 8003a48:	e7df      	b.n	8003a0a <HAL_TIM_OC_Start+0x5a>
 8003a4a:	46c0      	nop			@ (mov r8, r8)
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40014400 	.word	0x40014400
 8003a54:	40014800 	.word	0x40014800
 8003a58:	40000400 	.word	0x40000400

08003a5c <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	f7ff ffa7 	bl	80039b0 <HAL_TIM_OC_Start>
 8003a62:	bd10      	pop	{r4, pc}

08003a64 <HAL_TIM_OC_Stop>:
{
 8003a64:	b570      	push	{r4, r5, r6, lr}
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a66:	6805      	ldr	r5, [r0, #0]
 8003a68:	2200      	movs	r2, #0
{
 8003a6a:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a6c:	0028      	movs	r0, r5
{
 8003a6e:	000e      	movs	r6, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a70:	f7ff ff90 	bl	8003994 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a74:	4b18      	ldr	r3, [pc, #96]	@ (8003ad8 <HAL_TIM_OC_Stop+0x74>)
 8003a76:	4a19      	ldr	r2, [pc, #100]	@ (8003adc <HAL_TIM_OC_Stop+0x78>)
 8003a78:	429d      	cmp	r5, r3
 8003a7a:	d005      	beq.n	8003a88 <HAL_TIM_OC_Stop+0x24>
 8003a7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ae0 <HAL_TIM_OC_Stop+0x7c>)
 8003a7e:	429d      	cmp	r5, r3
 8003a80:	d002      	beq.n	8003a88 <HAL_TIM_OC_Stop+0x24>
 8003a82:	4b18      	ldr	r3, [pc, #96]	@ (8003ae4 <HAL_TIM_OC_Stop+0x80>)
 8003a84:	429d      	cmp	r5, r3
 8003a86:	d10a      	bne.n	8003a9e <HAL_TIM_OC_Stop+0x3a>
    __HAL_TIM_MOE_DISABLE(htim);
 8003a88:	6a2b      	ldr	r3, [r5, #32]
 8003a8a:	4213      	tst	r3, r2
 8003a8c:	d107      	bne.n	8003a9e <HAL_TIM_OC_Stop+0x3a>
 8003a8e:	6a29      	ldr	r1, [r5, #32]
 8003a90:	4b15      	ldr	r3, [pc, #84]	@ (8003ae8 <HAL_TIM_OC_Stop+0x84>)
 8003a92:	4219      	tst	r1, r3
 8003a94:	d103      	bne.n	8003a9e <HAL_TIM_OC_Stop+0x3a>
 8003a96:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003a98:	4914      	ldr	r1, [pc, #80]	@ (8003aec <HAL_TIM_OC_Stop+0x88>)
 8003a9a:	400b      	ands	r3, r1
 8003a9c:	646b      	str	r3, [r5, #68]	@ 0x44
  __HAL_TIM_DISABLE(htim);
 8003a9e:	6a2b      	ldr	r3, [r5, #32]
 8003aa0:	4213      	tst	r3, r2
 8003aa2:	d107      	bne.n	8003ab4 <HAL_TIM_OC_Stop+0x50>
 8003aa4:	6a2a      	ldr	r2, [r5, #32]
 8003aa6:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <HAL_TIM_OC_Stop+0x84>)
 8003aa8:	421a      	tst	r2, r3
 8003aaa:	d103      	bne.n	8003ab4 <HAL_TIM_OC_Stop+0x50>
 8003aac:	2201      	movs	r2, #1
 8003aae:	682b      	ldr	r3, [r5, #0]
 8003ab0:	4393      	bics	r3, r2
 8003ab2:	602b      	str	r3, [r5, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	2e00      	cmp	r6, #0
 8003ab8:	d103      	bne.n	8003ac2 <HAL_TIM_OC_Stop+0x5e>
 8003aba:	343e      	adds	r4, #62	@ 0x3e
}
 8003abc:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003abe:	7023      	strb	r3, [r4, #0]
}
 8003ac0:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ac2:	2e04      	cmp	r6, #4
 8003ac4:	d101      	bne.n	8003aca <HAL_TIM_OC_Stop+0x66>
 8003ac6:	343f      	adds	r4, #63	@ 0x3f
 8003ac8:	e7f8      	b.n	8003abc <HAL_TIM_OC_Stop+0x58>
 8003aca:	2e08      	cmp	r6, #8
 8003acc:	d101      	bne.n	8003ad2 <HAL_TIM_OC_Stop+0x6e>
 8003ace:	3440      	adds	r4, #64	@ 0x40
 8003ad0:	e7f4      	b.n	8003abc <HAL_TIM_OC_Stop+0x58>
 8003ad2:	3441      	adds	r4, #65	@ 0x41
 8003ad4:	e7f2      	b.n	8003abc <HAL_TIM_OC_Stop+0x58>
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	40012c00 	.word	0x40012c00
 8003adc:	00001111 	.word	0x00001111
 8003ae0:	40014400 	.word	0x40014400
 8003ae4:	40014800 	.word	0x40014800
 8003ae8:	00000444 	.word	0x00000444
 8003aec:	ffff7fff 	.word	0xffff7fff

08003af0 <HAL_TIM_PWM_Stop>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 8003af0:	b510      	push	{r4, lr}
 8003af2:	f7ff ffb7 	bl	8003a64 <HAL_TIM_OC_Stop>
 8003af6:	bd10      	pop	{r4, pc}

08003af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003af8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003afa:	0004      	movs	r4, r0
 8003afc:	2202      	movs	r2, #2
 8003afe:	343c      	adds	r4, #60	@ 0x3c
 8003b00:	7825      	ldrb	r5, [r4, #0]
{
 8003b02:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003b04:	0010      	movs	r0, r2
 8003b06:	2d01      	cmp	r5, #1
 8003b08:	d019      	beq.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0x46>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0a:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b0c:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0e:	353d      	adds	r5, #61	@ 0x3d
 8003b10:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003b16:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b18:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b1a:	680e      	ldr	r6, [r1, #0]
 8003b1c:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b1e:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b20:	4807      	ldr	r0, [pc, #28]	@ (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
 8003b22:	4283      	cmp	r3, r0
 8003b24:	d002      	beq.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8003b26:	4807      	ldr	r0, [pc, #28]	@ (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8003b28:	4283      	cmp	r3, r0
 8003b2a:	d104      	bne.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b2c:	2080      	movs	r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b2e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b30:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b32:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b36:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003b38:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003b3a:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003b3c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40000400 	.word	0x40000400

08003b48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b48:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b4a:	0004      	movs	r4, r0
 8003b4c:	343c      	adds	r4, #60	@ 0x3c
 8003b4e:	7823      	ldrb	r3, [r4, #0]
{
 8003b50:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8003b52:	2002      	movs	r0, #2
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d01c      	beq.n	8003b92 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b58:	68cb      	ldr	r3, [r1, #12]
 8003b5a:	480e      	ldr	r0, [pc, #56]	@ (8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b5c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b5e:	4003      	ands	r3, r0
 8003b60:	6888      	ldr	r0, [r1, #8]
 8003b62:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b64:	480c      	ldr	r0, [pc, #48]	@ (8003b98 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8003b66:	4003      	ands	r3, r0
 8003b68:	6848      	ldr	r0, [r1, #4]
 8003b6a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b6c:	480b      	ldr	r0, [pc, #44]	@ (8003b9c <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8003b6e:	4003      	ands	r3, r0
 8003b70:	6808      	ldr	r0, [r1, #0]
 8003b72:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b74:	480a      	ldr	r0, [pc, #40]	@ (8003ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8003b76:	4003      	ands	r3, r0
 8003b78:	6908      	ldr	r0, [r1, #16]
 8003b7a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b7c:	4809      	ldr	r0, [pc, #36]	@ (8003ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8003b7e:	4003      	ands	r3, r0
 8003b80:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b82:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b84:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b86:	4808      	ldr	r0, [pc, #32]	@ (8003ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8003b88:	4003      	ands	r3, r0

  __HAL_UNLOCK(htim);
 8003b8a:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b8c:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003b8e:	6453      	str	r3, [r2, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8003b90:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003b92:	bd10      	pop	{r4, pc}
 8003b94:	fffffcff 	.word	0xfffffcff
 8003b98:	fffffbff 	.word	0xfffffbff
 8003b9c:	fffff7ff 	.word	0xfffff7ff
 8003ba0:	ffffefff 	.word	0xffffefff
 8003ba4:	ffffdfff 	.word	0xffffdfff
 8003ba8:	ffffbfff 	.word	0xffffbfff

08003bac <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003bac:	4770      	bx	lr

08003bae <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003bae:	4770      	bx	lr

08003bb0 <memset>:
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	1882      	adds	r2, r0, r2
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d100      	bne.n	8003bba <memset+0xa>
 8003bb8:	4770      	bx	lr
 8003bba:	7019      	strb	r1, [r3, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	e7f9      	b.n	8003bb4 <memset+0x4>

08003bc0 <__libc_init_array>:
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	2600      	movs	r6, #0
 8003bc4:	4c0c      	ldr	r4, [pc, #48]	@ (8003bf8 <__libc_init_array+0x38>)
 8003bc6:	4d0d      	ldr	r5, [pc, #52]	@ (8003bfc <__libc_init_array+0x3c>)
 8003bc8:	1b64      	subs	r4, r4, r5
 8003bca:	10a4      	asrs	r4, r4, #2
 8003bcc:	42a6      	cmp	r6, r4
 8003bce:	d109      	bne.n	8003be4 <__libc_init_array+0x24>
 8003bd0:	2600      	movs	r6, #0
 8003bd2:	f000 f823 	bl	8003c1c <_init>
 8003bd6:	4c0a      	ldr	r4, [pc, #40]	@ (8003c00 <__libc_init_array+0x40>)
 8003bd8:	4d0a      	ldr	r5, [pc, #40]	@ (8003c04 <__libc_init_array+0x44>)
 8003bda:	1b64      	subs	r4, r4, r5
 8003bdc:	10a4      	asrs	r4, r4, #2
 8003bde:	42a6      	cmp	r6, r4
 8003be0:	d105      	bne.n	8003bee <__libc_init_array+0x2e>
 8003be2:	bd70      	pop	{r4, r5, r6, pc}
 8003be4:	00b3      	lsls	r3, r6, #2
 8003be6:	58eb      	ldr	r3, [r5, r3]
 8003be8:	4798      	blx	r3
 8003bea:	3601      	adds	r6, #1
 8003bec:	e7ee      	b.n	8003bcc <__libc_init_array+0xc>
 8003bee:	00b3      	lsls	r3, r6, #2
 8003bf0:	58eb      	ldr	r3, [r5, r3]
 8003bf2:	4798      	blx	r3
 8003bf4:	3601      	adds	r6, #1
 8003bf6:	e7f2      	b.n	8003bde <__libc_init_array+0x1e>
 8003bf8:	08003ef0 	.word	0x08003ef0
 8003bfc:	08003ef0 	.word	0x08003ef0
 8003c00:	08003ef4 	.word	0x08003ef4
 8003c04:	08003ef0 	.word	0x08003ef0

08003c08 <memcpy>:
 8003c08:	2300      	movs	r3, #0
 8003c0a:	b510      	push	{r4, lr}
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d100      	bne.n	8003c12 <memcpy+0xa>
 8003c10:	bd10      	pop	{r4, pc}
 8003c12:	5ccc      	ldrb	r4, [r1, r3]
 8003c14:	54c4      	strb	r4, [r0, r3]
 8003c16:	3301      	adds	r3, #1
 8003c18:	e7f8      	b.n	8003c0c <memcpy+0x4>
	...

08003c1c <_init>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c22:	bc08      	pop	{r3}
 8003c24:	469e      	mov	lr, r3
 8003c26:	4770      	bx	lr

08003c28 <_fini>:
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2e:	bc08      	pop	{r3}
 8003c30:	469e      	mov	lr, r3
 8003c32:	4770      	bx	lr
